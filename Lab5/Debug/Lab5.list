
Lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b88  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  08003c48  08003c48  00013c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f44  08003f44  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003f44  08003f44  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f44  08003f44  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f44  08003f44  00013f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f48  08003f48  00013f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003f4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000070  08003fbc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08003fbc  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a27d  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001930  00000000  00000000  0002a315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  0002bc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000660  00000000  00000000  0002c340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000107b1  00000000  00000000  0002c9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009158  00000000  00000000  0003d151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005e8a4  00000000  00000000  000462a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a4b4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002224  00000000  00000000  000a4ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003c30 	.word	0x08003c30

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003c30 	.word	0x08003c30

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char const *buf, int n)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
 /* stdout redirection to UART2 */
 HAL_UART_Transmit(&huart2, (uint8_t*)(buf), n, HAL_MAX_DELAY);
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	b29a      	uxth	r2, r3
 8000244:	2301      	movs	r3, #1
 8000246:	425b      	negs	r3, r3
 8000248:	68b9      	ldr	r1, [r7, #8]
 800024a:	4804      	ldr	r0, [pc, #16]	; (800025c <_write+0x28>)
 800024c:	f001 fd54 	bl	8001cf8 <HAL_UART_Transmit>
 return n;
 8000250:	687b      	ldr	r3, [r7, #4]
}
 8000252:	0018      	movs	r0, r3
 8000254:	46bd      	mov	sp, r7
 8000256:	b004      	add	sp, #16
 8000258:	bd80      	pop	{r7, pc}
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	20000220 	.word	0x20000220

08000260 <uart_process_command>:

void uart_process_command(char *cmd)
{
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	b085      	sub	sp, #20
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
//	printf("prijato: '%s'\n", cmd);

	char *token;
	token = strtok(cmd, " ");
 8000268:	4a54      	ldr	r2, [pc, #336]	; (80003bc <uart_process_command+0x15c>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	0011      	movs	r1, r2
 800026e:	0018      	movs	r0, r3
 8000270:	f002 fc6c 	bl	8002b4c <strtok>
 8000274:	0003      	movs	r3, r0
 8000276:	60fb      	str	r3, [r7, #12]

	if (strcasecmp(token, "HELLO") == 0)
 8000278:	4a51      	ldr	r2, [pc, #324]	; (80003c0 <uart_process_command+0x160>)
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	0011      	movs	r1, r2
 800027e:	0018      	movs	r0, r3
 8000280:	f002 fc4a 	bl	8002b18 <strcasecmp>
 8000284:	1e03      	subs	r3, r0, #0
 8000286:	d104      	bne.n	8000292 <uart_process_command+0x32>
	{
		printf("Komunikace OK\n");
 8000288:	4b4e      	ldr	r3, [pc, #312]	; (80003c4 <uart_process_command+0x164>)
 800028a:	0018      	movs	r0, r3
 800028c:	f002 fc3a 	bl	8002b04 <puts>
		}


	}

}
 8000290:	e090      	b.n	80003b4 <uart_process_command+0x154>
	else if (strcasecmp(token, "LED1") == 0)
 8000292:	4a4d      	ldr	r2, [pc, #308]	; (80003c8 <uart_process_command+0x168>)
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	0011      	movs	r1, r2
 8000298:	0018      	movs	r0, r3
 800029a:	f002 fc3d 	bl	8002b18 <strcasecmp>
 800029e:	1e03      	subs	r3, r0, #0
 80002a0:	d12e      	bne.n	8000300 <uart_process_command+0xa0>
		token = strtok(NULL, " ");
 80002a2:	4b46      	ldr	r3, [pc, #280]	; (80003bc <uart_process_command+0x15c>)
 80002a4:	0019      	movs	r1, r3
 80002a6:	2000      	movs	r0, #0
 80002a8:	f002 fc50 	bl	8002b4c <strtok>
 80002ac:	0003      	movs	r3, r0
 80002ae:	60fb      	str	r3, [r7, #12]
		if (strcasecmp(token, "ON") == 0)
 80002b0:	4a46      	ldr	r2, [pc, #280]	; (80003cc <uart_process_command+0x16c>)
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	0011      	movs	r1, r2
 80002b6:	0018      	movs	r0, r3
 80002b8:	f002 fc2e 	bl	8002b18 <strcasecmp>
 80002bc:	1e03      	subs	r3, r0, #0
 80002be:	d10b      	bne.n	80002d8 <uart_process_command+0x78>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80002c0:	2390      	movs	r3, #144	; 0x90
 80002c2:	05db      	lsls	r3, r3, #23
 80002c4:	2201      	movs	r2, #1
 80002c6:	2110      	movs	r1, #16
 80002c8:	0018      	movs	r0, r3
 80002ca:	f001 f838 	bl	800133e <HAL_GPIO_WritePin>
			printf("LED1 on OK\n");
 80002ce:	4b40      	ldr	r3, [pc, #256]	; (80003d0 <uart_process_command+0x170>)
 80002d0:	0018      	movs	r0, r3
 80002d2:	f002 fc17 	bl	8002b04 <puts>
}
 80002d6:	e06d      	b.n	80003b4 <uart_process_command+0x154>
		else if (strcasecmp(token, "OFF") == 0)
 80002d8:	4a3e      	ldr	r2, [pc, #248]	; (80003d4 <uart_process_command+0x174>)
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	0011      	movs	r1, r2
 80002de:	0018      	movs	r0, r3
 80002e0:	f002 fc1a 	bl	8002b18 <strcasecmp>
 80002e4:	1e03      	subs	r3, r0, #0
 80002e6:	d165      	bne.n	80003b4 <uart_process_command+0x154>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80002e8:	2390      	movs	r3, #144	; 0x90
 80002ea:	05db      	lsls	r3, r3, #23
 80002ec:	2200      	movs	r2, #0
 80002ee:	2110      	movs	r1, #16
 80002f0:	0018      	movs	r0, r3
 80002f2:	f001 f824 	bl	800133e <HAL_GPIO_WritePin>
			printf("LED1 off OK\n");
 80002f6:	4b38      	ldr	r3, [pc, #224]	; (80003d8 <uart_process_command+0x178>)
 80002f8:	0018      	movs	r0, r3
 80002fa:	f002 fc03 	bl	8002b04 <puts>
}
 80002fe:	e059      	b.n	80003b4 <uart_process_command+0x154>
	else if (strcasecmp(token, "LED2") == 0)
 8000300:	4a36      	ldr	r2, [pc, #216]	; (80003dc <uart_process_command+0x17c>)
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	0011      	movs	r1, r2
 8000306:	0018      	movs	r0, r3
 8000308:	f002 fc06 	bl	8002b18 <strcasecmp>
 800030c:	1e03      	subs	r3, r0, #0
 800030e:	d128      	bne.n	8000362 <uart_process_command+0x102>
		token = strtok(NULL, " ");
 8000310:	4b2a      	ldr	r3, [pc, #168]	; (80003bc <uart_process_command+0x15c>)
 8000312:	0019      	movs	r1, r3
 8000314:	2000      	movs	r0, #0
 8000316:	f002 fc19 	bl	8002b4c <strtok>
 800031a:	0003      	movs	r3, r0
 800031c:	60fb      	str	r3, [r7, #12]
		if (strcasecmp(token, "ON") == 0)
 800031e:	4a2b      	ldr	r2, [pc, #172]	; (80003cc <uart_process_command+0x16c>)
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	0011      	movs	r1, r2
 8000324:	0018      	movs	r0, r3
 8000326:	f002 fbf7 	bl	8002b18 <strcasecmp>
 800032a:	1e03      	subs	r3, r0, #0
 800032c:	d106      	bne.n	800033c <uart_process_command+0xdc>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800032e:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <uart_process_command+0x180>)
 8000330:	2201      	movs	r2, #1
 8000332:	2101      	movs	r1, #1
 8000334:	0018      	movs	r0, r3
 8000336:	f001 f802 	bl	800133e <HAL_GPIO_WritePin>
 800033a:	e00d      	b.n	8000358 <uart_process_command+0xf8>
		else if (strcasecmp(token, "OFF") == 0)
 800033c:	4a25      	ldr	r2, [pc, #148]	; (80003d4 <uart_process_command+0x174>)
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	0011      	movs	r1, r2
 8000342:	0018      	movs	r0, r3
 8000344:	f002 fbe8 	bl	8002b18 <strcasecmp>
 8000348:	1e03      	subs	r3, r0, #0
 800034a:	d105      	bne.n	8000358 <uart_process_command+0xf8>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800034c:	4b24      	ldr	r3, [pc, #144]	; (80003e0 <uart_process_command+0x180>)
 800034e:	2200      	movs	r2, #0
 8000350:	2101      	movs	r1, #1
 8000352:	0018      	movs	r0, r3
 8000354:	f000 fff3 	bl	800133e <HAL_GPIO_WritePin>
		printf("OK\n");
 8000358:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <uart_process_command+0x184>)
 800035a:	0018      	movs	r0, r3
 800035c:	f002 fbd2 	bl	8002b04 <puts>
}
 8000360:	e028      	b.n	80003b4 <uart_process_command+0x154>
	else if (strcasecmp(token, "STATUS") == 0)
 8000362:	4a21      	ldr	r2, [pc, #132]	; (80003e8 <uart_process_command+0x188>)
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	0011      	movs	r1, r2
 8000368:	0018      	movs	r0, r3
 800036a:	f002 fbd5 	bl	8002b18 <strcasecmp>
 800036e:	1e03      	subs	r3, r0, #0
 8000370:	d120      	bne.n	80003b4 <uart_process_command+0x154>
		uint8_t stat1 = 0;
 8000372:	250b      	movs	r5, #11
 8000374:	197b      	adds	r3, r7, r5
 8000376:	2200      	movs	r2, #0
 8000378:	701a      	strb	r2, [r3, #0]
		uint8_t stat2 = 0;
 800037a:	260a      	movs	r6, #10
 800037c:	19bb      	adds	r3, r7, r6
 800037e:	2200      	movs	r2, #0
 8000380:	701a      	strb	r2, [r3, #0]
		stat1 = HAL_GPIO_ReadPin(LED1_GPIO_Port, LED1_Pin);
 8000382:	197c      	adds	r4, r7, r5
 8000384:	2390      	movs	r3, #144	; 0x90
 8000386:	05db      	lsls	r3, r3, #23
 8000388:	2110      	movs	r1, #16
 800038a:	0018      	movs	r0, r3
 800038c:	f000 ffba 	bl	8001304 <HAL_GPIO_ReadPin>
 8000390:	0003      	movs	r3, r0
 8000392:	7023      	strb	r3, [r4, #0]
		stat2 = HAL_GPIO_ReadPin(LED2_GPIO_Port, LED2_Pin);
 8000394:	19bc      	adds	r4, r7, r6
 8000396:	4b12      	ldr	r3, [pc, #72]	; (80003e0 <uart_process_command+0x180>)
 8000398:	2101      	movs	r1, #1
 800039a:	0018      	movs	r0, r3
 800039c:	f000 ffb2 	bl	8001304 <HAL_GPIO_ReadPin>
 80003a0:	0003      	movs	r3, r0
 80003a2:	7023      	strb	r3, [r4, #0]
			printf("Status 1: %i, Status2: %i \n", stat1, stat2);
 80003a4:	197b      	adds	r3, r7, r5
 80003a6:	7819      	ldrb	r1, [r3, #0]
 80003a8:	19bb      	adds	r3, r7, r6
 80003aa:	781a      	ldrb	r2, [r3, #0]
 80003ac:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <uart_process_command+0x18c>)
 80003ae:	0018      	movs	r0, r3
 80003b0:	f002 fb1c 	bl	80029ec <iprintf>
}
 80003b4:	46c0      	nop			; (mov r8, r8)
 80003b6:	46bd      	mov	sp, r7
 80003b8:	b005      	add	sp, #20
 80003ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003bc:	08003c48 	.word	0x08003c48
 80003c0:	08003c4c 	.word	0x08003c4c
 80003c4:	08003c54 	.word	0x08003c54
 80003c8:	08003c64 	.word	0x08003c64
 80003cc:	08003c6c 	.word	0x08003c6c
 80003d0:	08003c70 	.word	0x08003c70
 80003d4:	08003c7c 	.word	0x08003c7c
 80003d8:	08003c80 	.word	0x08003c80
 80003dc:	08003c8c 	.word	0x08003c8c
 80003e0:	48000400 	.word	0x48000400
 80003e4:	08003c94 	.word	0x08003c94
 80003e8:	08003c98 	.word	0x08003c98
 80003ec:	08003ca0 	.word	0x08003ca0

080003f0 <uart_byte_available>:

static void uart_byte_available(uint8_t c)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	0002      	movs	r2, r0
 80003f8:	1dfb      	adds	r3, r7, #7
 80003fa:	701a      	strb	r2, [r3, #0]
 static uint16_t cnt;
 static char data[CMD_BUFFER_LEN];
 if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 126) data[cnt++] = c;
 80003fc:	4b19      	ldr	r3, [pc, #100]	; (8000464 <uart_byte_available+0x74>)
 80003fe:	881b      	ldrh	r3, [r3, #0]
 8000400:	2bff      	cmp	r3, #255	; 0xff
 8000402:	d812      	bhi.n	800042a <uart_byte_available+0x3a>
 8000404:	1dfb      	adds	r3, r7, #7
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	2b1f      	cmp	r3, #31
 800040a:	d90e      	bls.n	800042a <uart_byte_available+0x3a>
 800040c:	1dfb      	adds	r3, r7, #7
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b7e      	cmp	r3, #126	; 0x7e
 8000412:	d80a      	bhi.n	800042a <uart_byte_available+0x3a>
 8000414:	4b13      	ldr	r3, [pc, #76]	; (8000464 <uart_byte_available+0x74>)
 8000416:	881b      	ldrh	r3, [r3, #0]
 8000418:	1c5a      	adds	r2, r3, #1
 800041a:	b291      	uxth	r1, r2
 800041c:	4a11      	ldr	r2, [pc, #68]	; (8000464 <uart_byte_available+0x74>)
 800041e:	8011      	strh	r1, [r2, #0]
 8000420:	0019      	movs	r1, r3
 8000422:	4b11      	ldr	r3, [pc, #68]	; (8000468 <uart_byte_available+0x78>)
 8000424:	1dfa      	adds	r2, r7, #7
 8000426:	7812      	ldrb	r2, [r2, #0]
 8000428:	545a      	strb	r2, [r3, r1]
 if ((c == '\n' || c == '\r') && cnt > 0) {
 800042a:	1dfb      	adds	r3, r7, #7
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	2b0a      	cmp	r3, #10
 8000430:	d003      	beq.n	800043a <uart_byte_available+0x4a>
 8000432:	1dfb      	adds	r3, r7, #7
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	2b0d      	cmp	r3, #13
 8000438:	d110      	bne.n	800045c <uart_byte_available+0x6c>
 800043a:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <uart_byte_available+0x74>)
 800043c:	881b      	ldrh	r3, [r3, #0]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d00c      	beq.n	800045c <uart_byte_available+0x6c>
 data[cnt] = '\0';
 8000442:	4b08      	ldr	r3, [pc, #32]	; (8000464 <uart_byte_available+0x74>)
 8000444:	881b      	ldrh	r3, [r3, #0]
 8000446:	001a      	movs	r2, r3
 8000448:	4b07      	ldr	r3, [pc, #28]	; (8000468 <uart_byte_available+0x78>)
 800044a:	2100      	movs	r1, #0
 800044c:	5499      	strb	r1, [r3, r2]
 uart_process_command(data);
 800044e:	4b06      	ldr	r3, [pc, #24]	; (8000468 <uart_byte_available+0x78>)
 8000450:	0018      	movs	r0, r3
 8000452:	f7ff ff05 	bl	8000260 <uart_process_command>
 cnt = 0;
 8000456:	4b03      	ldr	r3, [pc, #12]	; (8000464 <uart_byte_available+0x74>)
 8000458:	2200      	movs	r2, #0
 800045a:	801a      	strh	r2, [r3, #0]
 }
}
 800045c:	46c0      	nop			; (mov r8, r8)
 800045e:	46bd      	mov	sp, r7
 8000460:	b002      	add	sp, #8
 8000462:	bd80      	pop	{r7, pc}
 8000464:	200000ce 	.word	0x200000ce
 8000468:	200000d0 	.word	0x200000d0

0800046c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000472:	f000 fafd 	bl	8000a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000476:	f000 f83b 	bl	80004f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800047a:	f000 f8d1 	bl	8000620 <MX_GPIO_Init>
  MX_DMA_Init();
 800047e:	f000 f8b1 	bl	80005e4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000482:	f000 f87f 	bl	8000584 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart2, uart_rx_buf, RX_BUFFER_LEN);
 8000486:	4916      	ldr	r1, [pc, #88]	; (80004e0 <main+0x74>)
 8000488:	4b16      	ldr	r3, [pc, #88]	; (80004e4 <main+0x78>)
 800048a:	2240      	movs	r2, #64	; 0x40
 800048c:	0018      	movs	r0, r3
 800048e:	f001 fcdc 	bl	8001e4a <HAL_UART_Receive_DMA>
//	uint8_t c;
//	HAL_UART_Receive(&huart2, &c, 1, HAL_MAX_DELAY);
//	HAL_UART_Transmit(&huart2, &c, 1, HAL_MAX_DELAY);
//  }

	while (uart_rx_read_ptr != uart_rx_write_ptr) {
 8000492:	e019      	b.n	80004c8 <main+0x5c>
	uint8_t b = uart_rx_buf[uart_rx_read_ptr];
 8000494:	4b14      	ldr	r3, [pc, #80]	; (80004e8 <main+0x7c>)
 8000496:	881b      	ldrh	r3, [r3, #0]
 8000498:	b29b      	uxth	r3, r3
 800049a:	0019      	movs	r1, r3
 800049c:	1dfb      	adds	r3, r7, #7
 800049e:	4a10      	ldr	r2, [pc, #64]	; (80004e0 <main+0x74>)
 80004a0:	5c52      	ldrb	r2, [r2, r1]
 80004a2:	701a      	strb	r2, [r3, #0]
	if (++uart_rx_read_ptr >= RX_BUFFER_LEN) uart_rx_read_ptr = 0; // increase read pointer
 80004a4:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <main+0x7c>)
 80004a6:	881b      	ldrh	r3, [r3, #0]
 80004a8:	b29b      	uxth	r3, r3
 80004aa:	3301      	adds	r3, #1
 80004ac:	b29b      	uxth	r3, r3
 80004ae:	4a0e      	ldr	r2, [pc, #56]	; (80004e8 <main+0x7c>)
 80004b0:	1c19      	adds	r1, r3, #0
 80004b2:	8011      	strh	r1, [r2, #0]
 80004b4:	2b3f      	cmp	r3, #63	; 0x3f
 80004b6:	d902      	bls.n	80004be <main+0x52>
 80004b8:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <main+0x7c>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	801a      	strh	r2, [r3, #0]
	uart_byte_available(b); // process every received byte with the RX state machine
 80004be:	1dfb      	adds	r3, r7, #7
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	0018      	movs	r0, r3
 80004c4:	f7ff ff94 	bl	80003f0 <uart_byte_available>
	while (uart_rx_read_ptr != uart_rx_write_ptr) {
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <main+0x7c>)
 80004ca:	881b      	ldrh	r3, [r3, #0]
 80004cc:	b29b      	uxth	r3, r3
 80004ce:	0019      	movs	r1, r3
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <main+0x80>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	685b      	ldr	r3, [r3, #4]
 80004d6:	2240      	movs	r2, #64	; 0x40
 80004d8:	1ad3      	subs	r3, r2, r3
 80004da:	4299      	cmp	r1, r3
 80004dc:	d1da      	bne.n	8000494 <main+0x28>
 80004de:	e7f3      	b.n	80004c8 <main+0x5c>
 80004e0:	2000008c 	.word	0x2000008c
 80004e4:	20000220 	.word	0x20000220
 80004e8:	200000cc 	.word	0x200000cc
 80004ec:	200001dc 	.word	0x200001dc

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b590      	push	{r4, r7, lr}
 80004f2:	b091      	sub	sp, #68	; 0x44
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	2410      	movs	r4, #16
 80004f8:	193b      	adds	r3, r7, r4
 80004fa:	0018      	movs	r0, r3
 80004fc:	2330      	movs	r3, #48	; 0x30
 80004fe:	001a      	movs	r2, r3
 8000500:	2100      	movs	r1, #0
 8000502:	f002 fa6b 	bl	80029dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000506:	003b      	movs	r3, r7
 8000508:	0018      	movs	r0, r3
 800050a:	2310      	movs	r3, #16
 800050c:	001a      	movs	r2, r3
 800050e:	2100      	movs	r1, #0
 8000510:	f002 fa64 	bl	80029dc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000514:	0021      	movs	r1, r4
 8000516:	187b      	adds	r3, r7, r1
 8000518:	2202      	movs	r2, #2
 800051a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800051c:	187b      	adds	r3, r7, r1
 800051e:	2201      	movs	r2, #1
 8000520:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000522:	187b      	adds	r3, r7, r1
 8000524:	2210      	movs	r2, #16
 8000526:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000528:	187b      	adds	r3, r7, r1
 800052a:	2202      	movs	r2, #2
 800052c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800052e:	187b      	adds	r3, r7, r1
 8000530:	2200      	movs	r2, #0
 8000532:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000534:	187b      	adds	r3, r7, r1
 8000536:	22a0      	movs	r2, #160	; 0xa0
 8000538:	0392      	lsls	r2, r2, #14
 800053a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2200      	movs	r2, #0
 8000540:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000542:	187b      	adds	r3, r7, r1
 8000544:	0018      	movs	r0, r3
 8000546:	f000 ff17 	bl	8001378 <HAL_RCC_OscConfig>
 800054a:	1e03      	subs	r3, r0, #0
 800054c:	d001      	beq.n	8000552 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800054e:	f000 f8f9 	bl	8000744 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000552:	003b      	movs	r3, r7
 8000554:	2207      	movs	r2, #7
 8000556:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000558:	003b      	movs	r3, r7
 800055a:	2202      	movs	r2, #2
 800055c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055e:	003b      	movs	r3, r7
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000564:	003b      	movs	r3, r7
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800056a:	003b      	movs	r3, r7
 800056c:	2101      	movs	r1, #1
 800056e:	0018      	movs	r0, r3
 8000570:	f001 fa1c 	bl	80019ac <HAL_RCC_ClockConfig>
 8000574:	1e03      	subs	r3, r0, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000578:	f000 f8e4 	bl	8000744 <Error_Handler>
  }
}
 800057c:	46c0      	nop			; (mov r8, r8)
 800057e:	46bd      	mov	sp, r7
 8000580:	b011      	add	sp, #68	; 0x44
 8000582:	bd90      	pop	{r4, r7, pc}

08000584 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000588:	4b14      	ldr	r3, [pc, #80]	; (80005dc <MX_USART2_UART_Init+0x58>)
 800058a:	4a15      	ldr	r2, [pc, #84]	; (80005e0 <MX_USART2_UART_Init+0x5c>)
 800058c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800058e:	4b13      	ldr	r3, [pc, #76]	; (80005dc <MX_USART2_UART_Init+0x58>)
 8000590:	2296      	movs	r2, #150	; 0x96
 8000592:	0212      	lsls	r2, r2, #8
 8000594:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000596:	4b11      	ldr	r3, [pc, #68]	; (80005dc <MX_USART2_UART_Init+0x58>)
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800059c:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <MX_USART2_UART_Init+0x58>)
 800059e:	2200      	movs	r2, #0
 80005a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005a2:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <MX_USART2_UART_Init+0x58>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <MX_USART2_UART_Init+0x58>)
 80005aa:	220c      	movs	r2, #12
 80005ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ae:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <MX_USART2_UART_Init+0x58>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <MX_USART2_UART_Init+0x58>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ba:	4b08      	ldr	r3, [pc, #32]	; (80005dc <MX_USART2_UART_Init+0x58>)
 80005bc:	2200      	movs	r2, #0
 80005be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <MX_USART2_UART_Init+0x58>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005c6:	4b05      	ldr	r3, [pc, #20]	; (80005dc <MX_USART2_UART_Init+0x58>)
 80005c8:	0018      	movs	r0, r3
 80005ca:	f001 fb41 	bl	8001c50 <HAL_UART_Init>
 80005ce:	1e03      	subs	r3, r0, #0
 80005d0:	d001      	beq.n	80005d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005d2:	f000 f8b7 	bl	8000744 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000220 	.word	0x20000220
 80005e0:	40004400 	.word	0x40004400

080005e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <MX_DMA_Init+0x38>)
 80005ec:	695a      	ldr	r2, [r3, #20]
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <MX_DMA_Init+0x38>)
 80005f0:	2101      	movs	r1, #1
 80005f2:	430a      	orrs	r2, r1
 80005f4:	615a      	str	r2, [r3, #20]
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <MX_DMA_Init+0x38>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	2201      	movs	r2, #1
 80005fc:	4013      	ands	r3, r2
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	200b      	movs	r0, #11
 8000608:	f000 fb42 	bl	8000c90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 800060c:	200b      	movs	r0, #11
 800060e:	f000 fb54 	bl	8000cba <HAL_NVIC_EnableIRQ>

}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	46bd      	mov	sp, r7
 8000616:	b002      	add	sp, #8
 8000618:	bd80      	pop	{r7, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	40021000 	.word	0x40021000

08000620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b08b      	sub	sp, #44	; 0x2c
 8000624:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	2414      	movs	r4, #20
 8000628:	193b      	adds	r3, r7, r4
 800062a:	0018      	movs	r0, r3
 800062c:	2314      	movs	r3, #20
 800062e:	001a      	movs	r2, r3
 8000630:	2100      	movs	r1, #0
 8000632:	f002 f9d3 	bl	80029dc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000636:	4b40      	ldr	r3, [pc, #256]	; (8000738 <MX_GPIO_Init+0x118>)
 8000638:	695a      	ldr	r2, [r3, #20]
 800063a:	4b3f      	ldr	r3, [pc, #252]	; (8000738 <MX_GPIO_Init+0x118>)
 800063c:	2180      	movs	r1, #128	; 0x80
 800063e:	0309      	lsls	r1, r1, #12
 8000640:	430a      	orrs	r2, r1
 8000642:	615a      	str	r2, [r3, #20]
 8000644:	4b3c      	ldr	r3, [pc, #240]	; (8000738 <MX_GPIO_Init+0x118>)
 8000646:	695a      	ldr	r2, [r3, #20]
 8000648:	2380      	movs	r3, #128	; 0x80
 800064a:	031b      	lsls	r3, r3, #12
 800064c:	4013      	ands	r3, r2
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000652:	4b39      	ldr	r3, [pc, #228]	; (8000738 <MX_GPIO_Init+0x118>)
 8000654:	695a      	ldr	r2, [r3, #20]
 8000656:	4b38      	ldr	r3, [pc, #224]	; (8000738 <MX_GPIO_Init+0x118>)
 8000658:	2180      	movs	r1, #128	; 0x80
 800065a:	03c9      	lsls	r1, r1, #15
 800065c:	430a      	orrs	r2, r1
 800065e:	615a      	str	r2, [r3, #20]
 8000660:	4b35      	ldr	r3, [pc, #212]	; (8000738 <MX_GPIO_Init+0x118>)
 8000662:	695a      	ldr	r2, [r3, #20]
 8000664:	2380      	movs	r3, #128	; 0x80
 8000666:	03db      	lsls	r3, r3, #15
 8000668:	4013      	ands	r3, r2
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b32      	ldr	r3, [pc, #200]	; (8000738 <MX_GPIO_Init+0x118>)
 8000670:	695a      	ldr	r2, [r3, #20]
 8000672:	4b31      	ldr	r3, [pc, #196]	; (8000738 <MX_GPIO_Init+0x118>)
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	0289      	lsls	r1, r1, #10
 8000678:	430a      	orrs	r2, r1
 800067a:	615a      	str	r2, [r3, #20]
 800067c:	4b2e      	ldr	r3, [pc, #184]	; (8000738 <MX_GPIO_Init+0x118>)
 800067e:	695a      	ldr	r2, [r3, #20]
 8000680:	2380      	movs	r3, #128	; 0x80
 8000682:	029b      	lsls	r3, r3, #10
 8000684:	4013      	ands	r3, r2
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068a:	4b2b      	ldr	r3, [pc, #172]	; (8000738 <MX_GPIO_Init+0x118>)
 800068c:	695a      	ldr	r2, [r3, #20]
 800068e:	4b2a      	ldr	r3, [pc, #168]	; (8000738 <MX_GPIO_Init+0x118>)
 8000690:	2180      	movs	r1, #128	; 0x80
 8000692:	02c9      	lsls	r1, r1, #11
 8000694:	430a      	orrs	r2, r1
 8000696:	615a      	str	r2, [r3, #20]
 8000698:	4b27      	ldr	r3, [pc, #156]	; (8000738 <MX_GPIO_Init+0x118>)
 800069a:	695a      	ldr	r2, [r3, #20]
 800069c:	2380      	movs	r3, #128	; 0x80
 800069e:	02db      	lsls	r3, r3, #11
 80006a0:	4013      	ands	r3, r2
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006a6:	2390      	movs	r3, #144	; 0x90
 80006a8:	05db      	lsls	r3, r3, #23
 80006aa:	2200      	movs	r2, #0
 80006ac:	2130      	movs	r1, #48	; 0x30
 80006ae:	0018      	movs	r0, r3
 80006b0:	f000 fe45 	bl	800133e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80006b4:	4b21      	ldr	r3, [pc, #132]	; (800073c <MX_GPIO_Init+0x11c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	2101      	movs	r1, #1
 80006ba:	0018      	movs	r0, r3
 80006bc:	f000 fe3f 	bl	800133e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	2280      	movs	r2, #128	; 0x80
 80006c4:	0192      	lsls	r2, r2, #6
 80006c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	2284      	movs	r2, #132	; 0x84
 80006cc:	0392      	lsls	r2, r2, #14
 80006ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	4a19      	ldr	r2, [pc, #100]	; (8000740 <MX_GPIO_Init+0x120>)
 80006da:	0019      	movs	r1, r3
 80006dc:	0010      	movs	r0, r2
 80006de:	f000 fca1 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LD2_Pin;
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	2230      	movs	r2, #48	; 0x30
 80006e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	2201      	movs	r2, #1
 80006ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fa:	193a      	adds	r2, r7, r4
 80006fc:	2390      	movs	r3, #144	; 0x90
 80006fe:	05db      	lsls	r3, r3, #23
 8000700:	0011      	movs	r1, r2
 8000702:	0018      	movs	r0, r3
 8000704:	f000 fc8e 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000708:	0021      	movs	r1, r4
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2201      	movs	r2, #1
 800070e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2201      	movs	r2, #1
 8000714:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071c:	187b      	adds	r3, r7, r1
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000722:	187b      	adds	r3, r7, r1
 8000724:	4a05      	ldr	r2, [pc, #20]	; (800073c <MX_GPIO_Init+0x11c>)
 8000726:	0019      	movs	r1, r3
 8000728:	0010      	movs	r0, r2
 800072a:	f000 fc7b 	bl	8001024 <HAL_GPIO_Init>

}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	b00b      	add	sp, #44	; 0x2c
 8000734:	bd90      	pop	{r4, r7, pc}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	40021000 	.word	0x40021000
 800073c:	48000400 	.word	0x48000400
 8000740:	48000800 	.word	0x48000800

08000744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000748:	b672      	cpsid	i
}
 800074a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800074c:	e7fe      	b.n	800074c <Error_Handler+0x8>
	...

08000750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <HAL_MspInit+0x44>)
 8000758:	699a      	ldr	r2, [r3, #24]
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <HAL_MspInit+0x44>)
 800075c:	2101      	movs	r1, #1
 800075e:	430a      	orrs	r2, r1
 8000760:	619a      	str	r2, [r3, #24]
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <HAL_MspInit+0x44>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	2201      	movs	r2, #1
 8000768:	4013      	ands	r3, r2
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <HAL_MspInit+0x44>)
 8000770:	69da      	ldr	r2, [r3, #28]
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <HAL_MspInit+0x44>)
 8000774:	2180      	movs	r1, #128	; 0x80
 8000776:	0549      	lsls	r1, r1, #21
 8000778:	430a      	orrs	r2, r1
 800077a:	61da      	str	r2, [r3, #28]
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <HAL_MspInit+0x44>)
 800077e:	69da      	ldr	r2, [r3, #28]
 8000780:	2380      	movs	r3, #128	; 0x80
 8000782:	055b      	lsls	r3, r3, #21
 8000784:	4013      	ands	r3, r2
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	b002      	add	sp, #8
 8000790:	bd80      	pop	{r7, pc}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	40021000 	.word	0x40021000

08000798 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b08b      	sub	sp, #44	; 0x2c
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	2414      	movs	r4, #20
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	0018      	movs	r0, r3
 80007a6:	2314      	movs	r3, #20
 80007a8:	001a      	movs	r2, r3
 80007aa:	2100      	movs	r1, #0
 80007ac:	f002 f916 	bl	80029dc <memset>
  if(huart->Instance==USART2)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a2f      	ldr	r2, [pc, #188]	; (8000874 <HAL_UART_MspInit+0xdc>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d158      	bne.n	800086c <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007ba:	4b2f      	ldr	r3, [pc, #188]	; (8000878 <HAL_UART_MspInit+0xe0>)
 80007bc:	69da      	ldr	r2, [r3, #28]
 80007be:	4b2e      	ldr	r3, [pc, #184]	; (8000878 <HAL_UART_MspInit+0xe0>)
 80007c0:	2180      	movs	r1, #128	; 0x80
 80007c2:	0289      	lsls	r1, r1, #10
 80007c4:	430a      	orrs	r2, r1
 80007c6:	61da      	str	r2, [r3, #28]
 80007c8:	4b2b      	ldr	r3, [pc, #172]	; (8000878 <HAL_UART_MspInit+0xe0>)
 80007ca:	69da      	ldr	r2, [r3, #28]
 80007cc:	2380      	movs	r3, #128	; 0x80
 80007ce:	029b      	lsls	r3, r3, #10
 80007d0:	4013      	ands	r3, r2
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	4b28      	ldr	r3, [pc, #160]	; (8000878 <HAL_UART_MspInit+0xe0>)
 80007d8:	695a      	ldr	r2, [r3, #20]
 80007da:	4b27      	ldr	r3, [pc, #156]	; (8000878 <HAL_UART_MspInit+0xe0>)
 80007dc:	2180      	movs	r1, #128	; 0x80
 80007de:	0289      	lsls	r1, r1, #10
 80007e0:	430a      	orrs	r2, r1
 80007e2:	615a      	str	r2, [r3, #20]
 80007e4:	4b24      	ldr	r3, [pc, #144]	; (8000878 <HAL_UART_MspInit+0xe0>)
 80007e6:	695a      	ldr	r2, [r3, #20]
 80007e8:	2380      	movs	r3, #128	; 0x80
 80007ea:	029b      	lsls	r3, r3, #10
 80007ec:	4013      	ands	r3, r2
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007f2:	0021      	movs	r1, r4
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	220c      	movs	r2, #12
 80007f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2202      	movs	r2, #2
 80007fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2200      	movs	r2, #0
 800080a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800080c:	187b      	adds	r3, r7, r1
 800080e:	2201      	movs	r2, #1
 8000810:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000812:	187a      	adds	r2, r7, r1
 8000814:	2390      	movs	r3, #144	; 0x90
 8000816:	05db      	lsls	r3, r3, #23
 8000818:	0011      	movs	r1, r2
 800081a:	0018      	movs	r0, r3
 800081c:	f000 fc02 	bl	8001024 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000820:	4b16      	ldr	r3, [pc, #88]	; (800087c <HAL_UART_MspInit+0xe4>)
 8000822:	4a17      	ldr	r2, [pc, #92]	; (8000880 <HAL_UART_MspInit+0xe8>)
 8000824:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <HAL_UART_MspInit+0xe4>)
 8000828:	2200      	movs	r2, #0
 800082a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800082c:	4b13      	ldr	r3, [pc, #76]	; (800087c <HAL_UART_MspInit+0xe4>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000832:	4b12      	ldr	r3, [pc, #72]	; (800087c <HAL_UART_MspInit+0xe4>)
 8000834:	2280      	movs	r2, #128	; 0x80
 8000836:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000838:	4b10      	ldr	r3, [pc, #64]	; (800087c <HAL_UART_MspInit+0xe4>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <HAL_UART_MspInit+0xe4>)
 8000840:	2200      	movs	r2, #0
 8000842:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000844:	4b0d      	ldr	r3, [pc, #52]	; (800087c <HAL_UART_MspInit+0xe4>)
 8000846:	2220      	movs	r2, #32
 8000848:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <HAL_UART_MspInit+0xe4>)
 800084c:	2200      	movs	r2, #0
 800084e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <HAL_UART_MspInit+0xe4>)
 8000852:	0018      	movs	r0, r3
 8000854:	f000 fa4e 	bl	8000cf4 <HAL_DMA_Init>
 8000858:	1e03      	subs	r3, r0, #0
 800085a:	d001      	beq.n	8000860 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 800085c:	f7ff ff72 	bl	8000744 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4a06      	ldr	r2, [pc, #24]	; (800087c <HAL_UART_MspInit+0xe4>)
 8000864:	671a      	str	r2, [r3, #112]	; 0x70
 8000866:	4b05      	ldr	r3, [pc, #20]	; (800087c <HAL_UART_MspInit+0xe4>)
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	b00b      	add	sp, #44	; 0x2c
 8000872:	bd90      	pop	{r4, r7, pc}
 8000874:	40004400 	.word	0x40004400
 8000878:	40021000 	.word	0x40021000
 800087c:	200001dc 	.word	0x200001dc
 8000880:	40020058 	.word	0x40020058

08000884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <NMI_Handler+0x4>

0800088a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088e:	e7fe      	b.n	800088e <HardFault_Handler+0x4>

08000890 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a8:	f000 f92a 	bl	8000b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ac:	46c0      	nop			; (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80008b8:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <DMA1_Channel4_5_IRQHandler+0x14>)
 80008ba:	0018      	movs	r0, r3
 80008bc:	f000 fac8 	bl	8000e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	200001dc 	.word	0x200001dc

080008cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	return 1;
 80008d0:	2301      	movs	r3, #1
}
 80008d2:	0018      	movs	r0, r3
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <_kill>:

int _kill(int pid, int sig)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80008e2:	f002 f851 	bl	8002988 <__errno>
 80008e6:	0003      	movs	r3, r0
 80008e8:	2216      	movs	r2, #22
 80008ea:	601a      	str	r2, [r3, #0]
	return -1;
 80008ec:	2301      	movs	r3, #1
 80008ee:	425b      	negs	r3, r3
}
 80008f0:	0018      	movs	r0, r3
 80008f2:	46bd      	mov	sp, r7
 80008f4:	b002      	add	sp, #8
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <_exit>:

void _exit (int status)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000900:	2301      	movs	r3, #1
 8000902:	425a      	negs	r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	0011      	movs	r1, r2
 8000908:	0018      	movs	r0, r3
 800090a:	f7ff ffe5 	bl	80008d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800090e:	e7fe      	b.n	800090e <_exit+0x16>

08000910 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	e00a      	b.n	8000938 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000922:	e000      	b.n	8000926 <_read+0x16>
 8000924:	bf00      	nop
 8000926:	0001      	movs	r1, r0
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	1c5a      	adds	r2, r3, #1
 800092c:	60ba      	str	r2, [r7, #8]
 800092e:	b2ca      	uxtb	r2, r1
 8000930:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	3301      	adds	r3, #1
 8000936:	617b      	str	r3, [r7, #20]
 8000938:	697a      	ldr	r2, [r7, #20]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	429a      	cmp	r2, r3
 800093e:	dbf0      	blt.n	8000922 <_read+0x12>
	}

return len;
 8000940:	687b      	ldr	r3, [r7, #4]
}
 8000942:	0018      	movs	r0, r3
 8000944:	46bd      	mov	sp, r7
 8000946:	b006      	add	sp, #24
 8000948:	bd80      	pop	{r7, pc}

0800094a <_close>:
	}
	return len;
}

int _close(int file)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b082      	sub	sp, #8
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
	return -1;
 8000952:	2301      	movs	r3, #1
 8000954:	425b      	negs	r3, r3
}
 8000956:	0018      	movs	r0, r3
 8000958:	46bd      	mov	sp, r7
 800095a:	b002      	add	sp, #8
 800095c:	bd80      	pop	{r7, pc}

0800095e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
 8000966:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	2280      	movs	r2, #128	; 0x80
 800096c:	0192      	lsls	r2, r2, #6
 800096e:	605a      	str	r2, [r3, #4]
	return 0;
 8000970:	2300      	movs	r3, #0
}
 8000972:	0018      	movs	r0, r3
 8000974:	46bd      	mov	sp, r7
 8000976:	b002      	add	sp, #8
 8000978:	bd80      	pop	{r7, pc}

0800097a <_isatty>:

int _isatty(int file)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
	return 1;
 8000982:	2301      	movs	r3, #1
}
 8000984:	0018      	movs	r0, r3
 8000986:	46bd      	mov	sp, r7
 8000988:	b002      	add	sp, #8
 800098a:	bd80      	pop	{r7, pc}

0800098c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
	return 0;
 8000998:	2300      	movs	r3, #0
}
 800099a:	0018      	movs	r0, r3
 800099c:	46bd      	mov	sp, r7
 800099e:	b004      	add	sp, #16
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009ac:	4a14      	ldr	r2, [pc, #80]	; (8000a00 <_sbrk+0x5c>)
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <_sbrk+0x60>)
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009b8:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <_sbrk+0x64>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d102      	bne.n	80009c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <_sbrk+0x64>)
 80009c2:	4a12      	ldr	r2, [pc, #72]	; (8000a0c <_sbrk+0x68>)
 80009c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <_sbrk+0x64>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	18d3      	adds	r3, r2, r3
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d207      	bcs.n	80009e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009d4:	f001 ffd8 	bl	8002988 <__errno>
 80009d8:	0003      	movs	r3, r0
 80009da:	220c      	movs	r2, #12
 80009dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009de:	2301      	movs	r3, #1
 80009e0:	425b      	negs	r3, r3
 80009e2:	e009      	b.n	80009f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <_sbrk+0x64>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ea:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <_sbrk+0x64>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	18d2      	adds	r2, r2, r3
 80009f2:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <_sbrk+0x64>)
 80009f4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80009f6:	68fb      	ldr	r3, [r7, #12]
}
 80009f8:	0018      	movs	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	b006      	add	sp, #24
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20002000 	.word	0x20002000
 8000a04:	00000400 	.word	0x00000400
 8000a08:	200001d0 	.word	0x200001d0
 8000a0c:	200002b8 	.word	0x200002b8

08000a10 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a14:	46c0      	nop			; (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
	...

08000a1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a1c:	480d      	ldr	r0, [pc, #52]	; (8000a54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a1e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a20:	480d      	ldr	r0, [pc, #52]	; (8000a58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a22:	490e      	ldr	r1, [pc, #56]	; (8000a5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a24:	4a0e      	ldr	r2, [pc, #56]	; (8000a60 <LoopForever+0xe>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a28:	e002      	b.n	8000a30 <LoopCopyDataInit>

08000a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2e:	3304      	adds	r3, #4

08000a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a34:	d3f9      	bcc.n	8000a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a36:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a38:	4c0b      	ldr	r4, [pc, #44]	; (8000a68 <LoopForever+0x16>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a3c:	e001      	b.n	8000a42 <LoopFillZerobss>

08000a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a40:	3204      	adds	r2, #4

08000a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a44:	d3fb      	bcc.n	8000a3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a46:	f7ff ffe3 	bl	8000a10 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a4a:	f001 ffa3 	bl	8002994 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a4e:	f7ff fd0d 	bl	800046c <main>

08000a52 <LoopForever>:

LoopForever:
    b LoopForever
 8000a52:	e7fe      	b.n	8000a52 <LoopForever>
  ldr   r0, =_estack
 8000a54:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a5c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a60:	08003f4c 	.word	0x08003f4c
  ldr r2, =_sbss
 8000a64:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a68:	200002b8 	.word	0x200002b8

08000a6c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a6c:	e7fe      	b.n	8000a6c <ADC1_IRQHandler>
	...

08000a70 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <HAL_Init+0x24>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_Init+0x24>)
 8000a7a:	2110      	movs	r1, #16
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a80:	2000      	movs	r0, #0
 8000a82:	f000 f809 	bl	8000a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a86:	f7ff fe63 	bl	8000750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a8a:	2300      	movs	r3, #0
}
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	40022000 	.word	0x40022000

08000a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b590      	push	{r4, r7, lr}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <HAL_InitTick+0x5c>)
 8000aa2:	681c      	ldr	r4, [r3, #0]
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <HAL_InitTick+0x60>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	0019      	movs	r1, r3
 8000aaa:	23fa      	movs	r3, #250	; 0xfa
 8000aac:	0098      	lsls	r0, r3, #2
 8000aae:	f7ff fb35 	bl	800011c <__udivsi3>
 8000ab2:	0003      	movs	r3, r0
 8000ab4:	0019      	movs	r1, r3
 8000ab6:	0020      	movs	r0, r4
 8000ab8:	f7ff fb30 	bl	800011c <__udivsi3>
 8000abc:	0003      	movs	r3, r0
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f000 f90b 	bl	8000cda <HAL_SYSTICK_Config>
 8000ac4:	1e03      	subs	r3, r0, #0
 8000ac6:	d001      	beq.n	8000acc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	e00f      	b.n	8000aec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b03      	cmp	r3, #3
 8000ad0:	d80b      	bhi.n	8000aea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	425b      	negs	r3, r3
 8000ad8:	2200      	movs	r2, #0
 8000ada:	0018      	movs	r0, r3
 8000adc:	f000 f8d8 	bl	8000c90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_InitTick+0x64>)
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e000      	b.n	8000aec <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
}
 8000aec:	0018      	movs	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	b003      	add	sp, #12
 8000af2:	bd90      	pop	{r4, r7, pc}
 8000af4:	20000000 	.word	0x20000000
 8000af8:	20000008 	.word	0x20000008
 8000afc:	20000004 	.word	0x20000004

08000b00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <HAL_IncTick+0x1c>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	001a      	movs	r2, r3
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <HAL_IncTick+0x20>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	18d2      	adds	r2, r2, r3
 8000b10:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <HAL_IncTick+0x20>)
 8000b12:	601a      	str	r2, [r3, #0]
}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	200002a4 	.word	0x200002a4

08000b24 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  return uwTick;
 8000b28:	4b02      	ldr	r3, [pc, #8]	; (8000b34 <HAL_GetTick+0x10>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
}
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	200002a4 	.word	0x200002a4

08000b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	0002      	movs	r2, r0
 8000b40:	1dfb      	adds	r3, r7, #7
 8000b42:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b44:	1dfb      	adds	r3, r7, #7
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b7f      	cmp	r3, #127	; 0x7f
 8000b4a:	d809      	bhi.n	8000b60 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b4c:	1dfb      	adds	r3, r7, #7
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	001a      	movs	r2, r3
 8000b52:	231f      	movs	r3, #31
 8000b54:	401a      	ands	r2, r3
 8000b56:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <__NVIC_EnableIRQ+0x30>)
 8000b58:	2101      	movs	r1, #1
 8000b5a:	4091      	lsls	r1, r2
 8000b5c:	000a      	movs	r2, r1
 8000b5e:	601a      	str	r2, [r3, #0]
  }
}
 8000b60:	46c0      	nop			; (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b002      	add	sp, #8
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	e000e100 	.word	0xe000e100

08000b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	0002      	movs	r2, r0
 8000b74:	6039      	str	r1, [r7, #0]
 8000b76:	1dfb      	adds	r3, r7, #7
 8000b78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b80:	d828      	bhi.n	8000bd4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b82:	4a2f      	ldr	r2, [pc, #188]	; (8000c40 <__NVIC_SetPriority+0xd4>)
 8000b84:	1dfb      	adds	r3, r7, #7
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	b25b      	sxtb	r3, r3
 8000b8a:	089b      	lsrs	r3, r3, #2
 8000b8c:	33c0      	adds	r3, #192	; 0xc0
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	589b      	ldr	r3, [r3, r2]
 8000b92:	1dfa      	adds	r2, r7, #7
 8000b94:	7812      	ldrb	r2, [r2, #0]
 8000b96:	0011      	movs	r1, r2
 8000b98:	2203      	movs	r2, #3
 8000b9a:	400a      	ands	r2, r1
 8000b9c:	00d2      	lsls	r2, r2, #3
 8000b9e:	21ff      	movs	r1, #255	; 0xff
 8000ba0:	4091      	lsls	r1, r2
 8000ba2:	000a      	movs	r2, r1
 8000ba4:	43d2      	mvns	r2, r2
 8000ba6:	401a      	ands	r2, r3
 8000ba8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	019b      	lsls	r3, r3, #6
 8000bae:	22ff      	movs	r2, #255	; 0xff
 8000bb0:	401a      	ands	r2, r3
 8000bb2:	1dfb      	adds	r3, r7, #7
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	2303      	movs	r3, #3
 8000bba:	4003      	ands	r3, r0
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bc0:	481f      	ldr	r0, [pc, #124]	; (8000c40 <__NVIC_SetPriority+0xd4>)
 8000bc2:	1dfb      	adds	r3, r7, #7
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	b25b      	sxtb	r3, r3
 8000bc8:	089b      	lsrs	r3, r3, #2
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	33c0      	adds	r3, #192	; 0xc0
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bd2:	e031      	b.n	8000c38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd4:	4a1b      	ldr	r2, [pc, #108]	; (8000c44 <__NVIC_SetPriority+0xd8>)
 8000bd6:	1dfb      	adds	r3, r7, #7
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	0019      	movs	r1, r3
 8000bdc:	230f      	movs	r3, #15
 8000bde:	400b      	ands	r3, r1
 8000be0:	3b08      	subs	r3, #8
 8000be2:	089b      	lsrs	r3, r3, #2
 8000be4:	3306      	adds	r3, #6
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	18d3      	adds	r3, r2, r3
 8000bea:	3304      	adds	r3, #4
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	1dfa      	adds	r2, r7, #7
 8000bf0:	7812      	ldrb	r2, [r2, #0]
 8000bf2:	0011      	movs	r1, r2
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	400a      	ands	r2, r1
 8000bf8:	00d2      	lsls	r2, r2, #3
 8000bfa:	21ff      	movs	r1, #255	; 0xff
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	000a      	movs	r2, r1
 8000c00:	43d2      	mvns	r2, r2
 8000c02:	401a      	ands	r2, r3
 8000c04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	019b      	lsls	r3, r3, #6
 8000c0a:	22ff      	movs	r2, #255	; 0xff
 8000c0c:	401a      	ands	r2, r3
 8000c0e:	1dfb      	adds	r3, r7, #7
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	0018      	movs	r0, r3
 8000c14:	2303      	movs	r3, #3
 8000c16:	4003      	ands	r3, r0
 8000c18:	00db      	lsls	r3, r3, #3
 8000c1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c1c:	4809      	ldr	r0, [pc, #36]	; (8000c44 <__NVIC_SetPriority+0xd8>)
 8000c1e:	1dfb      	adds	r3, r7, #7
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	001c      	movs	r4, r3
 8000c24:	230f      	movs	r3, #15
 8000c26:	4023      	ands	r3, r4
 8000c28:	3b08      	subs	r3, #8
 8000c2a:	089b      	lsrs	r3, r3, #2
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	3306      	adds	r3, #6
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	18c3      	adds	r3, r0, r3
 8000c34:	3304      	adds	r3, #4
 8000c36:	601a      	str	r2, [r3, #0]
}
 8000c38:	46c0      	nop			; (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b003      	add	sp, #12
 8000c3e:	bd90      	pop	{r4, r7, pc}
 8000c40:	e000e100 	.word	0xe000e100
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	1e5a      	subs	r2, r3, #1
 8000c54:	2380      	movs	r3, #128	; 0x80
 8000c56:	045b      	lsls	r3, r3, #17
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d301      	bcc.n	8000c60 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	e010      	b.n	8000c82 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c60:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <SysTick_Config+0x44>)
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	3a01      	subs	r2, #1
 8000c66:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c68:	2301      	movs	r3, #1
 8000c6a:	425b      	negs	r3, r3
 8000c6c:	2103      	movs	r1, #3
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f7ff ff7c 	bl	8000b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <SysTick_Config+0x44>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c7a:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <SysTick_Config+0x44>)
 8000c7c:	2207      	movs	r2, #7
 8000c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	0018      	movs	r0, r3
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b002      	add	sp, #8
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	e000e010 	.word	0xe000e010

08000c90 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60b9      	str	r1, [r7, #8]
 8000c98:	607a      	str	r2, [r7, #4]
 8000c9a:	210f      	movs	r1, #15
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	1c02      	adds	r2, r0, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ca2:	68ba      	ldr	r2, [r7, #8]
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	b25b      	sxtb	r3, r3
 8000caa:	0011      	movs	r1, r2
 8000cac:	0018      	movs	r0, r3
 8000cae:	f7ff ff5d 	bl	8000b6c <__NVIC_SetPriority>
}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	b004      	add	sp, #16
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	0002      	movs	r2, r0
 8000cc2:	1dfb      	adds	r3, r7, #7
 8000cc4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc6:	1dfb      	adds	r3, r7, #7
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	b25b      	sxtb	r3, r3
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f7ff ff33 	bl	8000b38 <__NVIC_EnableIRQ>
}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	b002      	add	sp, #8
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f7ff ffaf 	bl	8000c48 <SysTick_Config>
 8000cea:	0003      	movs	r3, r0
}
 8000cec:	0018      	movs	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b002      	add	sp, #8
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d101      	bne.n	8000d0a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e036      	b.n	8000d78 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2221      	movs	r2, #33	; 0x21
 8000d0e:	2102      	movs	r1, #2
 8000d10:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	4a18      	ldr	r2, [pc, #96]	; (8000d80 <HAL_DMA_Init+0x8c>)
 8000d1e:	4013      	ands	r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	695b      	ldr	r3, [r3, #20]
 8000d3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	69db      	ldr	r3, [r3, #28]
 8000d48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	68fa      	ldr	r2, [r7, #12]
 8000d56:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f000 f946 	bl	8000fec <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2200      	movs	r2, #0
 8000d64:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2221      	movs	r2, #33	; 0x21
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2220      	movs	r2, #32
 8000d72:	2100      	movs	r1, #0
 8000d74:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000d76:	2300      	movs	r3, #0
}  
 8000d78:	0018      	movs	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	b004      	add	sp, #16
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	ffffc00f 	.word	0xffffc00f

08000d84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
 8000d90:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000d92:	2317      	movs	r3, #23
 8000d94:	18fb      	adds	r3, r7, r3
 8000d96:	2200      	movs	r2, #0
 8000d98:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	2220      	movs	r2, #32
 8000d9e:	5c9b      	ldrb	r3, [r3, r2]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d101      	bne.n	8000da8 <HAL_DMA_Start_IT+0x24>
 8000da4:	2302      	movs	r3, #2
 8000da6:	e04f      	b.n	8000e48 <HAL_DMA_Start_IT+0xc4>
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	2220      	movs	r2, #32
 8000dac:	2101      	movs	r1, #1
 8000dae:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	2221      	movs	r2, #33	; 0x21
 8000db4:	5c9b      	ldrb	r3, [r3, r2]
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d13a      	bne.n	8000e32 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2221      	movs	r2, #33	; 0x21
 8000dc0:	2102      	movs	r1, #2
 8000dc2:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	438a      	bics	r2, r1
 8000dd8:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	68b9      	ldr	r1, [r7, #8]
 8000de0:	68f8      	ldr	r0, [r7, #12]
 8000de2:	f000 f8d7 	bl	8000f94 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d008      	beq.n	8000e00 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	210e      	movs	r1, #14
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	e00f      	b.n	8000e20 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	210a      	movs	r1, #10
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2104      	movs	r1, #4
 8000e1c:	438a      	bics	r2, r1
 8000e1e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	e007      	b.n	8000e42 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	2220      	movs	r2, #32
 8000e36:	2100      	movs	r1, #0
 8000e38:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000e3a:	2317      	movs	r3, #23
 8000e3c:	18fb      	adds	r3, r7, r3
 8000e3e:	2202      	movs	r2, #2
 8000e40:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8000e42:	2317      	movs	r3, #23
 8000e44:	18fb      	adds	r3, r7, r3
 8000e46:	781b      	ldrb	r3, [r3, #0]
} 
 8000e48:	0018      	movs	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b006      	add	sp, #24
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	2204      	movs	r2, #4
 8000e6e:	409a      	lsls	r2, r3
 8000e70:	0013      	movs	r3, r2
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	4013      	ands	r3, r2
 8000e76:	d024      	beq.n	8000ec2 <HAL_DMA_IRQHandler+0x72>
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	2204      	movs	r2, #4
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	d020      	beq.n	8000ec2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2220      	movs	r2, #32
 8000e88:	4013      	ands	r3, r2
 8000e8a:	d107      	bne.n	8000e9c <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2104      	movs	r1, #4
 8000e98:	438a      	bics	r2, r1
 8000e9a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ea4:	2104      	movs	r1, #4
 8000ea6:	4091      	lsls	r1, r2
 8000ea8:	000a      	movs	r2, r1
 8000eaa:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d100      	bne.n	8000eb6 <HAL_DMA_IRQHandler+0x66>
 8000eb4:	e06a      	b.n	8000f8c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	0010      	movs	r0, r2
 8000ebe:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000ec0:	e064      	b.n	8000f8c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	409a      	lsls	r2, r3
 8000eca:	0013      	movs	r3, r2
 8000ecc:	68fa      	ldr	r2, [r7, #12]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	d02b      	beq.n	8000f2a <HAL_DMA_IRQHandler+0xda>
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	d027      	beq.n	8000f2a <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2220      	movs	r2, #32
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	d10b      	bne.n	8000efe <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	210a      	movs	r1, #10
 8000ef2:	438a      	bics	r2, r1
 8000ef4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2221      	movs	r2, #33	; 0x21
 8000efa:	2101      	movs	r1, #1
 8000efc:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f06:	2102      	movs	r1, #2
 8000f08:	4091      	lsls	r1, r2
 8000f0a:	000a      	movs	r2, r1
 8000f0c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2220      	movs	r2, #32
 8000f12:	2100      	movs	r1, #0
 8000f14:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d036      	beq.n	8000f8c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	0010      	movs	r0, r2
 8000f26:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000f28:	e030      	b.n	8000f8c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	2208      	movs	r2, #8
 8000f30:	409a      	lsls	r2, r3
 8000f32:	0013      	movs	r3, r2
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	4013      	ands	r3, r2
 8000f38:	d028      	beq.n	8000f8c <HAL_DMA_IRQHandler+0x13c>
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	2208      	movs	r2, #8
 8000f3e:	4013      	ands	r3, r2
 8000f40:	d024      	beq.n	8000f8c <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	210e      	movs	r1, #14
 8000f4e:	438a      	bics	r2, r1
 8000f50:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	000a      	movs	r2, r1
 8000f60:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2201      	movs	r2, #1
 8000f66:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2221      	movs	r2, #33	; 0x21
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2220      	movs	r2, #32
 8000f74:	2100      	movs	r1, #0
 8000f76:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d005      	beq.n	8000f8c <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	0010      	movs	r0, r2
 8000f88:	4798      	blx	r3
    }
   }
}  
 8000f8a:	e7ff      	b.n	8000f8c <HAL_DMA_IRQHandler+0x13c>
 8000f8c:	46c0      	nop			; (mov r8, r8)
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	b004      	add	sp, #16
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
 8000fa0:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000faa:	2101      	movs	r1, #1
 8000fac:	4091      	lsls	r1, r2
 8000fae:	000a      	movs	r2, r1
 8000fb0:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	683a      	ldr	r2, [r7, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	2b10      	cmp	r3, #16
 8000fc0:	d108      	bne.n	8000fd4 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000fd2:	e007      	b.n	8000fe4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	68ba      	ldr	r2, [r7, #8]
 8000fda:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	60da      	str	r2, [r3, #12]
}
 8000fe4:	46c0      	nop			; (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b004      	add	sp, #16
 8000fea:	bd80      	pop	{r7, pc}

08000fec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a08      	ldr	r2, [pc, #32]	; (800101c <DMA_CalcBaseAndBitshift+0x30>)
 8000ffa:	4694      	mov	ip, r2
 8000ffc:	4463      	add	r3, ip
 8000ffe:	2114      	movs	r1, #20
 8001000:	0018      	movs	r0, r3
 8001002:	f7ff f88b 	bl	800011c <__udivsi3>
 8001006:	0003      	movs	r3, r0
 8001008:	009a      	lsls	r2, r3, #2
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a03      	ldr	r2, [pc, #12]	; (8001020 <DMA_CalcBaseAndBitshift+0x34>)
 8001012:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001014:	46c0      	nop			; (mov r8, r8)
 8001016:	46bd      	mov	sp, r7
 8001018:	b002      	add	sp, #8
 800101a:	bd80      	pop	{r7, pc}
 800101c:	bffdfff8 	.word	0xbffdfff8
 8001020:	40020000 	.word	0x40020000

08001024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001032:	e14f      	b.n	80012d4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2101      	movs	r1, #1
 800103a:	697a      	ldr	r2, [r7, #20]
 800103c:	4091      	lsls	r1, r2
 800103e:	000a      	movs	r2, r1
 8001040:	4013      	ands	r3, r2
 8001042:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d100      	bne.n	800104c <HAL_GPIO_Init+0x28>
 800104a:	e140      	b.n	80012ce <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2203      	movs	r2, #3
 8001052:	4013      	ands	r3, r2
 8001054:	2b01      	cmp	r3, #1
 8001056:	d005      	beq.n	8001064 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2203      	movs	r2, #3
 800105e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001060:	2b02      	cmp	r3, #2
 8001062:	d130      	bne.n	80010c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	2203      	movs	r2, #3
 8001070:	409a      	lsls	r2, r3
 8001072:	0013      	movs	r3, r2
 8001074:	43da      	mvns	r2, r3
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	68da      	ldr	r2, [r3, #12]
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	409a      	lsls	r2, r3
 8001086:	0013      	movs	r3, r2
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800109a:	2201      	movs	r2, #1
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	409a      	lsls	r2, r3
 80010a0:	0013      	movs	r3, r2
 80010a2:	43da      	mvns	r2, r3
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	091b      	lsrs	r3, r3, #4
 80010b0:	2201      	movs	r2, #1
 80010b2:	401a      	ands	r2, r3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	409a      	lsls	r2, r3
 80010b8:	0013      	movs	r3, r2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2203      	movs	r2, #3
 80010cc:	4013      	ands	r3, r2
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	d017      	beq.n	8001102 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	2203      	movs	r2, #3
 80010de:	409a      	lsls	r2, r3
 80010e0:	0013      	movs	r3, r2
 80010e2:	43da      	mvns	r2, r3
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	409a      	lsls	r2, r3
 80010f4:	0013      	movs	r3, r2
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2203      	movs	r2, #3
 8001108:	4013      	ands	r3, r2
 800110a:	2b02      	cmp	r3, #2
 800110c:	d123      	bne.n	8001156 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	08da      	lsrs	r2, r3, #3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3208      	adds	r2, #8
 8001116:	0092      	lsls	r2, r2, #2
 8001118:	58d3      	ldr	r3, [r2, r3]
 800111a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	2207      	movs	r2, #7
 8001120:	4013      	ands	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	220f      	movs	r2, #15
 8001126:	409a      	lsls	r2, r3
 8001128:	0013      	movs	r3, r2
 800112a:	43da      	mvns	r2, r3
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	691a      	ldr	r2, [r3, #16]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	2107      	movs	r1, #7
 800113a:	400b      	ands	r3, r1
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	409a      	lsls	r2, r3
 8001140:	0013      	movs	r3, r2
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	08da      	lsrs	r2, r3, #3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3208      	adds	r2, #8
 8001150:	0092      	lsls	r2, r2, #2
 8001152:	6939      	ldr	r1, [r7, #16]
 8001154:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	2203      	movs	r2, #3
 8001162:	409a      	lsls	r2, r3
 8001164:	0013      	movs	r3, r2
 8001166:	43da      	mvns	r2, r3
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4013      	ands	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2203      	movs	r2, #3
 8001174:	401a      	ands	r2, r3
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	409a      	lsls	r2, r3
 800117c:	0013      	movs	r3, r2
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	23c0      	movs	r3, #192	; 0xc0
 8001190:	029b      	lsls	r3, r3, #10
 8001192:	4013      	ands	r3, r2
 8001194:	d100      	bne.n	8001198 <HAL_GPIO_Init+0x174>
 8001196:	e09a      	b.n	80012ce <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001198:	4b54      	ldr	r3, [pc, #336]	; (80012ec <HAL_GPIO_Init+0x2c8>)
 800119a:	699a      	ldr	r2, [r3, #24]
 800119c:	4b53      	ldr	r3, [pc, #332]	; (80012ec <HAL_GPIO_Init+0x2c8>)
 800119e:	2101      	movs	r1, #1
 80011a0:	430a      	orrs	r2, r1
 80011a2:	619a      	str	r2, [r3, #24]
 80011a4:	4b51      	ldr	r3, [pc, #324]	; (80012ec <HAL_GPIO_Init+0x2c8>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	2201      	movs	r2, #1
 80011aa:	4013      	ands	r3, r2
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011b0:	4a4f      	ldr	r2, [pc, #316]	; (80012f0 <HAL_GPIO_Init+0x2cc>)
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	089b      	lsrs	r3, r3, #2
 80011b6:	3302      	adds	r3, #2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	589b      	ldr	r3, [r3, r2]
 80011bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	2203      	movs	r2, #3
 80011c2:	4013      	ands	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	220f      	movs	r2, #15
 80011c8:	409a      	lsls	r2, r3
 80011ca:	0013      	movs	r3, r2
 80011cc:	43da      	mvns	r2, r3
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	2390      	movs	r3, #144	; 0x90
 80011d8:	05db      	lsls	r3, r3, #23
 80011da:	429a      	cmp	r2, r3
 80011dc:	d013      	beq.n	8001206 <HAL_GPIO_Init+0x1e2>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a44      	ldr	r2, [pc, #272]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d00d      	beq.n	8001202 <HAL_GPIO_Init+0x1de>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a43      	ldr	r2, [pc, #268]	; (80012f8 <HAL_GPIO_Init+0x2d4>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d007      	beq.n	80011fe <HAL_GPIO_Init+0x1da>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a42      	ldr	r2, [pc, #264]	; (80012fc <HAL_GPIO_Init+0x2d8>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d101      	bne.n	80011fa <HAL_GPIO_Init+0x1d6>
 80011f6:	2303      	movs	r3, #3
 80011f8:	e006      	b.n	8001208 <HAL_GPIO_Init+0x1e4>
 80011fa:	2305      	movs	r3, #5
 80011fc:	e004      	b.n	8001208 <HAL_GPIO_Init+0x1e4>
 80011fe:	2302      	movs	r3, #2
 8001200:	e002      	b.n	8001208 <HAL_GPIO_Init+0x1e4>
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <HAL_GPIO_Init+0x1e4>
 8001206:	2300      	movs	r3, #0
 8001208:	697a      	ldr	r2, [r7, #20]
 800120a:	2103      	movs	r1, #3
 800120c:	400a      	ands	r2, r1
 800120e:	0092      	lsls	r2, r2, #2
 8001210:	4093      	lsls	r3, r2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001218:	4935      	ldr	r1, [pc, #212]	; (80012f0 <HAL_GPIO_Init+0x2cc>)
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	089b      	lsrs	r3, r3, #2
 800121e:	3302      	adds	r3, #2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001226:	4b36      	ldr	r3, [pc, #216]	; (8001300 <HAL_GPIO_Init+0x2dc>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	43da      	mvns	r2, r3
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	4013      	ands	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685a      	ldr	r2, [r3, #4]
 800123a:	2380      	movs	r3, #128	; 0x80
 800123c:	025b      	lsls	r3, r3, #9
 800123e:	4013      	ands	r3, r2
 8001240:	d003      	beq.n	800124a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4313      	orrs	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800124a:	4b2d      	ldr	r3, [pc, #180]	; (8001300 <HAL_GPIO_Init+0x2dc>)
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001250:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <HAL_GPIO_Init+0x2dc>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	43da      	mvns	r2, r3
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	2380      	movs	r3, #128	; 0x80
 8001266:	029b      	lsls	r3, r3, #10
 8001268:	4013      	ands	r3, r2
 800126a:	d003      	beq.n	8001274 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001274:	4b22      	ldr	r3, [pc, #136]	; (8001300 <HAL_GPIO_Init+0x2dc>)
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800127a:	4b21      	ldr	r3, [pc, #132]	; (8001300 <HAL_GPIO_Init+0x2dc>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	43da      	mvns	r2, r3
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	2380      	movs	r3, #128	; 0x80
 8001290:	035b      	lsls	r3, r3, #13
 8001292:	4013      	ands	r3, r2
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <HAL_GPIO_Init+0x2dc>)
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <HAL_GPIO_Init+0x2dc>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	43da      	mvns	r2, r3
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	2380      	movs	r3, #128	; 0x80
 80012ba:	039b      	lsls	r3, r3, #14
 80012bc:	4013      	ands	r3, r2
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012c8:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <HAL_GPIO_Init+0x2dc>)
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	3301      	adds	r3, #1
 80012d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	40da      	lsrs	r2, r3
 80012dc:	1e13      	subs	r3, r2, #0
 80012de:	d000      	beq.n	80012e2 <HAL_GPIO_Init+0x2be>
 80012e0:	e6a8      	b.n	8001034 <HAL_GPIO_Init+0x10>
  } 
}
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	46c0      	nop			; (mov r8, r8)
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b006      	add	sp, #24
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40010000 	.word	0x40010000
 80012f4:	48000400 	.word	0x48000400
 80012f8:	48000800 	.word	0x48000800
 80012fc:	48000c00 	.word	0x48000c00
 8001300:	40010400 	.word	0x40010400

08001304 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	000a      	movs	r2, r1
 800130e:	1cbb      	adds	r3, r7, #2
 8001310:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	691b      	ldr	r3, [r3, #16]
 8001316:	1cba      	adds	r2, r7, #2
 8001318:	8812      	ldrh	r2, [r2, #0]
 800131a:	4013      	ands	r3, r2
 800131c:	d004      	beq.n	8001328 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800131e:	230f      	movs	r3, #15
 8001320:	18fb      	adds	r3, r7, r3
 8001322:	2201      	movs	r2, #1
 8001324:	701a      	strb	r2, [r3, #0]
 8001326:	e003      	b.n	8001330 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001328:	230f      	movs	r3, #15
 800132a:	18fb      	adds	r3, r7, r3
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001330:	230f      	movs	r3, #15
 8001332:	18fb      	adds	r3, r7, r3
 8001334:	781b      	ldrb	r3, [r3, #0]
  }
 8001336:	0018      	movs	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	b004      	add	sp, #16
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	0008      	movs	r0, r1
 8001348:	0011      	movs	r1, r2
 800134a:	1cbb      	adds	r3, r7, #2
 800134c:	1c02      	adds	r2, r0, #0
 800134e:	801a      	strh	r2, [r3, #0]
 8001350:	1c7b      	adds	r3, r7, #1
 8001352:	1c0a      	adds	r2, r1, #0
 8001354:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001356:	1c7b      	adds	r3, r7, #1
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d004      	beq.n	8001368 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800135e:	1cbb      	adds	r3, r7, #2
 8001360:	881a      	ldrh	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001366:	e003      	b.n	8001370 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001368:	1cbb      	adds	r3, r7, #2
 800136a:	881a      	ldrh	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001370:	46c0      	nop			; (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	b002      	add	sp, #8
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e301      	b.n	800198e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2201      	movs	r2, #1
 8001390:	4013      	ands	r3, r2
 8001392:	d100      	bne.n	8001396 <HAL_RCC_OscConfig+0x1e>
 8001394:	e08d      	b.n	80014b2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001396:	4bc3      	ldr	r3, [pc, #780]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	220c      	movs	r2, #12
 800139c:	4013      	ands	r3, r2
 800139e:	2b04      	cmp	r3, #4
 80013a0:	d00e      	beq.n	80013c0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013a2:	4bc0      	ldr	r3, [pc, #768]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	220c      	movs	r2, #12
 80013a8:	4013      	ands	r3, r2
 80013aa:	2b08      	cmp	r3, #8
 80013ac:	d116      	bne.n	80013dc <HAL_RCC_OscConfig+0x64>
 80013ae:	4bbd      	ldr	r3, [pc, #756]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	2380      	movs	r3, #128	; 0x80
 80013b4:	025b      	lsls	r3, r3, #9
 80013b6:	401a      	ands	r2, r3
 80013b8:	2380      	movs	r3, #128	; 0x80
 80013ba:	025b      	lsls	r3, r3, #9
 80013bc:	429a      	cmp	r2, r3
 80013be:	d10d      	bne.n	80013dc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c0:	4bb8      	ldr	r3, [pc, #736]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	2380      	movs	r3, #128	; 0x80
 80013c6:	029b      	lsls	r3, r3, #10
 80013c8:	4013      	ands	r3, r2
 80013ca:	d100      	bne.n	80013ce <HAL_RCC_OscConfig+0x56>
 80013cc:	e070      	b.n	80014b0 <HAL_RCC_OscConfig+0x138>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d000      	beq.n	80013d8 <HAL_RCC_OscConfig+0x60>
 80013d6:	e06b      	b.n	80014b0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e2d8      	b.n	800198e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d107      	bne.n	80013f4 <HAL_RCC_OscConfig+0x7c>
 80013e4:	4baf      	ldr	r3, [pc, #700]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4bae      	ldr	r3, [pc, #696]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80013ea:	2180      	movs	r1, #128	; 0x80
 80013ec:	0249      	lsls	r1, r1, #9
 80013ee:	430a      	orrs	r2, r1
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	e02f      	b.n	8001454 <HAL_RCC_OscConfig+0xdc>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d10c      	bne.n	8001416 <HAL_RCC_OscConfig+0x9e>
 80013fc:	4ba9      	ldr	r3, [pc, #676]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4ba8      	ldr	r3, [pc, #672]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001402:	49a9      	ldr	r1, [pc, #676]	; (80016a8 <HAL_RCC_OscConfig+0x330>)
 8001404:	400a      	ands	r2, r1
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	4ba6      	ldr	r3, [pc, #664]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4ba5      	ldr	r3, [pc, #660]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800140e:	49a7      	ldr	r1, [pc, #668]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 8001410:	400a      	ands	r2, r1
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	e01e      	b.n	8001454 <HAL_RCC_OscConfig+0xdc>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b05      	cmp	r3, #5
 800141c:	d10e      	bne.n	800143c <HAL_RCC_OscConfig+0xc4>
 800141e:	4ba1      	ldr	r3, [pc, #644]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4ba0      	ldr	r3, [pc, #640]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001424:	2180      	movs	r1, #128	; 0x80
 8001426:	02c9      	lsls	r1, r1, #11
 8001428:	430a      	orrs	r2, r1
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	4b9d      	ldr	r3, [pc, #628]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b9c      	ldr	r3, [pc, #624]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001432:	2180      	movs	r1, #128	; 0x80
 8001434:	0249      	lsls	r1, r1, #9
 8001436:	430a      	orrs	r2, r1
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	e00b      	b.n	8001454 <HAL_RCC_OscConfig+0xdc>
 800143c:	4b99      	ldr	r3, [pc, #612]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b98      	ldr	r3, [pc, #608]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001442:	4999      	ldr	r1, [pc, #612]	; (80016a8 <HAL_RCC_OscConfig+0x330>)
 8001444:	400a      	ands	r2, r1
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	4b96      	ldr	r3, [pc, #600]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b95      	ldr	r3, [pc, #596]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800144e:	4997      	ldr	r1, [pc, #604]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 8001450:	400a      	ands	r2, r1
 8001452:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d014      	beq.n	8001486 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145c:	f7ff fb62 	bl	8000b24 <HAL_GetTick>
 8001460:	0003      	movs	r3, r0
 8001462:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001466:	f7ff fb5d 	bl	8000b24 <HAL_GetTick>
 800146a:	0002      	movs	r2, r0
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b64      	cmp	r3, #100	; 0x64
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e28a      	b.n	800198e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001478:	4b8a      	ldr	r3, [pc, #552]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	029b      	lsls	r3, r3, #10
 8001480:	4013      	ands	r3, r2
 8001482:	d0f0      	beq.n	8001466 <HAL_RCC_OscConfig+0xee>
 8001484:	e015      	b.n	80014b2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001486:	f7ff fb4d 	bl	8000b24 <HAL_GetTick>
 800148a:	0003      	movs	r3, r0
 800148c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001490:	f7ff fb48 	bl	8000b24 <HAL_GetTick>
 8001494:	0002      	movs	r2, r0
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b64      	cmp	r3, #100	; 0x64
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e275      	b.n	800198e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a2:	4b80      	ldr	r3, [pc, #512]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	2380      	movs	r3, #128	; 0x80
 80014a8:	029b      	lsls	r3, r3, #10
 80014aa:	4013      	ands	r3, r2
 80014ac:	d1f0      	bne.n	8001490 <HAL_RCC_OscConfig+0x118>
 80014ae:	e000      	b.n	80014b2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2202      	movs	r2, #2
 80014b8:	4013      	ands	r3, r2
 80014ba:	d100      	bne.n	80014be <HAL_RCC_OscConfig+0x146>
 80014bc:	e069      	b.n	8001592 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014be:	4b79      	ldr	r3, [pc, #484]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	220c      	movs	r2, #12
 80014c4:	4013      	ands	r3, r2
 80014c6:	d00b      	beq.n	80014e0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014c8:	4b76      	ldr	r3, [pc, #472]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	220c      	movs	r2, #12
 80014ce:	4013      	ands	r3, r2
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d11c      	bne.n	800150e <HAL_RCC_OscConfig+0x196>
 80014d4:	4b73      	ldr	r3, [pc, #460]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	2380      	movs	r3, #128	; 0x80
 80014da:	025b      	lsls	r3, r3, #9
 80014dc:	4013      	ands	r3, r2
 80014de:	d116      	bne.n	800150e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e0:	4b70      	ldr	r3, [pc, #448]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2202      	movs	r2, #2
 80014e6:	4013      	ands	r3, r2
 80014e8:	d005      	beq.n	80014f6 <HAL_RCC_OscConfig+0x17e>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d001      	beq.n	80014f6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e24b      	b.n	800198e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f6:	4b6b      	ldr	r3, [pc, #428]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	22f8      	movs	r2, #248	; 0xf8
 80014fc:	4393      	bics	r3, r2
 80014fe:	0019      	movs	r1, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	00da      	lsls	r2, r3, #3
 8001506:	4b67      	ldr	r3, [pc, #412]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001508:	430a      	orrs	r2, r1
 800150a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150c:	e041      	b.n	8001592 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d024      	beq.n	8001560 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001516:	4b63      	ldr	r3, [pc, #396]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	4b62      	ldr	r3, [pc, #392]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800151c:	2101      	movs	r1, #1
 800151e:	430a      	orrs	r2, r1
 8001520:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001522:	f7ff faff 	bl	8000b24 <HAL_GetTick>
 8001526:	0003      	movs	r3, r0
 8001528:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800152c:	f7ff fafa 	bl	8000b24 <HAL_GetTick>
 8001530:	0002      	movs	r2, r0
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e227      	b.n	800198e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153e:	4b59      	ldr	r3, [pc, #356]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2202      	movs	r2, #2
 8001544:	4013      	ands	r3, r2
 8001546:	d0f1      	beq.n	800152c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001548:	4b56      	ldr	r3, [pc, #344]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	22f8      	movs	r2, #248	; 0xf8
 800154e:	4393      	bics	r3, r2
 8001550:	0019      	movs	r1, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	00da      	lsls	r2, r3, #3
 8001558:	4b52      	ldr	r3, [pc, #328]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800155a:	430a      	orrs	r2, r1
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	e018      	b.n	8001592 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001560:	4b50      	ldr	r3, [pc, #320]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b4f      	ldr	r3, [pc, #316]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001566:	2101      	movs	r1, #1
 8001568:	438a      	bics	r2, r1
 800156a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff fada 	bl	8000b24 <HAL_GetTick>
 8001570:	0003      	movs	r3, r0
 8001572:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001576:	f7ff fad5 	bl	8000b24 <HAL_GetTick>
 800157a:	0002      	movs	r2, r0
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e202      	b.n	800198e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001588:	4b46      	ldr	r3, [pc, #280]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2202      	movs	r2, #2
 800158e:	4013      	ands	r3, r2
 8001590:	d1f1      	bne.n	8001576 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2208      	movs	r2, #8
 8001598:	4013      	ands	r3, r2
 800159a:	d036      	beq.n	800160a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	69db      	ldr	r3, [r3, #28]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d019      	beq.n	80015d8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015a4:	4b3f      	ldr	r3, [pc, #252]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80015a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015a8:	4b3e      	ldr	r3, [pc, #248]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80015aa:	2101      	movs	r1, #1
 80015ac:	430a      	orrs	r2, r1
 80015ae:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b0:	f7ff fab8 	bl	8000b24 <HAL_GetTick>
 80015b4:	0003      	movs	r3, r0
 80015b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ba:	f7ff fab3 	bl	8000b24 <HAL_GetTick>
 80015be:	0002      	movs	r2, r0
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e1e0      	b.n	800198e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015cc:	4b35      	ldr	r3, [pc, #212]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80015ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d0:	2202      	movs	r2, #2
 80015d2:	4013      	ands	r3, r2
 80015d4:	d0f1      	beq.n	80015ba <HAL_RCC_OscConfig+0x242>
 80015d6:	e018      	b.n	800160a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015d8:	4b32      	ldr	r3, [pc, #200]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80015da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015dc:	4b31      	ldr	r3, [pc, #196]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80015de:	2101      	movs	r1, #1
 80015e0:	438a      	bics	r2, r1
 80015e2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e4:	f7ff fa9e 	bl	8000b24 <HAL_GetTick>
 80015e8:	0003      	movs	r3, r0
 80015ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ee:	f7ff fa99 	bl	8000b24 <HAL_GetTick>
 80015f2:	0002      	movs	r2, r0
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e1c6      	b.n	800198e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001600:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	2202      	movs	r2, #2
 8001606:	4013      	ands	r3, r2
 8001608:	d1f1      	bne.n	80015ee <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2204      	movs	r2, #4
 8001610:	4013      	ands	r3, r2
 8001612:	d100      	bne.n	8001616 <HAL_RCC_OscConfig+0x29e>
 8001614:	e0b4      	b.n	8001780 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001616:	201f      	movs	r0, #31
 8001618:	183b      	adds	r3, r7, r0
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800161e:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001620:	69da      	ldr	r2, [r3, #28]
 8001622:	2380      	movs	r3, #128	; 0x80
 8001624:	055b      	lsls	r3, r3, #21
 8001626:	4013      	ands	r3, r2
 8001628:	d110      	bne.n	800164c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800162a:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800162c:	69da      	ldr	r2, [r3, #28]
 800162e:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001630:	2180      	movs	r1, #128	; 0x80
 8001632:	0549      	lsls	r1, r1, #21
 8001634:	430a      	orrs	r2, r1
 8001636:	61da      	str	r2, [r3, #28]
 8001638:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800163a:	69da      	ldr	r2, [r3, #28]
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	055b      	lsls	r3, r3, #21
 8001640:	4013      	ands	r3, r2
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001646:	183b      	adds	r3, r7, r0
 8001648:	2201      	movs	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164c:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	2380      	movs	r3, #128	; 0x80
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4013      	ands	r3, r2
 8001656:	d11a      	bne.n	800168e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001658:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 800165e:	2180      	movs	r1, #128	; 0x80
 8001660:	0049      	lsls	r1, r1, #1
 8001662:	430a      	orrs	r2, r1
 8001664:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001666:	f7ff fa5d 	bl	8000b24 <HAL_GetTick>
 800166a:	0003      	movs	r3, r0
 800166c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001670:	f7ff fa58 	bl	8000b24 <HAL_GetTick>
 8001674:	0002      	movs	r2, r0
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b64      	cmp	r3, #100	; 0x64
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e185      	b.n	800198e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	2380      	movs	r3, #128	; 0x80
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4013      	ands	r3, r2
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d10e      	bne.n	80016b4 <HAL_RCC_OscConfig+0x33c>
 8001696:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001698:	6a1a      	ldr	r2, [r3, #32]
 800169a:	4b02      	ldr	r3, [pc, #8]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800169c:	2101      	movs	r1, #1
 800169e:	430a      	orrs	r2, r1
 80016a0:	621a      	str	r2, [r3, #32]
 80016a2:	e035      	b.n	8001710 <HAL_RCC_OscConfig+0x398>
 80016a4:	40021000 	.word	0x40021000
 80016a8:	fffeffff 	.word	0xfffeffff
 80016ac:	fffbffff 	.word	0xfffbffff
 80016b0:	40007000 	.word	0x40007000
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d10c      	bne.n	80016d6 <HAL_RCC_OscConfig+0x35e>
 80016bc:	4bb6      	ldr	r3, [pc, #728]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80016be:	6a1a      	ldr	r2, [r3, #32]
 80016c0:	4bb5      	ldr	r3, [pc, #724]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80016c2:	2101      	movs	r1, #1
 80016c4:	438a      	bics	r2, r1
 80016c6:	621a      	str	r2, [r3, #32]
 80016c8:	4bb3      	ldr	r3, [pc, #716]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80016ca:	6a1a      	ldr	r2, [r3, #32]
 80016cc:	4bb2      	ldr	r3, [pc, #712]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80016ce:	2104      	movs	r1, #4
 80016d0:	438a      	bics	r2, r1
 80016d2:	621a      	str	r2, [r3, #32]
 80016d4:	e01c      	b.n	8001710 <HAL_RCC_OscConfig+0x398>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b05      	cmp	r3, #5
 80016dc:	d10c      	bne.n	80016f8 <HAL_RCC_OscConfig+0x380>
 80016de:	4bae      	ldr	r3, [pc, #696]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80016e0:	6a1a      	ldr	r2, [r3, #32]
 80016e2:	4bad      	ldr	r3, [pc, #692]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80016e4:	2104      	movs	r1, #4
 80016e6:	430a      	orrs	r2, r1
 80016e8:	621a      	str	r2, [r3, #32]
 80016ea:	4bab      	ldr	r3, [pc, #684]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80016ec:	6a1a      	ldr	r2, [r3, #32]
 80016ee:	4baa      	ldr	r3, [pc, #680]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80016f0:	2101      	movs	r1, #1
 80016f2:	430a      	orrs	r2, r1
 80016f4:	621a      	str	r2, [r3, #32]
 80016f6:	e00b      	b.n	8001710 <HAL_RCC_OscConfig+0x398>
 80016f8:	4ba7      	ldr	r3, [pc, #668]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80016fa:	6a1a      	ldr	r2, [r3, #32]
 80016fc:	4ba6      	ldr	r3, [pc, #664]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80016fe:	2101      	movs	r1, #1
 8001700:	438a      	bics	r2, r1
 8001702:	621a      	str	r2, [r3, #32]
 8001704:	4ba4      	ldr	r3, [pc, #656]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 8001706:	6a1a      	ldr	r2, [r3, #32]
 8001708:	4ba3      	ldr	r3, [pc, #652]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 800170a:	2104      	movs	r1, #4
 800170c:	438a      	bics	r2, r1
 800170e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d014      	beq.n	8001742 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001718:	f7ff fa04 	bl	8000b24 <HAL_GetTick>
 800171c:	0003      	movs	r3, r0
 800171e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001720:	e009      	b.n	8001736 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001722:	f7ff f9ff 	bl	8000b24 <HAL_GetTick>
 8001726:	0002      	movs	r2, r0
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	4a9b      	ldr	r2, [pc, #620]	; (800199c <HAL_RCC_OscConfig+0x624>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e12b      	b.n	800198e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001736:	4b98      	ldr	r3, [pc, #608]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	2202      	movs	r2, #2
 800173c:	4013      	ands	r3, r2
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0x3aa>
 8001740:	e013      	b.n	800176a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001742:	f7ff f9ef 	bl	8000b24 <HAL_GetTick>
 8001746:	0003      	movs	r3, r0
 8001748:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800174a:	e009      	b.n	8001760 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800174c:	f7ff f9ea 	bl	8000b24 <HAL_GetTick>
 8001750:	0002      	movs	r2, r0
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	4a91      	ldr	r2, [pc, #580]	; (800199c <HAL_RCC_OscConfig+0x624>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e116      	b.n	800198e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001760:	4b8d      	ldr	r3, [pc, #564]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	2202      	movs	r2, #2
 8001766:	4013      	ands	r3, r2
 8001768:	d1f0      	bne.n	800174c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800176a:	231f      	movs	r3, #31
 800176c:	18fb      	adds	r3, r7, r3
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d105      	bne.n	8001780 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001774:	4b88      	ldr	r3, [pc, #544]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 8001776:	69da      	ldr	r2, [r3, #28]
 8001778:	4b87      	ldr	r3, [pc, #540]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 800177a:	4989      	ldr	r1, [pc, #548]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 800177c:	400a      	ands	r2, r1
 800177e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2210      	movs	r2, #16
 8001786:	4013      	ands	r3, r2
 8001788:	d063      	beq.n	8001852 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d12a      	bne.n	80017e8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001792:	4b81      	ldr	r3, [pc, #516]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 8001794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001796:	4b80      	ldr	r3, [pc, #512]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 8001798:	2104      	movs	r1, #4
 800179a:	430a      	orrs	r2, r1
 800179c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800179e:	4b7e      	ldr	r3, [pc, #504]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80017a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017a2:	4b7d      	ldr	r3, [pc, #500]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80017a4:	2101      	movs	r1, #1
 80017a6:	430a      	orrs	r2, r1
 80017a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017aa:	f7ff f9bb 	bl	8000b24 <HAL_GetTick>
 80017ae:	0003      	movs	r3, r0
 80017b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80017b4:	f7ff f9b6 	bl	8000b24 <HAL_GetTick>
 80017b8:	0002      	movs	r2, r0
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e0e3      	b.n	800198e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80017c6:	4b74      	ldr	r3, [pc, #464]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80017c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ca:	2202      	movs	r2, #2
 80017cc:	4013      	ands	r3, r2
 80017ce:	d0f1      	beq.n	80017b4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017d0:	4b71      	ldr	r3, [pc, #452]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80017d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d4:	22f8      	movs	r2, #248	; 0xf8
 80017d6:	4393      	bics	r3, r2
 80017d8:	0019      	movs	r1, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	00da      	lsls	r2, r3, #3
 80017e0:	4b6d      	ldr	r3, [pc, #436]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80017e2:	430a      	orrs	r2, r1
 80017e4:	635a      	str	r2, [r3, #52]	; 0x34
 80017e6:	e034      	b.n	8001852 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	3305      	adds	r3, #5
 80017ee:	d111      	bne.n	8001814 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80017f0:	4b69      	ldr	r3, [pc, #420]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80017f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017f4:	4b68      	ldr	r3, [pc, #416]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80017f6:	2104      	movs	r1, #4
 80017f8:	438a      	bics	r2, r1
 80017fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017fc:	4b66      	ldr	r3, [pc, #408]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80017fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001800:	22f8      	movs	r2, #248	; 0xf8
 8001802:	4393      	bics	r3, r2
 8001804:	0019      	movs	r1, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	00da      	lsls	r2, r3, #3
 800180c:	4b62      	ldr	r3, [pc, #392]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 800180e:	430a      	orrs	r2, r1
 8001810:	635a      	str	r2, [r3, #52]	; 0x34
 8001812:	e01e      	b.n	8001852 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001814:	4b60      	ldr	r3, [pc, #384]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 8001816:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001818:	4b5f      	ldr	r3, [pc, #380]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 800181a:	2104      	movs	r1, #4
 800181c:	430a      	orrs	r2, r1
 800181e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001820:	4b5d      	ldr	r3, [pc, #372]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 8001822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001824:	4b5c      	ldr	r3, [pc, #368]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 8001826:	2101      	movs	r1, #1
 8001828:	438a      	bics	r2, r1
 800182a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800182c:	f7ff f97a 	bl	8000b24 <HAL_GetTick>
 8001830:	0003      	movs	r3, r0
 8001832:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001836:	f7ff f975 	bl	8000b24 <HAL_GetTick>
 800183a:	0002      	movs	r2, r0
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e0a2      	b.n	800198e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001848:	4b53      	ldr	r3, [pc, #332]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 800184a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800184c:	2202      	movs	r2, #2
 800184e:	4013      	ands	r3, r2
 8001850:	d1f1      	bne.n	8001836 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d100      	bne.n	800185c <HAL_RCC_OscConfig+0x4e4>
 800185a:	e097      	b.n	800198c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800185c:	4b4e      	ldr	r3, [pc, #312]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	220c      	movs	r2, #12
 8001862:	4013      	ands	r3, r2
 8001864:	2b08      	cmp	r3, #8
 8001866:	d100      	bne.n	800186a <HAL_RCC_OscConfig+0x4f2>
 8001868:	e06b      	b.n	8001942 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d14c      	bne.n	800190c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001872:	4b49      	ldr	r3, [pc, #292]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	4b48      	ldr	r3, [pc, #288]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 8001878:	494a      	ldr	r1, [pc, #296]	; (80019a4 <HAL_RCC_OscConfig+0x62c>)
 800187a:	400a      	ands	r2, r1
 800187c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187e:	f7ff f951 	bl	8000b24 <HAL_GetTick>
 8001882:	0003      	movs	r3, r0
 8001884:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001888:	f7ff f94c 	bl	8000b24 <HAL_GetTick>
 800188c:	0002      	movs	r2, r0
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e079      	b.n	800198e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800189a:	4b3f      	ldr	r3, [pc, #252]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	049b      	lsls	r3, r3, #18
 80018a2:	4013      	ands	r3, r2
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018a6:	4b3c      	ldr	r3, [pc, #240]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80018a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018aa:	220f      	movs	r2, #15
 80018ac:	4393      	bics	r3, r2
 80018ae:	0019      	movs	r1, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018b4:	4b38      	ldr	r3, [pc, #224]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80018b6:	430a      	orrs	r2, r1
 80018b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80018ba:	4b37      	ldr	r3, [pc, #220]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	4a3a      	ldr	r2, [pc, #232]	; (80019a8 <HAL_RCC_OscConfig+0x630>)
 80018c0:	4013      	ands	r3, r2
 80018c2:	0019      	movs	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018cc:	431a      	orrs	r2, r3
 80018ce:	4b32      	ldr	r3, [pc, #200]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80018d0:	430a      	orrs	r2, r1
 80018d2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018d4:	4b30      	ldr	r3, [pc, #192]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b2f      	ldr	r3, [pc, #188]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80018da:	2180      	movs	r1, #128	; 0x80
 80018dc:	0449      	lsls	r1, r1, #17
 80018de:	430a      	orrs	r2, r1
 80018e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e2:	f7ff f91f 	bl	8000b24 <HAL_GetTick>
 80018e6:	0003      	movs	r3, r0
 80018e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ec:	f7ff f91a 	bl	8000b24 <HAL_GetTick>
 80018f0:	0002      	movs	r2, r0
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e047      	b.n	800198e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018fe:	4b26      	ldr	r3, [pc, #152]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	2380      	movs	r3, #128	; 0x80
 8001904:	049b      	lsls	r3, r3, #18
 8001906:	4013      	ands	r3, r2
 8001908:	d0f0      	beq.n	80018ec <HAL_RCC_OscConfig+0x574>
 800190a:	e03f      	b.n	800198c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800190c:	4b22      	ldr	r3, [pc, #136]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4b21      	ldr	r3, [pc, #132]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 8001912:	4924      	ldr	r1, [pc, #144]	; (80019a4 <HAL_RCC_OscConfig+0x62c>)
 8001914:	400a      	ands	r2, r1
 8001916:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001918:	f7ff f904 	bl	8000b24 <HAL_GetTick>
 800191c:	0003      	movs	r3, r0
 800191e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001922:	f7ff f8ff 	bl	8000b24 <HAL_GetTick>
 8001926:	0002      	movs	r2, r0
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e02c      	b.n	800198e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001934:	4b18      	ldr	r3, [pc, #96]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	049b      	lsls	r3, r3, #18
 800193c:	4013      	ands	r3, r2
 800193e:	d1f0      	bne.n	8001922 <HAL_RCC_OscConfig+0x5aa>
 8001940:	e024      	b.n	800198c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a1b      	ldr	r3, [r3, #32]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d101      	bne.n	800194e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e01f      	b.n	800198e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800194e:	4b12      	ldr	r3, [pc, #72]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001954:	4b10      	ldr	r3, [pc, #64]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 8001956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001958:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	2380      	movs	r3, #128	; 0x80
 800195e:	025b      	lsls	r3, r3, #9
 8001960:	401a      	ands	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001966:	429a      	cmp	r2, r3
 8001968:	d10e      	bne.n	8001988 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	220f      	movs	r2, #15
 800196e:	401a      	ands	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001974:	429a      	cmp	r2, r3
 8001976:	d107      	bne.n	8001988 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	23f0      	movs	r3, #240	; 0xf0
 800197c:	039b      	lsls	r3, r3, #14
 800197e:	401a      	ands	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001984:	429a      	cmp	r2, r3
 8001986:	d001      	beq.n	800198c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e000      	b.n	800198e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	0018      	movs	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	b008      	add	sp, #32
 8001994:	bd80      	pop	{r7, pc}
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	40021000 	.word	0x40021000
 800199c:	00001388 	.word	0x00001388
 80019a0:	efffffff 	.word	0xefffffff
 80019a4:	feffffff 	.word	0xfeffffff
 80019a8:	ffc2ffff 	.word	0xffc2ffff

080019ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e0b3      	b.n	8001b28 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019c0:	4b5b      	ldr	r3, [pc, #364]	; (8001b30 <HAL_RCC_ClockConfig+0x184>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2201      	movs	r2, #1
 80019c6:	4013      	ands	r3, r2
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d911      	bls.n	80019f2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ce:	4b58      	ldr	r3, [pc, #352]	; (8001b30 <HAL_RCC_ClockConfig+0x184>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2201      	movs	r2, #1
 80019d4:	4393      	bics	r3, r2
 80019d6:	0019      	movs	r1, r3
 80019d8:	4b55      	ldr	r3, [pc, #340]	; (8001b30 <HAL_RCC_ClockConfig+0x184>)
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e0:	4b53      	ldr	r3, [pc, #332]	; (8001b30 <HAL_RCC_ClockConfig+0x184>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2201      	movs	r2, #1
 80019e6:	4013      	ands	r3, r2
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d001      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e09a      	b.n	8001b28 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2202      	movs	r2, #2
 80019f8:	4013      	ands	r3, r2
 80019fa:	d015      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2204      	movs	r2, #4
 8001a02:	4013      	ands	r3, r2
 8001a04:	d006      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a06:	4b4b      	ldr	r3, [pc, #300]	; (8001b34 <HAL_RCC_ClockConfig+0x188>)
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	4b4a      	ldr	r3, [pc, #296]	; (8001b34 <HAL_RCC_ClockConfig+0x188>)
 8001a0c:	21e0      	movs	r1, #224	; 0xe0
 8001a0e:	00c9      	lsls	r1, r1, #3
 8001a10:	430a      	orrs	r2, r1
 8001a12:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a14:	4b47      	ldr	r3, [pc, #284]	; (8001b34 <HAL_RCC_ClockConfig+0x188>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	22f0      	movs	r2, #240	; 0xf0
 8001a1a:	4393      	bics	r3, r2
 8001a1c:	0019      	movs	r1, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	4b44      	ldr	r3, [pc, #272]	; (8001b34 <HAL_RCC_ClockConfig+0x188>)
 8001a24:	430a      	orrs	r2, r1
 8001a26:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d040      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d107      	bne.n	8001a4a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3a:	4b3e      	ldr	r3, [pc, #248]	; (8001b34 <HAL_RCC_ClockConfig+0x188>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	2380      	movs	r3, #128	; 0x80
 8001a40:	029b      	lsls	r3, r3, #10
 8001a42:	4013      	ands	r3, r2
 8001a44:	d114      	bne.n	8001a70 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e06e      	b.n	8001b28 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d107      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a52:	4b38      	ldr	r3, [pc, #224]	; (8001b34 <HAL_RCC_ClockConfig+0x188>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	2380      	movs	r3, #128	; 0x80
 8001a58:	049b      	lsls	r3, r3, #18
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d108      	bne.n	8001a70 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e062      	b.n	8001b28 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a62:	4b34      	ldr	r3, [pc, #208]	; (8001b34 <HAL_RCC_ClockConfig+0x188>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2202      	movs	r2, #2
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d101      	bne.n	8001a70 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e05b      	b.n	8001b28 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a70:	4b30      	ldr	r3, [pc, #192]	; (8001b34 <HAL_RCC_ClockConfig+0x188>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2203      	movs	r2, #3
 8001a76:	4393      	bics	r3, r2
 8001a78:	0019      	movs	r1, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	4b2d      	ldr	r3, [pc, #180]	; (8001b34 <HAL_RCC_ClockConfig+0x188>)
 8001a80:	430a      	orrs	r2, r1
 8001a82:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a84:	f7ff f84e 	bl	8000b24 <HAL_GetTick>
 8001a88:	0003      	movs	r3, r0
 8001a8a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8c:	e009      	b.n	8001aa2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a8e:	f7ff f849 	bl	8000b24 <HAL_GetTick>
 8001a92:	0002      	movs	r2, r0
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	4a27      	ldr	r2, [pc, #156]	; (8001b38 <HAL_RCC_ClockConfig+0x18c>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e042      	b.n	8001b28 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa2:	4b24      	ldr	r3, [pc, #144]	; (8001b34 <HAL_RCC_ClockConfig+0x188>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	401a      	ands	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d1ec      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab4:	4b1e      	ldr	r3, [pc, #120]	; (8001b30 <HAL_RCC_ClockConfig+0x184>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	4013      	ands	r3, r2
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d211      	bcs.n	8001ae6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac2:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <HAL_RCC_ClockConfig+0x184>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	4393      	bics	r3, r2
 8001aca:	0019      	movs	r1, r3
 8001acc:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <HAL_RCC_ClockConfig+0x184>)
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad4:	4b16      	ldr	r3, [pc, #88]	; (8001b30 <HAL_RCC_ClockConfig+0x184>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	4013      	ands	r3, r2
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d001      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e020      	b.n	8001b28 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2204      	movs	r2, #4
 8001aec:	4013      	ands	r3, r2
 8001aee:	d009      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001af0:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <HAL_RCC_ClockConfig+0x188>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	4a11      	ldr	r2, [pc, #68]	; (8001b3c <HAL_RCC_ClockConfig+0x190>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	0019      	movs	r1, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68da      	ldr	r2, [r3, #12]
 8001afe:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <HAL_RCC_ClockConfig+0x188>)
 8001b00:	430a      	orrs	r2, r1
 8001b02:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b04:	f000 f820 	bl	8001b48 <HAL_RCC_GetSysClockFreq>
 8001b08:	0001      	movs	r1, r0
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <HAL_RCC_ClockConfig+0x188>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	091b      	lsrs	r3, r3, #4
 8001b10:	220f      	movs	r2, #15
 8001b12:	4013      	ands	r3, r2
 8001b14:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <HAL_RCC_ClockConfig+0x194>)
 8001b16:	5cd3      	ldrb	r3, [r2, r3]
 8001b18:	000a      	movs	r2, r1
 8001b1a:	40da      	lsrs	r2, r3
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <HAL_RCC_ClockConfig+0x198>)
 8001b1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b20:	2000      	movs	r0, #0
 8001b22:	f7fe ffb9 	bl	8000a98 <HAL_InitTick>
  
  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	0018      	movs	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	b004      	add	sp, #16
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40022000 	.word	0x40022000
 8001b34:	40021000 	.word	0x40021000
 8001b38:	00001388 	.word	0x00001388
 8001b3c:	fffff8ff 	.word	0xfffff8ff
 8001b40:	08003cdc 	.word	0x08003cdc
 8001b44:	20000000 	.word	0x20000000

08001b48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b08f      	sub	sp, #60	; 0x3c
 8001b4c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001b4e:	2314      	movs	r3, #20
 8001b50:	18fb      	adds	r3, r7, r3
 8001b52:	4a2b      	ldr	r2, [pc, #172]	; (8001c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b54:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001b56:	c313      	stmia	r3!, {r0, r1, r4}
 8001b58:	6812      	ldr	r2, [r2, #0]
 8001b5a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	4a29      	ldr	r2, [pc, #164]	; (8001c04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b60:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001b62:	c313      	stmia	r3!, {r0, r1, r4}
 8001b64:	6812      	ldr	r2, [r2, #0]
 8001b66:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b70:	2300      	movs	r3, #0
 8001b72:	637b      	str	r3, [r7, #52]	; 0x34
 8001b74:	2300      	movs	r3, #0
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001b7c:	4b22      	ldr	r3, [pc, #136]	; (8001c08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b84:	220c      	movs	r2, #12
 8001b86:	4013      	ands	r3, r2
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d002      	beq.n	8001b92 <HAL_RCC_GetSysClockFreq+0x4a>
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	d003      	beq.n	8001b98 <HAL_RCC_GetSysClockFreq+0x50>
 8001b90:	e02d      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b92:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b94:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b96:	e02d      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b9a:	0c9b      	lsrs	r3, r3, #18
 8001b9c:	220f      	movs	r2, #15
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	2214      	movs	r2, #20
 8001ba2:	18ba      	adds	r2, r7, r2
 8001ba4:	5cd3      	ldrb	r3, [r2, r3]
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001ba8:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bac:	220f      	movs	r2, #15
 8001bae:	4013      	ands	r3, r2
 8001bb0:	1d3a      	adds	r2, r7, #4
 8001bb2:	5cd3      	ldrb	r3, [r2, r3]
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	025b      	lsls	r3, r3, #9
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d009      	beq.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001bc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bc2:	4812      	ldr	r0, [pc, #72]	; (8001c0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001bc4:	f7fe faaa 	bl	800011c <__udivsi3>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	001a      	movs	r2, r3
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	4353      	muls	r3, r2
 8001bd0:	637b      	str	r3, [r7, #52]	; 0x34
 8001bd2:	e009      	b.n	8001be8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001bd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bd6:	000a      	movs	r2, r1
 8001bd8:	0152      	lsls	r2, r2, #5
 8001bda:	1a52      	subs	r2, r2, r1
 8001bdc:	0193      	lsls	r3, r2, #6
 8001bde:	1a9b      	subs	r3, r3, r2
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	185b      	adds	r3, r3, r1
 8001be4:	021b      	lsls	r3, r3, #8
 8001be6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bec:	e002      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bee:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001bf0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bf2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	b00f      	add	sp, #60	; 0x3c
 8001bfc:	bd90      	pop	{r4, r7, pc}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	08003cbc 	.word	0x08003cbc
 8001c04:	08003ccc 	.word	0x08003ccc
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	007a1200 	.word	0x007a1200

08001c10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c14:	4b02      	ldr	r3, [pc, #8]	; (8001c20 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c16:	681b      	ldr	r3, [r3, #0]
}
 8001c18:	0018      	movs	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	20000000 	.word	0x20000000

08001c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001c28:	f7ff fff2 	bl	8001c10 <HAL_RCC_GetHCLKFreq>
 8001c2c:	0001      	movs	r1, r0
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	0a1b      	lsrs	r3, r3, #8
 8001c34:	2207      	movs	r2, #7
 8001c36:	4013      	ands	r3, r2
 8001c38:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c3a:	5cd3      	ldrb	r3, [r2, r3]
 8001c3c:	40d9      	lsrs	r1, r3
 8001c3e:	000b      	movs	r3, r1
}    
 8001c40:	0018      	movs	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	08003cec 	.word	0x08003cec

08001c50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e044      	b.n	8001cec <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d107      	bne.n	8001c7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2274      	movs	r2, #116	; 0x74
 8001c6e:	2100      	movs	r1, #0
 8001c70:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	0018      	movs	r0, r3
 8001c76:	f7fe fd8f 	bl	8000798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2224      	movs	r2, #36	; 0x24
 8001c7e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	438a      	bics	r2, r1
 8001c8e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	0018      	movs	r0, r3
 8001c94:	f000 f95e 	bl	8001f54 <UART_SetConfig>
 8001c98:	0003      	movs	r3, r0
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d101      	bne.n	8001ca2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e024      	b.n	8001cec <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	0018      	movs	r0, r3
 8001cae:	f000 fa91 	bl	80021d4 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	490d      	ldr	r1, [pc, #52]	; (8001cf4 <HAL_UART_Init+0xa4>)
 8001cbe:	400a      	ands	r2, r1
 8001cc0:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2108      	movs	r1, #8
 8001cce:	438a      	bics	r2, r1
 8001cd0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2101      	movs	r1, #1
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f000 fb29 	bl	800233c <UART_CheckIdleState>
 8001cea:	0003      	movs	r3, r0
}
 8001cec:	0018      	movs	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	b002      	add	sp, #8
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	fffff7ff 	.word	0xfffff7ff

08001cf8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	; 0x28
 8001cfc:	af02      	add	r7, sp, #8
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	1dbb      	adds	r3, r7, #6
 8001d06:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d0c:	2b20      	cmp	r3, #32
 8001d0e:	d000      	beq.n	8001d12 <HAL_UART_Transmit+0x1a>
 8001d10:	e096      	b.n	8001e40 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_UART_Transmit+0x28>
 8001d18:	1dbb      	adds	r3, r7, #6
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e08e      	b.n	8001e42 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	2380      	movs	r3, #128	; 0x80
 8001d2a:	015b      	lsls	r3, r3, #5
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d109      	bne.n	8001d44 <HAL_UART_Transmit+0x4c>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d105      	bne.n	8001d44 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d001      	beq.n	8001d44 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e07e      	b.n	8001e42 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2274      	movs	r2, #116	; 0x74
 8001d48:	5c9b      	ldrb	r3, [r3, r2]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d101      	bne.n	8001d52 <HAL_UART_Transmit+0x5a>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e077      	b.n	8001e42 <HAL_UART_Transmit+0x14a>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2274      	movs	r2, #116	; 0x74
 8001d56:	2101      	movs	r1, #1
 8001d58:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2280      	movs	r2, #128	; 0x80
 8001d5e:	2100      	movs	r1, #0
 8001d60:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2221      	movs	r2, #33	; 0x21
 8001d66:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d68:	f7fe fedc 	bl	8000b24 <HAL_GetTick>
 8001d6c:	0003      	movs	r3, r0
 8001d6e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	1dba      	adds	r2, r7, #6
 8001d74:	2150      	movs	r1, #80	; 0x50
 8001d76:	8812      	ldrh	r2, [r2, #0]
 8001d78:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	1dba      	adds	r2, r7, #6
 8001d7e:	2152      	movs	r1, #82	; 0x52
 8001d80:	8812      	ldrh	r2, [r2, #0]
 8001d82:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	2380      	movs	r3, #128	; 0x80
 8001d8a:	015b      	lsls	r3, r3, #5
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d108      	bne.n	8001da2 <HAL_UART_Transmit+0xaa>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d104      	bne.n	8001da2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	61bb      	str	r3, [r7, #24]
 8001da0:	e003      	b.n	8001daa <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2274      	movs	r2, #116	; 0x74
 8001dae:	2100      	movs	r1, #0
 8001db0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001db2:	e02d      	b.n	8001e10 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	0013      	movs	r3, r2
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2180      	movs	r1, #128	; 0x80
 8001dc2:	f000 fb03 	bl	80023cc <UART_WaitOnFlagUntilTimeout>
 8001dc6:	1e03      	subs	r3, r0, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e039      	b.n	8001e42 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10b      	bne.n	8001dec <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	881a      	ldrh	r2, [r3, #0]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	05d2      	lsls	r2, r2, #23
 8001dde:	0dd2      	lsrs	r2, r2, #23
 8001de0:	b292      	uxth	r2, r2
 8001de2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	3302      	adds	r3, #2
 8001de8:	61bb      	str	r3, [r7, #24]
 8001dea:	e008      	b.n	8001dfe <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	781a      	ldrb	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	b292      	uxth	r2, r2
 8001df6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2252      	movs	r2, #82	; 0x52
 8001e02:	5a9b      	ldrh	r3, [r3, r2]
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	3b01      	subs	r3, #1
 8001e08:	b299      	uxth	r1, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2252      	movs	r2, #82	; 0x52
 8001e0e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2252      	movs	r2, #82	; 0x52
 8001e14:	5a9b      	ldrh	r3, [r3, r2]
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1cb      	bne.n	8001db4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	0013      	movs	r3, r2
 8001e26:	2200      	movs	r2, #0
 8001e28:	2140      	movs	r1, #64	; 0x40
 8001e2a:	f000 facf 	bl	80023cc <UART_WaitOnFlagUntilTimeout>
 8001e2e:	1e03      	subs	r3, r0, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e005      	b.n	8001e42 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2220      	movs	r2, #32
 8001e3a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	e000      	b.n	8001e42 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001e40:	2302      	movs	r3, #2
  }
}
 8001e42:	0018      	movs	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	b008      	add	sp, #32
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b088      	sub	sp, #32
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	60f8      	str	r0, [r7, #12]
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	1dbb      	adds	r3, r7, #6
 8001e56:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e5c:	2b20      	cmp	r3, #32
 8001e5e:	d150      	bne.n	8001f02 <HAL_UART_Receive_DMA+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_UART_Receive_DMA+0x24>
 8001e66:	1dbb      	adds	r3, r7, #6
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e048      	b.n	8001f04 <HAL_UART_Receive_DMA+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	2380      	movs	r3, #128	; 0x80
 8001e78:	015b      	lsls	r3, r3, #5
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d109      	bne.n	8001e92 <HAL_UART_Receive_DMA+0x48>
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d105      	bne.n	8001e92 <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d001      	beq.n	8001e92 <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e038      	b.n	8001f04 <HAL_UART_Receive_DMA+0xba>
      }
    }

    __HAL_LOCK(huart);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2274      	movs	r2, #116	; 0x74
 8001e96:	5c9b      	ldrb	r3, [r3, r2]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <HAL_UART_Receive_DMA+0x56>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e031      	b.n	8001f04 <HAL_UART_Receive_DMA+0xba>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2274      	movs	r2, #116	; 0x74
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	041b      	lsls	r3, r3, #16
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d019      	beq.n	8001ef0 <HAL_UART_Receive_DMA+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ebc:	f3ef 8310 	mrs	r3, PRIMASK
 8001ec0:	613b      	str	r3, [r7, #16]
  return(result);
 8001ec2:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001ec4:	61fb      	str	r3, [r7, #28]
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f383 8810 	msr	PRIMASK, r3
}
 8001ed0:	46c0      	nop			; (mov r8, r8)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2180      	movs	r1, #128	; 0x80
 8001ede:	04c9      	lsls	r1, r1, #19
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	f383 8810 	msr	PRIMASK, r3
}
 8001eee:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8001ef0:	1dbb      	adds	r3, r7, #6
 8001ef2:	881a      	ldrh	r2, [r3, #0]
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f000 fb2b 	bl	8002554 <UART_Start_Receive_DMA>
 8001efe:	0003      	movs	r3, r0
 8001f00:	e000      	b.n	8001f04 <HAL_UART_Receive_DMA+0xba>
  }
  else
  {
    return HAL_BUSY;
 8001f02:	2302      	movs	r3, #2
  }
}
 8001f04:	0018      	movs	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	b008      	add	sp, #32
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8001f14:	46c0      	nop			; (mov r8, r8)
 8001f16:	46bd      	mov	sp, r7
 8001f18:	b002      	add	sp, #8
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8001f24:	46c0      	nop			; (mov r8, r8)
 8001f26:	46bd      	mov	sp, r7
 8001f28:	b002      	add	sp, #8
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8001f34:	46c0      	nop			; (mov r8, r8)
 8001f36:	46bd      	mov	sp, r7
 8001f38:	b002      	add	sp, #8
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	000a      	movs	r2, r1
 8001f46:	1cbb      	adds	r3, r7, #2
 8001f48:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	b002      	add	sp, #8
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f5c:	231e      	movs	r3, #30
 8001f5e:	18fb      	adds	r3, r7, r3
 8001f60:	2200      	movs	r2, #0
 8001f62:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69db      	ldr	r3, [r3, #28]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a8d      	ldr	r2, [pc, #564]	; (80021b8 <UART_SetConfig+0x264>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	0019      	movs	r1, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	4a88      	ldr	r2, [pc, #544]	; (80021bc <UART_SetConfig+0x268>)
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	0019      	movs	r1, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68da      	ldr	r2, [r3, #12]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	4a7f      	ldr	r2, [pc, #508]	; (80021c0 <UART_SetConfig+0x26c>)
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	0019      	movs	r1, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a7b      	ldr	r2, [pc, #492]	; (80021c4 <UART_SetConfig+0x270>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d127      	bne.n	800202a <UART_SetConfig+0xd6>
 8001fda:	4b7b      	ldr	r3, [pc, #492]	; (80021c8 <UART_SetConfig+0x274>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	2203      	movs	r2, #3
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	d00d      	beq.n	8002002 <UART_SetConfig+0xae>
 8001fe6:	d81b      	bhi.n	8002020 <UART_SetConfig+0xcc>
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d014      	beq.n	8002016 <UART_SetConfig+0xc2>
 8001fec:	d818      	bhi.n	8002020 <UART_SetConfig+0xcc>
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d002      	beq.n	8001ff8 <UART_SetConfig+0xa4>
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d00a      	beq.n	800200c <UART_SetConfig+0xb8>
 8001ff6:	e013      	b.n	8002020 <UART_SetConfig+0xcc>
 8001ff8:	231f      	movs	r3, #31
 8001ffa:	18fb      	adds	r3, r7, r3
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
 8002000:	e021      	b.n	8002046 <UART_SetConfig+0xf2>
 8002002:	231f      	movs	r3, #31
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	2202      	movs	r2, #2
 8002008:	701a      	strb	r2, [r3, #0]
 800200a:	e01c      	b.n	8002046 <UART_SetConfig+0xf2>
 800200c:	231f      	movs	r3, #31
 800200e:	18fb      	adds	r3, r7, r3
 8002010:	2204      	movs	r2, #4
 8002012:	701a      	strb	r2, [r3, #0]
 8002014:	e017      	b.n	8002046 <UART_SetConfig+0xf2>
 8002016:	231f      	movs	r3, #31
 8002018:	18fb      	adds	r3, r7, r3
 800201a:	2208      	movs	r2, #8
 800201c:	701a      	strb	r2, [r3, #0]
 800201e:	e012      	b.n	8002046 <UART_SetConfig+0xf2>
 8002020:	231f      	movs	r3, #31
 8002022:	18fb      	adds	r3, r7, r3
 8002024:	2210      	movs	r2, #16
 8002026:	701a      	strb	r2, [r3, #0]
 8002028:	e00d      	b.n	8002046 <UART_SetConfig+0xf2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a67      	ldr	r2, [pc, #412]	; (80021cc <UART_SetConfig+0x278>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d104      	bne.n	800203e <UART_SetConfig+0xea>
 8002034:	231f      	movs	r3, #31
 8002036:	18fb      	adds	r3, r7, r3
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
 800203c:	e003      	b.n	8002046 <UART_SetConfig+0xf2>
 800203e:	231f      	movs	r3, #31
 8002040:	18fb      	adds	r3, r7, r3
 8002042:	2210      	movs	r2, #16
 8002044:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69da      	ldr	r2, [r3, #28]
 800204a:	2380      	movs	r3, #128	; 0x80
 800204c:	021b      	lsls	r3, r3, #8
 800204e:	429a      	cmp	r2, r3
 8002050:	d15d      	bne.n	800210e <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8002052:	231f      	movs	r3, #31
 8002054:	18fb      	adds	r3, r7, r3
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b08      	cmp	r3, #8
 800205a:	d015      	beq.n	8002088 <UART_SetConfig+0x134>
 800205c:	dc18      	bgt.n	8002090 <UART_SetConfig+0x13c>
 800205e:	2b04      	cmp	r3, #4
 8002060:	d00d      	beq.n	800207e <UART_SetConfig+0x12a>
 8002062:	dc15      	bgt.n	8002090 <UART_SetConfig+0x13c>
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <UART_SetConfig+0x11a>
 8002068:	2b02      	cmp	r3, #2
 800206a:	d005      	beq.n	8002078 <UART_SetConfig+0x124>
 800206c:	e010      	b.n	8002090 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800206e:	f7ff fdd9 	bl	8001c24 <HAL_RCC_GetPCLK1Freq>
 8002072:	0003      	movs	r3, r0
 8002074:	61bb      	str	r3, [r7, #24]
        break;
 8002076:	e012      	b.n	800209e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002078:	4b55      	ldr	r3, [pc, #340]	; (80021d0 <UART_SetConfig+0x27c>)
 800207a:	61bb      	str	r3, [r7, #24]
        break;
 800207c:	e00f      	b.n	800209e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800207e:	f7ff fd63 	bl	8001b48 <HAL_RCC_GetSysClockFreq>
 8002082:	0003      	movs	r3, r0
 8002084:	61bb      	str	r3, [r7, #24]
        break;
 8002086:	e00a      	b.n	800209e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	021b      	lsls	r3, r3, #8
 800208c:	61bb      	str	r3, [r7, #24]
        break;
 800208e:	e006      	b.n	800209e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002094:	231e      	movs	r3, #30
 8002096:	18fb      	adds	r3, r7, r3
 8002098:	2201      	movs	r2, #1
 800209a:	701a      	strb	r2, [r3, #0]
        break;
 800209c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d100      	bne.n	80020a6 <UART_SetConfig+0x152>
 80020a4:	e07b      	b.n	800219e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	005a      	lsls	r2, r3, #1
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	085b      	lsrs	r3, r3, #1
 80020b0:	18d2      	adds	r2, r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	0019      	movs	r1, r3
 80020b8:	0010      	movs	r0, r2
 80020ba:	f7fe f82f 	bl	800011c <__udivsi3>
 80020be:	0003      	movs	r3, r0
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	2b0f      	cmp	r3, #15
 80020c8:	d91c      	bls.n	8002104 <UART_SetConfig+0x1b0>
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	025b      	lsls	r3, r3, #9
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d217      	bcs.n	8002104 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	200e      	movs	r0, #14
 80020da:	183b      	adds	r3, r7, r0
 80020dc:	210f      	movs	r1, #15
 80020de:	438a      	bics	r2, r1
 80020e0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	085b      	lsrs	r3, r3, #1
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	2207      	movs	r2, #7
 80020ea:	4013      	ands	r3, r2
 80020ec:	b299      	uxth	r1, r3
 80020ee:	183b      	adds	r3, r7, r0
 80020f0:	183a      	adds	r2, r7, r0
 80020f2:	8812      	ldrh	r2, [r2, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	183a      	adds	r2, r7, r0
 80020fe:	8812      	ldrh	r2, [r2, #0]
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	e04c      	b.n	800219e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002104:	231e      	movs	r3, #30
 8002106:	18fb      	adds	r3, r7, r3
 8002108:	2201      	movs	r2, #1
 800210a:	701a      	strb	r2, [r3, #0]
 800210c:	e047      	b.n	800219e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800210e:	231f      	movs	r3, #31
 8002110:	18fb      	adds	r3, r7, r3
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b08      	cmp	r3, #8
 8002116:	d015      	beq.n	8002144 <UART_SetConfig+0x1f0>
 8002118:	dc18      	bgt.n	800214c <UART_SetConfig+0x1f8>
 800211a:	2b04      	cmp	r3, #4
 800211c:	d00d      	beq.n	800213a <UART_SetConfig+0x1e6>
 800211e:	dc15      	bgt.n	800214c <UART_SetConfig+0x1f8>
 8002120:	2b00      	cmp	r3, #0
 8002122:	d002      	beq.n	800212a <UART_SetConfig+0x1d6>
 8002124:	2b02      	cmp	r3, #2
 8002126:	d005      	beq.n	8002134 <UART_SetConfig+0x1e0>
 8002128:	e010      	b.n	800214c <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800212a:	f7ff fd7b 	bl	8001c24 <HAL_RCC_GetPCLK1Freq>
 800212e:	0003      	movs	r3, r0
 8002130:	61bb      	str	r3, [r7, #24]
        break;
 8002132:	e012      	b.n	800215a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002134:	4b26      	ldr	r3, [pc, #152]	; (80021d0 <UART_SetConfig+0x27c>)
 8002136:	61bb      	str	r3, [r7, #24]
        break;
 8002138:	e00f      	b.n	800215a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800213a:	f7ff fd05 	bl	8001b48 <HAL_RCC_GetSysClockFreq>
 800213e:	0003      	movs	r3, r0
 8002140:	61bb      	str	r3, [r7, #24]
        break;
 8002142:	e00a      	b.n	800215a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002144:	2380      	movs	r3, #128	; 0x80
 8002146:	021b      	lsls	r3, r3, #8
 8002148:	61bb      	str	r3, [r7, #24]
        break;
 800214a:	e006      	b.n	800215a <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 800214c:	2300      	movs	r3, #0
 800214e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002150:	231e      	movs	r3, #30
 8002152:	18fb      	adds	r3, r7, r3
 8002154:	2201      	movs	r2, #1
 8002156:	701a      	strb	r2, [r3, #0]
        break;
 8002158:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d01e      	beq.n	800219e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	085a      	lsrs	r2, r3, #1
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	18d2      	adds	r2, r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	0019      	movs	r1, r3
 8002170:	0010      	movs	r0, r2
 8002172:	f7fd ffd3 	bl	800011c <__udivsi3>
 8002176:	0003      	movs	r3, r0
 8002178:	b29b      	uxth	r3, r3
 800217a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	2b0f      	cmp	r3, #15
 8002180:	d909      	bls.n	8002196 <UART_SetConfig+0x242>
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	2380      	movs	r3, #128	; 0x80
 8002186:	025b      	lsls	r3, r3, #9
 8002188:	429a      	cmp	r2, r3
 800218a:	d204      	bcs.n	8002196 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	60da      	str	r2, [r3, #12]
 8002194:	e003      	b.n	800219e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002196:	231e      	movs	r3, #30
 8002198:	18fb      	adds	r3, r7, r3
 800219a:	2201      	movs	r2, #1
 800219c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80021aa:	231e      	movs	r3, #30
 80021ac:	18fb      	adds	r3, r7, r3
 80021ae:	781b      	ldrb	r3, [r3, #0]
}
 80021b0:	0018      	movs	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b008      	add	sp, #32
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	ffff69f3 	.word	0xffff69f3
 80021bc:	ffffcfff 	.word	0xffffcfff
 80021c0:	fffff4ff 	.word	0xfffff4ff
 80021c4:	40013800 	.word	0x40013800
 80021c8:	40021000 	.word	0x40021000
 80021cc:	40004400 	.word	0x40004400
 80021d0:	007a1200 	.word	0x007a1200

080021d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	2201      	movs	r2, #1
 80021e2:	4013      	ands	r3, r2
 80021e4:	d00b      	beq.n	80021fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	4a4a      	ldr	r2, [pc, #296]	; (8002318 <UART_AdvFeatureConfig+0x144>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	0019      	movs	r1, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002202:	2202      	movs	r2, #2
 8002204:	4013      	ands	r3, r2
 8002206:	d00b      	beq.n	8002220 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	4a43      	ldr	r2, [pc, #268]	; (800231c <UART_AdvFeatureConfig+0x148>)
 8002210:	4013      	ands	r3, r2
 8002212:	0019      	movs	r1, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	2204      	movs	r2, #4
 8002226:	4013      	ands	r3, r2
 8002228:	d00b      	beq.n	8002242 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	4a3b      	ldr	r2, [pc, #236]	; (8002320 <UART_AdvFeatureConfig+0x14c>)
 8002232:	4013      	ands	r3, r2
 8002234:	0019      	movs	r1, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	2208      	movs	r2, #8
 8002248:	4013      	ands	r3, r2
 800224a:	d00b      	beq.n	8002264 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	4a34      	ldr	r2, [pc, #208]	; (8002324 <UART_AdvFeatureConfig+0x150>)
 8002254:	4013      	ands	r3, r2
 8002256:	0019      	movs	r1, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	2210      	movs	r2, #16
 800226a:	4013      	ands	r3, r2
 800226c:	d00b      	beq.n	8002286 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	4a2c      	ldr	r2, [pc, #176]	; (8002328 <UART_AdvFeatureConfig+0x154>)
 8002276:	4013      	ands	r3, r2
 8002278:	0019      	movs	r1, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228a:	2220      	movs	r2, #32
 800228c:	4013      	ands	r3, r2
 800228e:	d00b      	beq.n	80022a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	4a25      	ldr	r2, [pc, #148]	; (800232c <UART_AdvFeatureConfig+0x158>)
 8002298:	4013      	ands	r3, r2
 800229a:	0019      	movs	r1, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	2240      	movs	r2, #64	; 0x40
 80022ae:	4013      	ands	r3, r2
 80022b0:	d01d      	beq.n	80022ee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	4a1d      	ldr	r2, [pc, #116]	; (8002330 <UART_AdvFeatureConfig+0x15c>)
 80022ba:	4013      	ands	r3, r2
 80022bc:	0019      	movs	r1, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022ce:	2380      	movs	r3, #128	; 0x80
 80022d0:	035b      	lsls	r3, r3, #13
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d10b      	bne.n	80022ee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	4a15      	ldr	r2, [pc, #84]	; (8002334 <UART_AdvFeatureConfig+0x160>)
 80022de:	4013      	ands	r3, r2
 80022e0:	0019      	movs	r1, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	2280      	movs	r2, #128	; 0x80
 80022f4:	4013      	ands	r3, r2
 80022f6:	d00b      	beq.n	8002310 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	4a0e      	ldr	r2, [pc, #56]	; (8002338 <UART_AdvFeatureConfig+0x164>)
 8002300:	4013      	ands	r3, r2
 8002302:	0019      	movs	r1, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	605a      	str	r2, [r3, #4]
  }
}
 8002310:	46c0      	nop			; (mov r8, r8)
 8002312:	46bd      	mov	sp, r7
 8002314:	b002      	add	sp, #8
 8002316:	bd80      	pop	{r7, pc}
 8002318:	fffdffff 	.word	0xfffdffff
 800231c:	fffeffff 	.word	0xfffeffff
 8002320:	fffbffff 	.word	0xfffbffff
 8002324:	ffff7fff 	.word	0xffff7fff
 8002328:	ffffefff 	.word	0xffffefff
 800232c:	ffffdfff 	.word	0xffffdfff
 8002330:	ffefffff 	.word	0xffefffff
 8002334:	ff9fffff 	.word	0xff9fffff
 8002338:	fff7ffff 	.word	0xfff7ffff

0800233c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af02      	add	r7, sp, #8
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2280      	movs	r2, #128	; 0x80
 8002348:	2100      	movs	r1, #0
 800234a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800234c:	f7fe fbea 	bl	8000b24 <HAL_GetTick>
 8002350:	0003      	movs	r3, r0
 8002352:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2208      	movs	r2, #8
 800235c:	4013      	ands	r3, r2
 800235e:	2b08      	cmp	r3, #8
 8002360:	d10c      	bne.n	800237c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2280      	movs	r2, #128	; 0x80
 8002366:	0391      	lsls	r1, r2, #14
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	4a17      	ldr	r2, [pc, #92]	; (80023c8 <UART_CheckIdleState+0x8c>)
 800236c:	9200      	str	r2, [sp, #0]
 800236e:	2200      	movs	r2, #0
 8002370:	f000 f82c 	bl	80023cc <UART_WaitOnFlagUntilTimeout>
 8002374:	1e03      	subs	r3, r0, #0
 8002376:	d001      	beq.n	800237c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e021      	b.n	80023c0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2204      	movs	r2, #4
 8002384:	4013      	ands	r3, r2
 8002386:	2b04      	cmp	r3, #4
 8002388:	d10c      	bne.n	80023a4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2280      	movs	r2, #128	; 0x80
 800238e:	03d1      	lsls	r1, r2, #15
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	4a0d      	ldr	r2, [pc, #52]	; (80023c8 <UART_CheckIdleState+0x8c>)
 8002394:	9200      	str	r2, [sp, #0]
 8002396:	2200      	movs	r2, #0
 8002398:	f000 f818 	bl	80023cc <UART_WaitOnFlagUntilTimeout>
 800239c:	1e03      	subs	r3, r0, #0
 800239e:	d001      	beq.n	80023a4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e00d      	b.n	80023c0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2220      	movs	r2, #32
 80023a8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2220      	movs	r2, #32
 80023ae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2274      	movs	r2, #116	; 0x74
 80023ba:	2100      	movs	r1, #0
 80023bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	0018      	movs	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b004      	add	sp, #16
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	01ffffff 	.word	0x01ffffff

080023cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b094      	sub	sp, #80	; 0x50
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	603b      	str	r3, [r7, #0]
 80023d8:	1dfb      	adds	r3, r7, #7
 80023da:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023dc:	e0a3      	b.n	8002526 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023e0:	3301      	adds	r3, #1
 80023e2:	d100      	bne.n	80023e6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80023e4:	e09f      	b.n	8002526 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e6:	f7fe fb9d 	bl	8000b24 <HAL_GetTick>
 80023ea:	0002      	movs	r2, r0
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d302      	bcc.n	80023fc <UART_WaitOnFlagUntilTimeout+0x30>
 80023f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d13d      	bne.n	8002478 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023fc:	f3ef 8310 	mrs	r3, PRIMASK
 8002400:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002402:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002404:	647b      	str	r3, [r7, #68]	; 0x44
 8002406:	2301      	movs	r3, #1
 8002408:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800240a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800240c:	f383 8810 	msr	PRIMASK, r3
}
 8002410:	46c0      	nop			; (mov r8, r8)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	494c      	ldr	r1, [pc, #304]	; (8002550 <UART_WaitOnFlagUntilTimeout+0x184>)
 800241e:	400a      	ands	r2, r1
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002424:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002428:	f383 8810 	msr	PRIMASK, r3
}
 800242c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800242e:	f3ef 8310 	mrs	r3, PRIMASK
 8002432:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002436:	643b      	str	r3, [r7, #64]	; 0x40
 8002438:	2301      	movs	r3, #1
 800243a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800243c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800243e:	f383 8810 	msr	PRIMASK, r3
}
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2101      	movs	r1, #1
 8002450:	438a      	bics	r2, r1
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002456:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800245a:	f383 8810 	msr	PRIMASK, r3
}
 800245e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2220      	movs	r2, #32
 8002464:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2220      	movs	r2, #32
 800246a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2274      	movs	r2, #116	; 0x74
 8002470:	2100      	movs	r1, #0
 8002472:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e067      	b.n	8002548 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2204      	movs	r2, #4
 8002480:	4013      	ands	r3, r2
 8002482:	d050      	beq.n	8002526 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	69da      	ldr	r2, [r3, #28]
 800248a:	2380      	movs	r3, #128	; 0x80
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	401a      	ands	r2, r3
 8002490:	2380      	movs	r3, #128	; 0x80
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	429a      	cmp	r2, r3
 8002496:	d146      	bne.n	8002526 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2280      	movs	r2, #128	; 0x80
 800249e:	0112      	lsls	r2, r2, #4
 80024a0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024a2:	f3ef 8310 	mrs	r3, PRIMASK
 80024a6:	613b      	str	r3, [r7, #16]
  return(result);
 80024a8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024ac:	2301      	movs	r3, #1
 80024ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f383 8810 	msr	PRIMASK, r3
}
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4923      	ldr	r1, [pc, #140]	; (8002550 <UART_WaitOnFlagUntilTimeout+0x184>)
 80024c4:	400a      	ands	r2, r1
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	f383 8810 	msr	PRIMASK, r3
}
 80024d2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024d4:	f3ef 8310 	mrs	r3, PRIMASK
 80024d8:	61fb      	str	r3, [r7, #28]
  return(result);
 80024da:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80024de:	2301      	movs	r3, #1
 80024e0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024e2:	6a3b      	ldr	r3, [r7, #32]
 80024e4:	f383 8810 	msr	PRIMASK, r3
}
 80024e8:	46c0      	nop			; (mov r8, r8)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2101      	movs	r1, #1
 80024f6:	438a      	bics	r2, r1
 80024f8:	609a      	str	r2, [r3, #8]
 80024fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	f383 8810 	msr	PRIMASK, r3
}
 8002504:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2220      	movs	r2, #32
 800250a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2220      	movs	r2, #32
 8002510:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2280      	movs	r2, #128	; 0x80
 8002516:	2120      	movs	r1, #32
 8002518:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2274      	movs	r2, #116	; 0x74
 800251e:	2100      	movs	r1, #0
 8002520:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e010      	b.n	8002548 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	4013      	ands	r3, r2
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	425a      	negs	r2, r3
 8002536:	4153      	adcs	r3, r2
 8002538:	b2db      	uxtb	r3, r3
 800253a:	001a      	movs	r2, r3
 800253c:	1dfb      	adds	r3, r7, #7
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d100      	bne.n	8002546 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002544:	e74b      	b.n	80023de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	0018      	movs	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	b014      	add	sp, #80	; 0x50
 800254e:	bd80      	pop	{r7, pc}
 8002550:	fffffe5f 	.word	0xfffffe5f

08002554 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b090      	sub	sp, #64	; 0x40
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	1dbb      	adds	r3, r7, #6
 8002560:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	1dba      	adds	r2, r7, #6
 800256c:	2158      	movs	r1, #88	; 0x58
 800256e:	8812      	ldrh	r2, [r2, #0]
 8002570:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2280      	movs	r2, #128	; 0x80
 8002576:	2100      	movs	r1, #0
 8002578:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2222      	movs	r2, #34	; 0x22
 800257e:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002584:	2b00      	cmp	r3, #0
 8002586:	d02b      	beq.n	80025e0 <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258c:	4a3f      	ldr	r2, [pc, #252]	; (800268c <UART_Start_Receive_DMA+0x138>)
 800258e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002594:	4a3e      	ldr	r2, [pc, #248]	; (8002690 <UART_Start_Receive_DMA+0x13c>)
 8002596:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259c:	4a3d      	ldr	r2, [pc, #244]	; (8002694 <UART_Start_Receive_DMA+0x140>)
 800259e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a4:	2200      	movs	r2, #0
 80025a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	3324      	adds	r3, #36	; 0x24
 80025b2:	0019      	movs	r1, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b8:	001a      	movs	r2, r3
 80025ba:	1dbb      	adds	r3, r7, #6
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	f7fe fbe1 	bl	8000d84 <HAL_DMA_Start_IT>
 80025c2:	1e03      	subs	r3, r0, #0
 80025c4:	d00c      	beq.n	80025e0 <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2280      	movs	r2, #128	; 0x80
 80025ca:	2110      	movs	r1, #16
 80025cc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2274      	movs	r2, #116	; 0x74
 80025d2:	2100      	movs	r1, #0
 80025d4:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2220      	movs	r2, #32
 80025da:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e050      	b.n	8002682 <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2274      	movs	r2, #116	; 0x74
 80025e4:	2100      	movs	r1, #0
 80025e6:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025e8:	f3ef 8310 	mrs	r3, PRIMASK
 80025ec:	613b      	str	r3, [r7, #16]
  return(result);
 80025ee:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025f2:	2301      	movs	r3, #1
 80025f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f383 8810 	msr	PRIMASK, r3
}
 80025fc:	46c0      	nop			; (mov r8, r8)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2180      	movs	r1, #128	; 0x80
 800260a:	0049      	lsls	r1, r1, #1
 800260c:	430a      	orrs	r2, r1
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002612:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	f383 8810 	msr	PRIMASK, r3
}
 800261a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800261c:	f3ef 8310 	mrs	r3, PRIMASK
 8002620:	61fb      	str	r3, [r7, #28]
  return(result);
 8002622:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002624:	63bb      	str	r3, [r7, #56]	; 0x38
 8002626:	2301      	movs	r3, #1
 8002628:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	f383 8810 	msr	PRIMASK, r3
}
 8002630:	46c0      	nop			; (mov r8, r8)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2101      	movs	r1, #1
 800263e:	430a      	orrs	r2, r1
 8002640:	609a      	str	r2, [r3, #8]
 8002642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	f383 8810 	msr	PRIMASK, r3
}
 800264c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800264e:	f3ef 8310 	mrs	r3, PRIMASK
 8002652:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002654:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002656:	637b      	str	r3, [r7, #52]	; 0x34
 8002658:	2301      	movs	r3, #1
 800265a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800265c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265e:	f383 8810 	msr	PRIMASK, r3
}
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2140      	movs	r1, #64	; 0x40
 8002670:	430a      	orrs	r2, r1
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002676:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267a:	f383 8810 	msr	PRIMASK, r3
}
 800267e:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	0018      	movs	r0, r3
 8002684:	46bd      	mov	sp, r7
 8002686:	b010      	add	sp, #64	; 0x40
 8002688:	bd80      	pop	{r7, pc}
 800268a:	46c0      	nop			; (mov r8, r8)
 800268c:	080027a5 	.word	0x080027a5
 8002690:	080028c9 	.word	0x080028c9
 8002694:	08002905 	.word	0x08002905

08002698 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026a0:	f3ef 8310 	mrs	r3, PRIMASK
 80026a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80026a6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	2301      	movs	r3, #1
 80026ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f383 8810 	msr	PRIMASK, r3
}
 80026b4:	46c0      	nop			; (mov r8, r8)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	21c0      	movs	r1, #192	; 0xc0
 80026c2:	438a      	bics	r2, r1
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	f383 8810 	msr	PRIMASK, r3
}
 80026d0:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2220      	movs	r2, #32
 80026d6:	679a      	str	r2, [r3, #120]	; 0x78
}
 80026d8:	46c0      	nop			; (mov r8, r8)
 80026da:	46bd      	mov	sp, r7
 80026dc:	b006      	add	sp, #24
 80026de:	bd80      	pop	{r7, pc}

080026e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08e      	sub	sp, #56	; 0x38
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026e8:	f3ef 8310 	mrs	r3, PRIMASK
 80026ec:	617b      	str	r3, [r7, #20]
  return(result);
 80026ee:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026f0:	637b      	str	r3, [r7, #52]	; 0x34
 80026f2:	2301      	movs	r3, #1
 80026f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	f383 8810 	msr	PRIMASK, r3
}
 80026fc:	46c0      	nop			; (mov r8, r8)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4925      	ldr	r1, [pc, #148]	; (80027a0 <UART_EndRxTransfer+0xc0>)
 800270a:	400a      	ands	r2, r1
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002710:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	f383 8810 	msr	PRIMASK, r3
}
 8002718:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800271a:	f3ef 8310 	mrs	r3, PRIMASK
 800271e:	623b      	str	r3, [r7, #32]
  return(result);
 8002720:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002722:	633b      	str	r3, [r7, #48]	; 0x30
 8002724:	2301      	movs	r3, #1
 8002726:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	f383 8810 	msr	PRIMASK, r3
}
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2101      	movs	r1, #1
 800273c:	438a      	bics	r2, r1
 800273e:	609a      	str	r2, [r3, #8]
 8002740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002742:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002746:	f383 8810 	msr	PRIMASK, r3
}
 800274a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002750:	2b01      	cmp	r3, #1
 8002752:	d118      	bne.n	8002786 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002754:	f3ef 8310 	mrs	r3, PRIMASK
 8002758:	60bb      	str	r3, [r7, #8]
  return(result);
 800275a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800275c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800275e:	2301      	movs	r3, #1
 8002760:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f383 8810 	msr	PRIMASK, r3
}
 8002768:	46c0      	nop			; (mov r8, r8)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2110      	movs	r1, #16
 8002776:	438a      	bics	r2, r1
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	f383 8810 	msr	PRIMASK, r3
}
 8002784:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2220      	movs	r2, #32
 800278a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002798:	46c0      	nop			; (mov r8, r8)
 800279a:	46bd      	mov	sp, r7
 800279c:	b00e      	add	sp, #56	; 0x38
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	fffffedf 	.word	0xfffffedf

080027a4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b094      	sub	sp, #80	; 0x50
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	2b20      	cmp	r3, #32
 80027b8:	d06e      	beq.n	8002898 <UART_DMAReceiveCplt+0xf4>
  {
    huart->RxXferCount = 0U;
 80027ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027bc:	225a      	movs	r2, #90	; 0x5a
 80027be:	2100      	movs	r1, #0
 80027c0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027c2:	f3ef 8310 	mrs	r3, PRIMASK
 80027c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80027c8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80027cc:	2301      	movs	r3, #1
 80027ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f383 8810 	msr	PRIMASK, r3
}
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4938      	ldr	r1, [pc, #224]	; (80028c4 <UART_DMAReceiveCplt+0x120>)
 80027e4:	400a      	ands	r2, r1
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	f383 8810 	msr	PRIMASK, r3
}
 80027f2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027f4:	f3ef 8310 	mrs	r3, PRIMASK
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027fc:	647b      	str	r3, [r7, #68]	; 0x44
 80027fe:	2301      	movs	r3, #1
 8002800:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002804:	f383 8810 	msr	PRIMASK, r3
}
 8002808:	46c0      	nop			; (mov r8, r8)
 800280a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2101      	movs	r1, #1
 8002816:	438a      	bics	r2, r1
 8002818:	609a      	str	r2, [r3, #8]
 800281a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800281c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800281e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002820:	f383 8810 	msr	PRIMASK, r3
}
 8002824:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002826:	f3ef 8310 	mrs	r3, PRIMASK
 800282a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800282c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800282e:	643b      	str	r3, [r7, #64]	; 0x40
 8002830:	2301      	movs	r3, #1
 8002832:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002836:	f383 8810 	msr	PRIMASK, r3
}
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2140      	movs	r1, #64	; 0x40
 8002848:	438a      	bics	r2, r1
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800284e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002852:	f383 8810 	msr	PRIMASK, r3
}
 8002856:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800285a:	2220      	movs	r2, #32
 800285c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800285e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002862:	2b01      	cmp	r3, #1
 8002864:	d118      	bne.n	8002898 <UART_DMAReceiveCplt+0xf4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002866:	f3ef 8310 	mrs	r3, PRIMASK
 800286a:	60fb      	str	r3, [r7, #12]
  return(result);
 800286c:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800286e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002870:	2301      	movs	r3, #1
 8002872:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	f383 8810 	msr	PRIMASK, r3
}
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2110      	movs	r1, #16
 8002888:	438a      	bics	r2, r1
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800288e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f383 8810 	msr	PRIMASK, r3
}
 8002896:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800289a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800289c:	2b01      	cmp	r3, #1
 800289e:	d108      	bne.n	80028b2 <UART_DMAReceiveCplt+0x10e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80028a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028a2:	2258      	movs	r2, #88	; 0x58
 80028a4:	5a9a      	ldrh	r2, [r3, r2]
 80028a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028a8:	0011      	movs	r1, r2
 80028aa:	0018      	movs	r0, r3
 80028ac:	f7ff fb46 	bl	8001f3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80028b0:	e003      	b.n	80028ba <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 80028b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028b4:	0018      	movs	r0, r3
 80028b6:	f7ff fb29 	bl	8001f0c <HAL_UART_RxCpltCallback>
}
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	46bd      	mov	sp, r7
 80028be:	b014      	add	sp, #80	; 0x50
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	fffffeff 	.word	0xfffffeff

080028c8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d10a      	bne.n	80028f4 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2258      	movs	r2, #88	; 0x58
 80028e2:	5a9b      	ldrh	r3, [r3, r2]
 80028e4:	085b      	lsrs	r3, r3, #1
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	0011      	movs	r1, r2
 80028ec:	0018      	movs	r0, r3
 80028ee:	f7ff fb25 	bl	8001f3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80028f2:	e003      	b.n	80028fc <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	0018      	movs	r0, r3
 80028f8:	f7ff fb10 	bl	8001f1c <HAL_UART_RxHalfCpltCallback>
}
 80028fc:	46c0      	nop			; (mov r8, r8)
 80028fe:	46bd      	mov	sp, r7
 8002900:	b004      	add	sp, #16
 8002902:	bd80      	pop	{r7, pc}

08002904 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002916:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800291c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	2280      	movs	r2, #128	; 0x80
 8002926:	4013      	ands	r3, r2
 8002928:	2b80      	cmp	r3, #128	; 0x80
 800292a:	d10a      	bne.n	8002942 <UART_DMAError+0x3e>
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	2b21      	cmp	r3, #33	; 0x21
 8002930:	d107      	bne.n	8002942 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2252      	movs	r2, #82	; 0x52
 8002936:	2100      	movs	r1, #0
 8002938:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	0018      	movs	r0, r3
 800293e:	f7ff feab 	bl	8002698 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	2240      	movs	r2, #64	; 0x40
 800294a:	4013      	ands	r3, r2
 800294c:	2b40      	cmp	r3, #64	; 0x40
 800294e:	d10a      	bne.n	8002966 <UART_DMAError+0x62>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2b22      	cmp	r3, #34	; 0x22
 8002954:	d107      	bne.n	8002966 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	225a      	movs	r2, #90	; 0x5a
 800295a:	2100      	movs	r1, #0
 800295c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	0018      	movs	r0, r3
 8002962:	f7ff febd 	bl	80026e0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2280      	movs	r2, #128	; 0x80
 800296a:	589b      	ldr	r3, [r3, r2]
 800296c:	2210      	movs	r2, #16
 800296e:	431a      	orrs	r2, r3
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	2180      	movs	r1, #128	; 0x80
 8002974:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	0018      	movs	r0, r3
 800297a:	f7ff fad7 	bl	8001f2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800297e:	46c0      	nop			; (mov r8, r8)
 8002980:	46bd      	mov	sp, r7
 8002982:	b006      	add	sp, #24
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <__errno>:
 8002988:	4b01      	ldr	r3, [pc, #4]	; (8002990 <__errno+0x8>)
 800298a:	6818      	ldr	r0, [r3, #0]
 800298c:	4770      	bx	lr
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	2000000c 	.word	0x2000000c

08002994 <__libc_init_array>:
 8002994:	b570      	push	{r4, r5, r6, lr}
 8002996:	2600      	movs	r6, #0
 8002998:	4d0c      	ldr	r5, [pc, #48]	; (80029cc <__libc_init_array+0x38>)
 800299a:	4c0d      	ldr	r4, [pc, #52]	; (80029d0 <__libc_init_array+0x3c>)
 800299c:	1b64      	subs	r4, r4, r5
 800299e:	10a4      	asrs	r4, r4, #2
 80029a0:	42a6      	cmp	r6, r4
 80029a2:	d109      	bne.n	80029b8 <__libc_init_array+0x24>
 80029a4:	2600      	movs	r6, #0
 80029a6:	f001 f943 	bl	8003c30 <_init>
 80029aa:	4d0a      	ldr	r5, [pc, #40]	; (80029d4 <__libc_init_array+0x40>)
 80029ac:	4c0a      	ldr	r4, [pc, #40]	; (80029d8 <__libc_init_array+0x44>)
 80029ae:	1b64      	subs	r4, r4, r5
 80029b0:	10a4      	asrs	r4, r4, #2
 80029b2:	42a6      	cmp	r6, r4
 80029b4:	d105      	bne.n	80029c2 <__libc_init_array+0x2e>
 80029b6:	bd70      	pop	{r4, r5, r6, pc}
 80029b8:	00b3      	lsls	r3, r6, #2
 80029ba:	58eb      	ldr	r3, [r5, r3]
 80029bc:	4798      	blx	r3
 80029be:	3601      	adds	r6, #1
 80029c0:	e7ee      	b.n	80029a0 <__libc_init_array+0xc>
 80029c2:	00b3      	lsls	r3, r6, #2
 80029c4:	58eb      	ldr	r3, [r5, r3]
 80029c6:	4798      	blx	r3
 80029c8:	3601      	adds	r6, #1
 80029ca:	e7f2      	b.n	80029b2 <__libc_init_array+0x1e>
 80029cc:	08003f44 	.word	0x08003f44
 80029d0:	08003f44 	.word	0x08003f44
 80029d4:	08003f44 	.word	0x08003f44
 80029d8:	08003f48 	.word	0x08003f48

080029dc <memset>:
 80029dc:	0003      	movs	r3, r0
 80029de:	1882      	adds	r2, r0, r2
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d100      	bne.n	80029e6 <memset+0xa>
 80029e4:	4770      	bx	lr
 80029e6:	7019      	strb	r1, [r3, #0]
 80029e8:	3301      	adds	r3, #1
 80029ea:	e7f9      	b.n	80029e0 <memset+0x4>

080029ec <iprintf>:
 80029ec:	b40f      	push	{r0, r1, r2, r3}
 80029ee:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <iprintf+0x30>)
 80029f0:	b513      	push	{r0, r1, r4, lr}
 80029f2:	681c      	ldr	r4, [r3, #0]
 80029f4:	2c00      	cmp	r4, #0
 80029f6:	d005      	beq.n	8002a04 <iprintf+0x18>
 80029f8:	69a3      	ldr	r3, [r4, #24]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d102      	bne.n	8002a04 <iprintf+0x18>
 80029fe:	0020      	movs	r0, r4
 8002a00:	f000 fb22 	bl	8003048 <__sinit>
 8002a04:	ab05      	add	r3, sp, #20
 8002a06:	0020      	movs	r0, r4
 8002a08:	9a04      	ldr	r2, [sp, #16]
 8002a0a:	68a1      	ldr	r1, [r4, #8]
 8002a0c:	9301      	str	r3, [sp, #4]
 8002a0e:	f000 fd15 	bl	800343c <_vfiprintf_r>
 8002a12:	bc16      	pop	{r1, r2, r4}
 8002a14:	bc08      	pop	{r3}
 8002a16:	b004      	add	sp, #16
 8002a18:	4718      	bx	r3
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	2000000c 	.word	0x2000000c

08002a20 <_puts_r>:
 8002a20:	b570      	push	{r4, r5, r6, lr}
 8002a22:	0005      	movs	r5, r0
 8002a24:	000e      	movs	r6, r1
 8002a26:	2800      	cmp	r0, #0
 8002a28:	d004      	beq.n	8002a34 <_puts_r+0x14>
 8002a2a:	6983      	ldr	r3, [r0, #24]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <_puts_r+0x14>
 8002a30:	f000 fb0a 	bl	8003048 <__sinit>
 8002a34:	69ab      	ldr	r3, [r5, #24]
 8002a36:	68ac      	ldr	r4, [r5, #8]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d102      	bne.n	8002a42 <_puts_r+0x22>
 8002a3c:	0028      	movs	r0, r5
 8002a3e:	f000 fb03 	bl	8003048 <__sinit>
 8002a42:	4b2d      	ldr	r3, [pc, #180]	; (8002af8 <_puts_r+0xd8>)
 8002a44:	429c      	cmp	r4, r3
 8002a46:	d122      	bne.n	8002a8e <_puts_r+0x6e>
 8002a48:	686c      	ldr	r4, [r5, #4]
 8002a4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a4c:	07db      	lsls	r3, r3, #31
 8002a4e:	d405      	bmi.n	8002a5c <_puts_r+0x3c>
 8002a50:	89a3      	ldrh	r3, [r4, #12]
 8002a52:	059b      	lsls	r3, r3, #22
 8002a54:	d402      	bmi.n	8002a5c <_puts_r+0x3c>
 8002a56:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a58:	f000 fba7 	bl	80031aa <__retarget_lock_acquire_recursive>
 8002a5c:	89a3      	ldrh	r3, [r4, #12]
 8002a5e:	071b      	lsls	r3, r3, #28
 8002a60:	d502      	bpl.n	8002a68 <_puts_r+0x48>
 8002a62:	6923      	ldr	r3, [r4, #16]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d129      	bne.n	8002abc <_puts_r+0x9c>
 8002a68:	0021      	movs	r1, r4
 8002a6a:	0028      	movs	r0, r5
 8002a6c:	f000 f928 	bl	8002cc0 <__swsetup_r>
 8002a70:	2800      	cmp	r0, #0
 8002a72:	d023      	beq.n	8002abc <_puts_r+0x9c>
 8002a74:	2501      	movs	r5, #1
 8002a76:	426d      	negs	r5, r5
 8002a78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a7a:	07db      	lsls	r3, r3, #31
 8002a7c:	d405      	bmi.n	8002a8a <_puts_r+0x6a>
 8002a7e:	89a3      	ldrh	r3, [r4, #12]
 8002a80:	059b      	lsls	r3, r3, #22
 8002a82:	d402      	bmi.n	8002a8a <_puts_r+0x6a>
 8002a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a86:	f000 fb91 	bl	80031ac <__retarget_lock_release_recursive>
 8002a8a:	0028      	movs	r0, r5
 8002a8c:	bd70      	pop	{r4, r5, r6, pc}
 8002a8e:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <_puts_r+0xdc>)
 8002a90:	429c      	cmp	r4, r3
 8002a92:	d101      	bne.n	8002a98 <_puts_r+0x78>
 8002a94:	68ac      	ldr	r4, [r5, #8]
 8002a96:	e7d8      	b.n	8002a4a <_puts_r+0x2a>
 8002a98:	4b19      	ldr	r3, [pc, #100]	; (8002b00 <_puts_r+0xe0>)
 8002a9a:	429c      	cmp	r4, r3
 8002a9c:	d1d5      	bne.n	8002a4a <_puts_r+0x2a>
 8002a9e:	68ec      	ldr	r4, [r5, #12]
 8002aa0:	e7d3      	b.n	8002a4a <_puts_r+0x2a>
 8002aa2:	3601      	adds	r6, #1
 8002aa4:	60a3      	str	r3, [r4, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	da04      	bge.n	8002ab4 <_puts_r+0x94>
 8002aaa:	69a2      	ldr	r2, [r4, #24]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	dc16      	bgt.n	8002ade <_puts_r+0xbe>
 8002ab0:	290a      	cmp	r1, #10
 8002ab2:	d014      	beq.n	8002ade <_puts_r+0xbe>
 8002ab4:	6823      	ldr	r3, [r4, #0]
 8002ab6:	1c5a      	adds	r2, r3, #1
 8002ab8:	6022      	str	r2, [r4, #0]
 8002aba:	7019      	strb	r1, [r3, #0]
 8002abc:	68a3      	ldr	r3, [r4, #8]
 8002abe:	7831      	ldrb	r1, [r6, #0]
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	2900      	cmp	r1, #0
 8002ac4:	d1ed      	bne.n	8002aa2 <_puts_r+0x82>
 8002ac6:	60a3      	str	r3, [r4, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	da0f      	bge.n	8002aec <_puts_r+0xcc>
 8002acc:	0028      	movs	r0, r5
 8002ace:	0022      	movs	r2, r4
 8002ad0:	310a      	adds	r1, #10
 8002ad2:	f000 f89f 	bl	8002c14 <__swbuf_r>
 8002ad6:	250a      	movs	r5, #10
 8002ad8:	1c43      	adds	r3, r0, #1
 8002ada:	d1cd      	bne.n	8002a78 <_puts_r+0x58>
 8002adc:	e7ca      	b.n	8002a74 <_puts_r+0x54>
 8002ade:	0022      	movs	r2, r4
 8002ae0:	0028      	movs	r0, r5
 8002ae2:	f000 f897 	bl	8002c14 <__swbuf_r>
 8002ae6:	1c43      	adds	r3, r0, #1
 8002ae8:	d1e8      	bne.n	8002abc <_puts_r+0x9c>
 8002aea:	e7c3      	b.n	8002a74 <_puts_r+0x54>
 8002aec:	250a      	movs	r5, #10
 8002aee:	6823      	ldr	r3, [r4, #0]
 8002af0:	1c5a      	adds	r2, r3, #1
 8002af2:	6022      	str	r2, [r4, #0]
 8002af4:	701d      	strb	r5, [r3, #0]
 8002af6:	e7bf      	b.n	8002a78 <_puts_r+0x58>
 8002af8:	08003ed0 	.word	0x08003ed0
 8002afc:	08003ef0 	.word	0x08003ef0
 8002b00:	08003eb0 	.word	0x08003eb0

08002b04 <puts>:
 8002b04:	b510      	push	{r4, lr}
 8002b06:	4b03      	ldr	r3, [pc, #12]	; (8002b14 <puts+0x10>)
 8002b08:	0001      	movs	r1, r0
 8002b0a:	6818      	ldr	r0, [r3, #0]
 8002b0c:	f7ff ff88 	bl	8002a20 <_puts_r>
 8002b10:	bd10      	pop	{r4, pc}
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	2000000c 	.word	0x2000000c

08002b18 <strcasecmp>:
 8002b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b1a:	0005      	movs	r5, r0
 8002b1c:	2400      	movs	r4, #0
 8002b1e:	2703      	movs	r7, #3
 8002b20:	4e09      	ldr	r6, [pc, #36]	; (8002b48 <strcasecmp+0x30>)
 8002b22:	5d2a      	ldrb	r2, [r5, r4]
 8002b24:	5cb3      	ldrb	r3, [r6, r2]
 8002b26:	403b      	ands	r3, r7
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d100      	bne.n	8002b2e <strcasecmp+0x16>
 8002b2c:	3220      	adds	r2, #32
 8002b2e:	5d0b      	ldrb	r3, [r1, r4]
 8002b30:	5cf0      	ldrb	r0, [r6, r3]
 8002b32:	4038      	ands	r0, r7
 8002b34:	2801      	cmp	r0, #1
 8002b36:	d100      	bne.n	8002b3a <strcasecmp+0x22>
 8002b38:	3320      	adds	r3, #32
 8002b3a:	1ad0      	subs	r0, r2, r3
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d102      	bne.n	8002b46 <strcasecmp+0x2e>
 8002b40:	3401      	adds	r4, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1ed      	bne.n	8002b22 <strcasecmp+0xa>
 8002b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b48:	08003dad 	.word	0x08003dad

08002b4c <strtok>:
 8002b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b4e:	4b16      	ldr	r3, [pc, #88]	; (8002ba8 <strtok+0x5c>)
 8002b50:	0005      	movs	r5, r0
 8002b52:	681f      	ldr	r7, [r3, #0]
 8002b54:	000e      	movs	r6, r1
 8002b56:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8002b58:	2c00      	cmp	r4, #0
 8002b5a:	d11d      	bne.n	8002b98 <strtok+0x4c>
 8002b5c:	2050      	movs	r0, #80	; 0x50
 8002b5e:	f000 fb93 	bl	8003288 <malloc>
 8002b62:	1e02      	subs	r2, r0, #0
 8002b64:	65b8      	str	r0, [r7, #88]	; 0x58
 8002b66:	d104      	bne.n	8002b72 <strtok+0x26>
 8002b68:	2157      	movs	r1, #87	; 0x57
 8002b6a:	4b10      	ldr	r3, [pc, #64]	; (8002bac <strtok+0x60>)
 8002b6c:	4810      	ldr	r0, [pc, #64]	; (8002bb0 <strtok+0x64>)
 8002b6e:	f000 f91f 	bl	8002db0 <__assert_func>
 8002b72:	6004      	str	r4, [r0, #0]
 8002b74:	6044      	str	r4, [r0, #4]
 8002b76:	6084      	str	r4, [r0, #8]
 8002b78:	60c4      	str	r4, [r0, #12]
 8002b7a:	6104      	str	r4, [r0, #16]
 8002b7c:	6144      	str	r4, [r0, #20]
 8002b7e:	6184      	str	r4, [r0, #24]
 8002b80:	6284      	str	r4, [r0, #40]	; 0x28
 8002b82:	62c4      	str	r4, [r0, #44]	; 0x2c
 8002b84:	6304      	str	r4, [r0, #48]	; 0x30
 8002b86:	6344      	str	r4, [r0, #52]	; 0x34
 8002b88:	6384      	str	r4, [r0, #56]	; 0x38
 8002b8a:	63c4      	str	r4, [r0, #60]	; 0x3c
 8002b8c:	6404      	str	r4, [r0, #64]	; 0x40
 8002b8e:	6444      	str	r4, [r0, #68]	; 0x44
 8002b90:	6484      	str	r4, [r0, #72]	; 0x48
 8002b92:	64c4      	str	r4, [r0, #76]	; 0x4c
 8002b94:	7704      	strb	r4, [r0, #28]
 8002b96:	6244      	str	r4, [r0, #36]	; 0x24
 8002b98:	0031      	movs	r1, r6
 8002b9a:	0028      	movs	r0, r5
 8002b9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	f000 f808 	bl	8002bb4 <__strtok_r>
 8002ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	2000000c 	.word	0x2000000c
 8002bac:	08003cf8 	.word	0x08003cf8
 8002bb0:	08003d0f 	.word	0x08003d0f

08002bb4 <__strtok_r>:
 8002bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bb6:	2800      	cmp	r0, #0
 8002bb8:	d102      	bne.n	8002bc0 <__strtok_r+0xc>
 8002bba:	6810      	ldr	r0, [r2, #0]
 8002bbc:	2800      	cmp	r0, #0
 8002bbe:	d013      	beq.n	8002be8 <__strtok_r+0x34>
 8002bc0:	0004      	movs	r4, r0
 8002bc2:	0020      	movs	r0, r4
 8002bc4:	000e      	movs	r6, r1
 8002bc6:	7805      	ldrb	r5, [r0, #0]
 8002bc8:	3401      	adds	r4, #1
 8002bca:	7837      	ldrb	r7, [r6, #0]
 8002bcc:	2f00      	cmp	r7, #0
 8002bce:	d104      	bne.n	8002bda <__strtok_r+0x26>
 8002bd0:	2d00      	cmp	r5, #0
 8002bd2:	d10f      	bne.n	8002bf4 <__strtok_r+0x40>
 8002bd4:	0028      	movs	r0, r5
 8002bd6:	6015      	str	r5, [r2, #0]
 8002bd8:	e006      	b.n	8002be8 <__strtok_r+0x34>
 8002bda:	3601      	adds	r6, #1
 8002bdc:	42bd      	cmp	r5, r7
 8002bde:	d1f4      	bne.n	8002bca <__strtok_r+0x16>
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1ee      	bne.n	8002bc2 <__strtok_r+0xe>
 8002be4:	6014      	str	r4, [r2, #0]
 8002be6:	7003      	strb	r3, [r0, #0]
 8002be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bea:	002f      	movs	r7, r5
 8002bec:	e00f      	b.n	8002c0e <__strtok_r+0x5a>
 8002bee:	3301      	adds	r3, #1
 8002bf0:	2e00      	cmp	r6, #0
 8002bf2:	d104      	bne.n	8002bfe <__strtok_r+0x4a>
 8002bf4:	0023      	movs	r3, r4
 8002bf6:	3401      	adds	r4, #1
 8002bf8:	781d      	ldrb	r5, [r3, #0]
 8002bfa:	0027      	movs	r7, r4
 8002bfc:	000b      	movs	r3, r1
 8002bfe:	781e      	ldrb	r6, [r3, #0]
 8002c00:	42b5      	cmp	r5, r6
 8002c02:	d1f4      	bne.n	8002bee <__strtok_r+0x3a>
 8002c04:	2d00      	cmp	r5, #0
 8002c06:	d0f0      	beq.n	8002bea <__strtok_r+0x36>
 8002c08:	2300      	movs	r3, #0
 8002c0a:	3c01      	subs	r4, #1
 8002c0c:	7023      	strb	r3, [r4, #0]
 8002c0e:	6017      	str	r7, [r2, #0]
 8002c10:	e7ea      	b.n	8002be8 <__strtok_r+0x34>
	...

08002c14 <__swbuf_r>:
 8002c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c16:	0005      	movs	r5, r0
 8002c18:	000e      	movs	r6, r1
 8002c1a:	0014      	movs	r4, r2
 8002c1c:	2800      	cmp	r0, #0
 8002c1e:	d004      	beq.n	8002c2a <__swbuf_r+0x16>
 8002c20:	6983      	ldr	r3, [r0, #24]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <__swbuf_r+0x16>
 8002c26:	f000 fa0f 	bl	8003048 <__sinit>
 8002c2a:	4b22      	ldr	r3, [pc, #136]	; (8002cb4 <__swbuf_r+0xa0>)
 8002c2c:	429c      	cmp	r4, r3
 8002c2e:	d12e      	bne.n	8002c8e <__swbuf_r+0x7a>
 8002c30:	686c      	ldr	r4, [r5, #4]
 8002c32:	69a3      	ldr	r3, [r4, #24]
 8002c34:	60a3      	str	r3, [r4, #8]
 8002c36:	89a3      	ldrh	r3, [r4, #12]
 8002c38:	071b      	lsls	r3, r3, #28
 8002c3a:	d532      	bpl.n	8002ca2 <__swbuf_r+0x8e>
 8002c3c:	6923      	ldr	r3, [r4, #16]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d02f      	beq.n	8002ca2 <__swbuf_r+0x8e>
 8002c42:	6823      	ldr	r3, [r4, #0]
 8002c44:	6922      	ldr	r2, [r4, #16]
 8002c46:	b2f7      	uxtb	r7, r6
 8002c48:	1a98      	subs	r0, r3, r2
 8002c4a:	6963      	ldr	r3, [r4, #20]
 8002c4c:	b2f6      	uxtb	r6, r6
 8002c4e:	4283      	cmp	r3, r0
 8002c50:	dc05      	bgt.n	8002c5e <__swbuf_r+0x4a>
 8002c52:	0021      	movs	r1, r4
 8002c54:	0028      	movs	r0, r5
 8002c56:	f000 f955 	bl	8002f04 <_fflush_r>
 8002c5a:	2800      	cmp	r0, #0
 8002c5c:	d127      	bne.n	8002cae <__swbuf_r+0x9a>
 8002c5e:	68a3      	ldr	r3, [r4, #8]
 8002c60:	3001      	adds	r0, #1
 8002c62:	3b01      	subs	r3, #1
 8002c64:	60a3      	str	r3, [r4, #8]
 8002c66:	6823      	ldr	r3, [r4, #0]
 8002c68:	1c5a      	adds	r2, r3, #1
 8002c6a:	6022      	str	r2, [r4, #0]
 8002c6c:	701f      	strb	r7, [r3, #0]
 8002c6e:	6963      	ldr	r3, [r4, #20]
 8002c70:	4283      	cmp	r3, r0
 8002c72:	d004      	beq.n	8002c7e <__swbuf_r+0x6a>
 8002c74:	89a3      	ldrh	r3, [r4, #12]
 8002c76:	07db      	lsls	r3, r3, #31
 8002c78:	d507      	bpl.n	8002c8a <__swbuf_r+0x76>
 8002c7a:	2e0a      	cmp	r6, #10
 8002c7c:	d105      	bne.n	8002c8a <__swbuf_r+0x76>
 8002c7e:	0021      	movs	r1, r4
 8002c80:	0028      	movs	r0, r5
 8002c82:	f000 f93f 	bl	8002f04 <_fflush_r>
 8002c86:	2800      	cmp	r0, #0
 8002c88:	d111      	bne.n	8002cae <__swbuf_r+0x9a>
 8002c8a:	0030      	movs	r0, r6
 8002c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c8e:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <__swbuf_r+0xa4>)
 8002c90:	429c      	cmp	r4, r3
 8002c92:	d101      	bne.n	8002c98 <__swbuf_r+0x84>
 8002c94:	68ac      	ldr	r4, [r5, #8]
 8002c96:	e7cc      	b.n	8002c32 <__swbuf_r+0x1e>
 8002c98:	4b08      	ldr	r3, [pc, #32]	; (8002cbc <__swbuf_r+0xa8>)
 8002c9a:	429c      	cmp	r4, r3
 8002c9c:	d1c9      	bne.n	8002c32 <__swbuf_r+0x1e>
 8002c9e:	68ec      	ldr	r4, [r5, #12]
 8002ca0:	e7c7      	b.n	8002c32 <__swbuf_r+0x1e>
 8002ca2:	0021      	movs	r1, r4
 8002ca4:	0028      	movs	r0, r5
 8002ca6:	f000 f80b 	bl	8002cc0 <__swsetup_r>
 8002caa:	2800      	cmp	r0, #0
 8002cac:	d0c9      	beq.n	8002c42 <__swbuf_r+0x2e>
 8002cae:	2601      	movs	r6, #1
 8002cb0:	4276      	negs	r6, r6
 8002cb2:	e7ea      	b.n	8002c8a <__swbuf_r+0x76>
 8002cb4:	08003ed0 	.word	0x08003ed0
 8002cb8:	08003ef0 	.word	0x08003ef0
 8002cbc:	08003eb0 	.word	0x08003eb0

08002cc0 <__swsetup_r>:
 8002cc0:	4b37      	ldr	r3, [pc, #220]	; (8002da0 <__swsetup_r+0xe0>)
 8002cc2:	b570      	push	{r4, r5, r6, lr}
 8002cc4:	681d      	ldr	r5, [r3, #0]
 8002cc6:	0006      	movs	r6, r0
 8002cc8:	000c      	movs	r4, r1
 8002cca:	2d00      	cmp	r5, #0
 8002ccc:	d005      	beq.n	8002cda <__swsetup_r+0x1a>
 8002cce:	69ab      	ldr	r3, [r5, #24]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d102      	bne.n	8002cda <__swsetup_r+0x1a>
 8002cd4:	0028      	movs	r0, r5
 8002cd6:	f000 f9b7 	bl	8003048 <__sinit>
 8002cda:	4b32      	ldr	r3, [pc, #200]	; (8002da4 <__swsetup_r+0xe4>)
 8002cdc:	429c      	cmp	r4, r3
 8002cde:	d10f      	bne.n	8002d00 <__swsetup_r+0x40>
 8002ce0:	686c      	ldr	r4, [r5, #4]
 8002ce2:	230c      	movs	r3, #12
 8002ce4:	5ee2      	ldrsh	r2, [r4, r3]
 8002ce6:	b293      	uxth	r3, r2
 8002ce8:	0711      	lsls	r1, r2, #28
 8002cea:	d42d      	bmi.n	8002d48 <__swsetup_r+0x88>
 8002cec:	06d9      	lsls	r1, r3, #27
 8002cee:	d411      	bmi.n	8002d14 <__swsetup_r+0x54>
 8002cf0:	2309      	movs	r3, #9
 8002cf2:	2001      	movs	r0, #1
 8002cf4:	6033      	str	r3, [r6, #0]
 8002cf6:	3337      	adds	r3, #55	; 0x37
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	81a3      	strh	r3, [r4, #12]
 8002cfc:	4240      	negs	r0, r0
 8002cfe:	bd70      	pop	{r4, r5, r6, pc}
 8002d00:	4b29      	ldr	r3, [pc, #164]	; (8002da8 <__swsetup_r+0xe8>)
 8002d02:	429c      	cmp	r4, r3
 8002d04:	d101      	bne.n	8002d0a <__swsetup_r+0x4a>
 8002d06:	68ac      	ldr	r4, [r5, #8]
 8002d08:	e7eb      	b.n	8002ce2 <__swsetup_r+0x22>
 8002d0a:	4b28      	ldr	r3, [pc, #160]	; (8002dac <__swsetup_r+0xec>)
 8002d0c:	429c      	cmp	r4, r3
 8002d0e:	d1e8      	bne.n	8002ce2 <__swsetup_r+0x22>
 8002d10:	68ec      	ldr	r4, [r5, #12]
 8002d12:	e7e6      	b.n	8002ce2 <__swsetup_r+0x22>
 8002d14:	075b      	lsls	r3, r3, #29
 8002d16:	d513      	bpl.n	8002d40 <__swsetup_r+0x80>
 8002d18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d1a:	2900      	cmp	r1, #0
 8002d1c:	d008      	beq.n	8002d30 <__swsetup_r+0x70>
 8002d1e:	0023      	movs	r3, r4
 8002d20:	3344      	adds	r3, #68	; 0x44
 8002d22:	4299      	cmp	r1, r3
 8002d24:	d002      	beq.n	8002d2c <__swsetup_r+0x6c>
 8002d26:	0030      	movs	r0, r6
 8002d28:	f000 fab8 	bl	800329c <_free_r>
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	6363      	str	r3, [r4, #52]	; 0x34
 8002d30:	2224      	movs	r2, #36	; 0x24
 8002d32:	89a3      	ldrh	r3, [r4, #12]
 8002d34:	4393      	bics	r3, r2
 8002d36:	81a3      	strh	r3, [r4, #12]
 8002d38:	2300      	movs	r3, #0
 8002d3a:	6063      	str	r3, [r4, #4]
 8002d3c:	6923      	ldr	r3, [r4, #16]
 8002d3e:	6023      	str	r3, [r4, #0]
 8002d40:	2308      	movs	r3, #8
 8002d42:	89a2      	ldrh	r2, [r4, #12]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	81a3      	strh	r3, [r4, #12]
 8002d48:	6923      	ldr	r3, [r4, #16]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10b      	bne.n	8002d66 <__swsetup_r+0xa6>
 8002d4e:	21a0      	movs	r1, #160	; 0xa0
 8002d50:	2280      	movs	r2, #128	; 0x80
 8002d52:	89a3      	ldrh	r3, [r4, #12]
 8002d54:	0089      	lsls	r1, r1, #2
 8002d56:	0092      	lsls	r2, r2, #2
 8002d58:	400b      	ands	r3, r1
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d003      	beq.n	8002d66 <__swsetup_r+0xa6>
 8002d5e:	0021      	movs	r1, r4
 8002d60:	0030      	movs	r0, r6
 8002d62:	f000 fa4d 	bl	8003200 <__smakebuf_r>
 8002d66:	220c      	movs	r2, #12
 8002d68:	5ea3      	ldrsh	r3, [r4, r2]
 8002d6a:	2001      	movs	r0, #1
 8002d6c:	001a      	movs	r2, r3
 8002d6e:	b299      	uxth	r1, r3
 8002d70:	4002      	ands	r2, r0
 8002d72:	4203      	tst	r3, r0
 8002d74:	d00f      	beq.n	8002d96 <__swsetup_r+0xd6>
 8002d76:	2200      	movs	r2, #0
 8002d78:	60a2      	str	r2, [r4, #8]
 8002d7a:	6962      	ldr	r2, [r4, #20]
 8002d7c:	4252      	negs	r2, r2
 8002d7e:	61a2      	str	r2, [r4, #24]
 8002d80:	2000      	movs	r0, #0
 8002d82:	6922      	ldr	r2, [r4, #16]
 8002d84:	4282      	cmp	r2, r0
 8002d86:	d1ba      	bne.n	8002cfe <__swsetup_r+0x3e>
 8002d88:	060a      	lsls	r2, r1, #24
 8002d8a:	d5b8      	bpl.n	8002cfe <__swsetup_r+0x3e>
 8002d8c:	2240      	movs	r2, #64	; 0x40
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	81a3      	strh	r3, [r4, #12]
 8002d92:	3801      	subs	r0, #1
 8002d94:	e7b3      	b.n	8002cfe <__swsetup_r+0x3e>
 8002d96:	0788      	lsls	r0, r1, #30
 8002d98:	d400      	bmi.n	8002d9c <__swsetup_r+0xdc>
 8002d9a:	6962      	ldr	r2, [r4, #20]
 8002d9c:	60a2      	str	r2, [r4, #8]
 8002d9e:	e7ef      	b.n	8002d80 <__swsetup_r+0xc0>
 8002da0:	2000000c 	.word	0x2000000c
 8002da4:	08003ed0 	.word	0x08003ed0
 8002da8:	08003ef0 	.word	0x08003ef0
 8002dac:	08003eb0 	.word	0x08003eb0

08002db0 <__assert_func>:
 8002db0:	b530      	push	{r4, r5, lr}
 8002db2:	0014      	movs	r4, r2
 8002db4:	001a      	movs	r2, r3
 8002db6:	4b09      	ldr	r3, [pc, #36]	; (8002ddc <__assert_func+0x2c>)
 8002db8:	0005      	movs	r5, r0
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	b085      	sub	sp, #20
 8002dbe:	68d8      	ldr	r0, [r3, #12]
 8002dc0:	4b07      	ldr	r3, [pc, #28]	; (8002de0 <__assert_func+0x30>)
 8002dc2:	2c00      	cmp	r4, #0
 8002dc4:	d101      	bne.n	8002dca <__assert_func+0x1a>
 8002dc6:	4b07      	ldr	r3, [pc, #28]	; (8002de4 <__assert_func+0x34>)
 8002dc8:	001c      	movs	r4, r3
 8002dca:	9301      	str	r3, [sp, #4]
 8002dcc:	9100      	str	r1, [sp, #0]
 8002dce:	002b      	movs	r3, r5
 8002dd0:	4905      	ldr	r1, [pc, #20]	; (8002de8 <__assert_func+0x38>)
 8002dd2:	9402      	str	r4, [sp, #8]
 8002dd4:	f000 f9b8 	bl	8003148 <fiprintf>
 8002dd8:	f000 fe5e 	bl	8003a98 <abort>
 8002ddc:	2000000c 	.word	0x2000000c
 8002de0:	08003d70 	.word	0x08003d70
 8002de4:	08003dab 	.word	0x08003dab
 8002de8:	08003d7d 	.word	0x08003d7d

08002dec <__sflush_r>:
 8002dec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002dee:	898b      	ldrh	r3, [r1, #12]
 8002df0:	0005      	movs	r5, r0
 8002df2:	000c      	movs	r4, r1
 8002df4:	071a      	lsls	r2, r3, #28
 8002df6:	d45f      	bmi.n	8002eb8 <__sflush_r+0xcc>
 8002df8:	684a      	ldr	r2, [r1, #4]
 8002dfa:	2a00      	cmp	r2, #0
 8002dfc:	dc04      	bgt.n	8002e08 <__sflush_r+0x1c>
 8002dfe:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8002e00:	2a00      	cmp	r2, #0
 8002e02:	dc01      	bgt.n	8002e08 <__sflush_r+0x1c>
 8002e04:	2000      	movs	r0, #0
 8002e06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002e08:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002e0a:	2f00      	cmp	r7, #0
 8002e0c:	d0fa      	beq.n	8002e04 <__sflush_r+0x18>
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2180      	movs	r1, #128	; 0x80
 8002e12:	682e      	ldr	r6, [r5, #0]
 8002e14:	602a      	str	r2, [r5, #0]
 8002e16:	001a      	movs	r2, r3
 8002e18:	0149      	lsls	r1, r1, #5
 8002e1a:	400a      	ands	r2, r1
 8002e1c:	420b      	tst	r3, r1
 8002e1e:	d034      	beq.n	8002e8a <__sflush_r+0x9e>
 8002e20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e22:	89a3      	ldrh	r3, [r4, #12]
 8002e24:	075b      	lsls	r3, r3, #29
 8002e26:	d506      	bpl.n	8002e36 <__sflush_r+0x4a>
 8002e28:	6863      	ldr	r3, [r4, #4]
 8002e2a:	1ac0      	subs	r0, r0, r3
 8002e2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <__sflush_r+0x4a>
 8002e32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e34:	1ac0      	subs	r0, r0, r3
 8002e36:	0002      	movs	r2, r0
 8002e38:	6a21      	ldr	r1, [r4, #32]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	0028      	movs	r0, r5
 8002e3e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002e40:	47b8      	blx	r7
 8002e42:	89a1      	ldrh	r1, [r4, #12]
 8002e44:	1c43      	adds	r3, r0, #1
 8002e46:	d106      	bne.n	8002e56 <__sflush_r+0x6a>
 8002e48:	682b      	ldr	r3, [r5, #0]
 8002e4a:	2b1d      	cmp	r3, #29
 8002e4c:	d831      	bhi.n	8002eb2 <__sflush_r+0xc6>
 8002e4e:	4a2c      	ldr	r2, [pc, #176]	; (8002f00 <__sflush_r+0x114>)
 8002e50:	40da      	lsrs	r2, r3
 8002e52:	07d3      	lsls	r3, r2, #31
 8002e54:	d52d      	bpl.n	8002eb2 <__sflush_r+0xc6>
 8002e56:	2300      	movs	r3, #0
 8002e58:	6063      	str	r3, [r4, #4]
 8002e5a:	6923      	ldr	r3, [r4, #16]
 8002e5c:	6023      	str	r3, [r4, #0]
 8002e5e:	04cb      	lsls	r3, r1, #19
 8002e60:	d505      	bpl.n	8002e6e <__sflush_r+0x82>
 8002e62:	1c43      	adds	r3, r0, #1
 8002e64:	d102      	bne.n	8002e6c <__sflush_r+0x80>
 8002e66:	682b      	ldr	r3, [r5, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d100      	bne.n	8002e6e <__sflush_r+0x82>
 8002e6c:	6560      	str	r0, [r4, #84]	; 0x54
 8002e6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e70:	602e      	str	r6, [r5, #0]
 8002e72:	2900      	cmp	r1, #0
 8002e74:	d0c6      	beq.n	8002e04 <__sflush_r+0x18>
 8002e76:	0023      	movs	r3, r4
 8002e78:	3344      	adds	r3, #68	; 0x44
 8002e7a:	4299      	cmp	r1, r3
 8002e7c:	d002      	beq.n	8002e84 <__sflush_r+0x98>
 8002e7e:	0028      	movs	r0, r5
 8002e80:	f000 fa0c 	bl	800329c <_free_r>
 8002e84:	2000      	movs	r0, #0
 8002e86:	6360      	str	r0, [r4, #52]	; 0x34
 8002e88:	e7bd      	b.n	8002e06 <__sflush_r+0x1a>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	0028      	movs	r0, r5
 8002e8e:	6a21      	ldr	r1, [r4, #32]
 8002e90:	47b8      	blx	r7
 8002e92:	1c43      	adds	r3, r0, #1
 8002e94:	d1c5      	bne.n	8002e22 <__sflush_r+0x36>
 8002e96:	682b      	ldr	r3, [r5, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0c2      	beq.n	8002e22 <__sflush_r+0x36>
 8002e9c:	2b1d      	cmp	r3, #29
 8002e9e:	d001      	beq.n	8002ea4 <__sflush_r+0xb8>
 8002ea0:	2b16      	cmp	r3, #22
 8002ea2:	d101      	bne.n	8002ea8 <__sflush_r+0xbc>
 8002ea4:	602e      	str	r6, [r5, #0]
 8002ea6:	e7ad      	b.n	8002e04 <__sflush_r+0x18>
 8002ea8:	2340      	movs	r3, #64	; 0x40
 8002eaa:	89a2      	ldrh	r2, [r4, #12]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	81a3      	strh	r3, [r4, #12]
 8002eb0:	e7a9      	b.n	8002e06 <__sflush_r+0x1a>
 8002eb2:	2340      	movs	r3, #64	; 0x40
 8002eb4:	430b      	orrs	r3, r1
 8002eb6:	e7fa      	b.n	8002eae <__sflush_r+0xc2>
 8002eb8:	690f      	ldr	r7, [r1, #16]
 8002eba:	2f00      	cmp	r7, #0
 8002ebc:	d0a2      	beq.n	8002e04 <__sflush_r+0x18>
 8002ebe:	680a      	ldr	r2, [r1, #0]
 8002ec0:	600f      	str	r7, [r1, #0]
 8002ec2:	1bd2      	subs	r2, r2, r7
 8002ec4:	9201      	str	r2, [sp, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	079b      	lsls	r3, r3, #30
 8002eca:	d100      	bne.n	8002ece <__sflush_r+0xe2>
 8002ecc:	694a      	ldr	r2, [r1, #20]
 8002ece:	60a2      	str	r2, [r4, #8]
 8002ed0:	9b01      	ldr	r3, [sp, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	dc00      	bgt.n	8002ed8 <__sflush_r+0xec>
 8002ed6:	e795      	b.n	8002e04 <__sflush_r+0x18>
 8002ed8:	003a      	movs	r2, r7
 8002eda:	0028      	movs	r0, r5
 8002edc:	9b01      	ldr	r3, [sp, #4]
 8002ede:	6a21      	ldr	r1, [r4, #32]
 8002ee0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002ee2:	47b0      	blx	r6
 8002ee4:	2800      	cmp	r0, #0
 8002ee6:	dc06      	bgt.n	8002ef6 <__sflush_r+0x10a>
 8002ee8:	2340      	movs	r3, #64	; 0x40
 8002eea:	2001      	movs	r0, #1
 8002eec:	89a2      	ldrh	r2, [r4, #12]
 8002eee:	4240      	negs	r0, r0
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	81a3      	strh	r3, [r4, #12]
 8002ef4:	e787      	b.n	8002e06 <__sflush_r+0x1a>
 8002ef6:	9b01      	ldr	r3, [sp, #4]
 8002ef8:	183f      	adds	r7, r7, r0
 8002efa:	1a1b      	subs	r3, r3, r0
 8002efc:	9301      	str	r3, [sp, #4]
 8002efe:	e7e7      	b.n	8002ed0 <__sflush_r+0xe4>
 8002f00:	20400001 	.word	0x20400001

08002f04 <_fflush_r>:
 8002f04:	690b      	ldr	r3, [r1, #16]
 8002f06:	b570      	push	{r4, r5, r6, lr}
 8002f08:	0005      	movs	r5, r0
 8002f0a:	000c      	movs	r4, r1
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d102      	bne.n	8002f16 <_fflush_r+0x12>
 8002f10:	2500      	movs	r5, #0
 8002f12:	0028      	movs	r0, r5
 8002f14:	bd70      	pop	{r4, r5, r6, pc}
 8002f16:	2800      	cmp	r0, #0
 8002f18:	d004      	beq.n	8002f24 <_fflush_r+0x20>
 8002f1a:	6983      	ldr	r3, [r0, #24]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <_fflush_r+0x20>
 8002f20:	f000 f892 	bl	8003048 <__sinit>
 8002f24:	4b14      	ldr	r3, [pc, #80]	; (8002f78 <_fflush_r+0x74>)
 8002f26:	429c      	cmp	r4, r3
 8002f28:	d11b      	bne.n	8002f62 <_fflush_r+0x5e>
 8002f2a:	686c      	ldr	r4, [r5, #4]
 8002f2c:	220c      	movs	r2, #12
 8002f2e:	5ea3      	ldrsh	r3, [r4, r2]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0ed      	beq.n	8002f10 <_fflush_r+0xc>
 8002f34:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002f36:	07d2      	lsls	r2, r2, #31
 8002f38:	d404      	bmi.n	8002f44 <_fflush_r+0x40>
 8002f3a:	059b      	lsls	r3, r3, #22
 8002f3c:	d402      	bmi.n	8002f44 <_fflush_r+0x40>
 8002f3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f40:	f000 f933 	bl	80031aa <__retarget_lock_acquire_recursive>
 8002f44:	0028      	movs	r0, r5
 8002f46:	0021      	movs	r1, r4
 8002f48:	f7ff ff50 	bl	8002dec <__sflush_r>
 8002f4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f4e:	0005      	movs	r5, r0
 8002f50:	07db      	lsls	r3, r3, #31
 8002f52:	d4de      	bmi.n	8002f12 <_fflush_r+0xe>
 8002f54:	89a3      	ldrh	r3, [r4, #12]
 8002f56:	059b      	lsls	r3, r3, #22
 8002f58:	d4db      	bmi.n	8002f12 <_fflush_r+0xe>
 8002f5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f5c:	f000 f926 	bl	80031ac <__retarget_lock_release_recursive>
 8002f60:	e7d7      	b.n	8002f12 <_fflush_r+0xe>
 8002f62:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <_fflush_r+0x78>)
 8002f64:	429c      	cmp	r4, r3
 8002f66:	d101      	bne.n	8002f6c <_fflush_r+0x68>
 8002f68:	68ac      	ldr	r4, [r5, #8]
 8002f6a:	e7df      	b.n	8002f2c <_fflush_r+0x28>
 8002f6c:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <_fflush_r+0x7c>)
 8002f6e:	429c      	cmp	r4, r3
 8002f70:	d1dc      	bne.n	8002f2c <_fflush_r+0x28>
 8002f72:	68ec      	ldr	r4, [r5, #12]
 8002f74:	e7da      	b.n	8002f2c <_fflush_r+0x28>
 8002f76:	46c0      	nop			; (mov r8, r8)
 8002f78:	08003ed0 	.word	0x08003ed0
 8002f7c:	08003ef0 	.word	0x08003ef0
 8002f80:	08003eb0 	.word	0x08003eb0

08002f84 <std>:
 8002f84:	2300      	movs	r3, #0
 8002f86:	b510      	push	{r4, lr}
 8002f88:	0004      	movs	r4, r0
 8002f8a:	6003      	str	r3, [r0, #0]
 8002f8c:	6043      	str	r3, [r0, #4]
 8002f8e:	6083      	str	r3, [r0, #8]
 8002f90:	8181      	strh	r1, [r0, #12]
 8002f92:	6643      	str	r3, [r0, #100]	; 0x64
 8002f94:	0019      	movs	r1, r3
 8002f96:	81c2      	strh	r2, [r0, #14]
 8002f98:	6103      	str	r3, [r0, #16]
 8002f9a:	6143      	str	r3, [r0, #20]
 8002f9c:	6183      	str	r3, [r0, #24]
 8002f9e:	2208      	movs	r2, #8
 8002fa0:	305c      	adds	r0, #92	; 0x5c
 8002fa2:	f7ff fd1b 	bl	80029dc <memset>
 8002fa6:	4b05      	ldr	r3, [pc, #20]	; (8002fbc <std+0x38>)
 8002fa8:	6263      	str	r3, [r4, #36]	; 0x24
 8002faa:	4b05      	ldr	r3, [pc, #20]	; (8002fc0 <std+0x3c>)
 8002fac:	6224      	str	r4, [r4, #32]
 8002fae:	62a3      	str	r3, [r4, #40]	; 0x28
 8002fb0:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <std+0x40>)
 8002fb2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002fb4:	4b04      	ldr	r3, [pc, #16]	; (8002fc8 <std+0x44>)
 8002fb6:	6323      	str	r3, [r4, #48]	; 0x30
 8002fb8:	bd10      	pop	{r4, pc}
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	080039d9 	.word	0x080039d9
 8002fc0:	08003a01 	.word	0x08003a01
 8002fc4:	08003a39 	.word	0x08003a39
 8002fc8:	08003a65 	.word	0x08003a65

08002fcc <_cleanup_r>:
 8002fcc:	b510      	push	{r4, lr}
 8002fce:	4902      	ldr	r1, [pc, #8]	; (8002fd8 <_cleanup_r+0xc>)
 8002fd0:	f000 f8ca 	bl	8003168 <_fwalk_reent>
 8002fd4:	bd10      	pop	{r4, pc}
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	08002f05 	.word	0x08002f05

08002fdc <__sfmoreglue>:
 8002fdc:	b570      	push	{r4, r5, r6, lr}
 8002fde:	2568      	movs	r5, #104	; 0x68
 8002fe0:	1e4a      	subs	r2, r1, #1
 8002fe2:	4355      	muls	r5, r2
 8002fe4:	000e      	movs	r6, r1
 8002fe6:	0029      	movs	r1, r5
 8002fe8:	3174      	adds	r1, #116	; 0x74
 8002fea:	f000 f9a1 	bl	8003330 <_malloc_r>
 8002fee:	1e04      	subs	r4, r0, #0
 8002ff0:	d008      	beq.n	8003004 <__sfmoreglue+0x28>
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	002a      	movs	r2, r5
 8002ff6:	6001      	str	r1, [r0, #0]
 8002ff8:	6046      	str	r6, [r0, #4]
 8002ffa:	300c      	adds	r0, #12
 8002ffc:	60a0      	str	r0, [r4, #8]
 8002ffe:	3268      	adds	r2, #104	; 0x68
 8003000:	f7ff fcec 	bl	80029dc <memset>
 8003004:	0020      	movs	r0, r4
 8003006:	bd70      	pop	{r4, r5, r6, pc}

08003008 <__sfp_lock_acquire>:
 8003008:	b510      	push	{r4, lr}
 800300a:	4802      	ldr	r0, [pc, #8]	; (8003014 <__sfp_lock_acquire+0xc>)
 800300c:	f000 f8cd 	bl	80031aa <__retarget_lock_acquire_recursive>
 8003010:	bd10      	pop	{r4, pc}
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	200002b0 	.word	0x200002b0

08003018 <__sfp_lock_release>:
 8003018:	b510      	push	{r4, lr}
 800301a:	4802      	ldr	r0, [pc, #8]	; (8003024 <__sfp_lock_release+0xc>)
 800301c:	f000 f8c6 	bl	80031ac <__retarget_lock_release_recursive>
 8003020:	bd10      	pop	{r4, pc}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	200002b0 	.word	0x200002b0

08003028 <__sinit_lock_acquire>:
 8003028:	b510      	push	{r4, lr}
 800302a:	4802      	ldr	r0, [pc, #8]	; (8003034 <__sinit_lock_acquire+0xc>)
 800302c:	f000 f8bd 	bl	80031aa <__retarget_lock_acquire_recursive>
 8003030:	bd10      	pop	{r4, pc}
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	200002ab 	.word	0x200002ab

08003038 <__sinit_lock_release>:
 8003038:	b510      	push	{r4, lr}
 800303a:	4802      	ldr	r0, [pc, #8]	; (8003044 <__sinit_lock_release+0xc>)
 800303c:	f000 f8b6 	bl	80031ac <__retarget_lock_release_recursive>
 8003040:	bd10      	pop	{r4, pc}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	200002ab 	.word	0x200002ab

08003048 <__sinit>:
 8003048:	b513      	push	{r0, r1, r4, lr}
 800304a:	0004      	movs	r4, r0
 800304c:	f7ff ffec 	bl	8003028 <__sinit_lock_acquire>
 8003050:	69a3      	ldr	r3, [r4, #24]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d002      	beq.n	800305c <__sinit+0x14>
 8003056:	f7ff ffef 	bl	8003038 <__sinit_lock_release>
 800305a:	bd13      	pop	{r0, r1, r4, pc}
 800305c:	64a3      	str	r3, [r4, #72]	; 0x48
 800305e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003060:	6523      	str	r3, [r4, #80]	; 0x50
 8003062:	4b13      	ldr	r3, [pc, #76]	; (80030b0 <__sinit+0x68>)
 8003064:	4a13      	ldr	r2, [pc, #76]	; (80030b4 <__sinit+0x6c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	62a2      	str	r2, [r4, #40]	; 0x28
 800306a:	9301      	str	r3, [sp, #4]
 800306c:	42a3      	cmp	r3, r4
 800306e:	d101      	bne.n	8003074 <__sinit+0x2c>
 8003070:	2301      	movs	r3, #1
 8003072:	61a3      	str	r3, [r4, #24]
 8003074:	0020      	movs	r0, r4
 8003076:	f000 f81f 	bl	80030b8 <__sfp>
 800307a:	6060      	str	r0, [r4, #4]
 800307c:	0020      	movs	r0, r4
 800307e:	f000 f81b 	bl	80030b8 <__sfp>
 8003082:	60a0      	str	r0, [r4, #8]
 8003084:	0020      	movs	r0, r4
 8003086:	f000 f817 	bl	80030b8 <__sfp>
 800308a:	2200      	movs	r2, #0
 800308c:	2104      	movs	r1, #4
 800308e:	60e0      	str	r0, [r4, #12]
 8003090:	6860      	ldr	r0, [r4, #4]
 8003092:	f7ff ff77 	bl	8002f84 <std>
 8003096:	2201      	movs	r2, #1
 8003098:	2109      	movs	r1, #9
 800309a:	68a0      	ldr	r0, [r4, #8]
 800309c:	f7ff ff72 	bl	8002f84 <std>
 80030a0:	2202      	movs	r2, #2
 80030a2:	2112      	movs	r1, #18
 80030a4:	68e0      	ldr	r0, [r4, #12]
 80030a6:	f7ff ff6d 	bl	8002f84 <std>
 80030aa:	2301      	movs	r3, #1
 80030ac:	61a3      	str	r3, [r4, #24]
 80030ae:	e7d2      	b.n	8003056 <__sinit+0xe>
 80030b0:	08003cf4 	.word	0x08003cf4
 80030b4:	08002fcd 	.word	0x08002fcd

080030b8 <__sfp>:
 80030b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ba:	0007      	movs	r7, r0
 80030bc:	f7ff ffa4 	bl	8003008 <__sfp_lock_acquire>
 80030c0:	4b1f      	ldr	r3, [pc, #124]	; (8003140 <__sfp+0x88>)
 80030c2:	681e      	ldr	r6, [r3, #0]
 80030c4:	69b3      	ldr	r3, [r6, #24]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d102      	bne.n	80030d0 <__sfp+0x18>
 80030ca:	0030      	movs	r0, r6
 80030cc:	f7ff ffbc 	bl	8003048 <__sinit>
 80030d0:	3648      	adds	r6, #72	; 0x48
 80030d2:	68b4      	ldr	r4, [r6, #8]
 80030d4:	6873      	ldr	r3, [r6, #4]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	d504      	bpl.n	80030e4 <__sfp+0x2c>
 80030da:	6833      	ldr	r3, [r6, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d022      	beq.n	8003126 <__sfp+0x6e>
 80030e0:	6836      	ldr	r6, [r6, #0]
 80030e2:	e7f6      	b.n	80030d2 <__sfp+0x1a>
 80030e4:	220c      	movs	r2, #12
 80030e6:	5ea5      	ldrsh	r5, [r4, r2]
 80030e8:	2d00      	cmp	r5, #0
 80030ea:	d11a      	bne.n	8003122 <__sfp+0x6a>
 80030ec:	0020      	movs	r0, r4
 80030ee:	4b15      	ldr	r3, [pc, #84]	; (8003144 <__sfp+0x8c>)
 80030f0:	3058      	adds	r0, #88	; 0x58
 80030f2:	60e3      	str	r3, [r4, #12]
 80030f4:	6665      	str	r5, [r4, #100]	; 0x64
 80030f6:	f000 f857 	bl	80031a8 <__retarget_lock_init_recursive>
 80030fa:	f7ff ff8d 	bl	8003018 <__sfp_lock_release>
 80030fe:	0020      	movs	r0, r4
 8003100:	2208      	movs	r2, #8
 8003102:	0029      	movs	r1, r5
 8003104:	6025      	str	r5, [r4, #0]
 8003106:	60a5      	str	r5, [r4, #8]
 8003108:	6065      	str	r5, [r4, #4]
 800310a:	6125      	str	r5, [r4, #16]
 800310c:	6165      	str	r5, [r4, #20]
 800310e:	61a5      	str	r5, [r4, #24]
 8003110:	305c      	adds	r0, #92	; 0x5c
 8003112:	f7ff fc63 	bl	80029dc <memset>
 8003116:	6365      	str	r5, [r4, #52]	; 0x34
 8003118:	63a5      	str	r5, [r4, #56]	; 0x38
 800311a:	64a5      	str	r5, [r4, #72]	; 0x48
 800311c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800311e:	0020      	movs	r0, r4
 8003120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003122:	3468      	adds	r4, #104	; 0x68
 8003124:	e7d7      	b.n	80030d6 <__sfp+0x1e>
 8003126:	2104      	movs	r1, #4
 8003128:	0038      	movs	r0, r7
 800312a:	f7ff ff57 	bl	8002fdc <__sfmoreglue>
 800312e:	1e04      	subs	r4, r0, #0
 8003130:	6030      	str	r0, [r6, #0]
 8003132:	d1d5      	bne.n	80030e0 <__sfp+0x28>
 8003134:	f7ff ff70 	bl	8003018 <__sfp_lock_release>
 8003138:	230c      	movs	r3, #12
 800313a:	603b      	str	r3, [r7, #0]
 800313c:	e7ef      	b.n	800311e <__sfp+0x66>
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	08003cf4 	.word	0x08003cf4
 8003144:	ffff0001 	.word	0xffff0001

08003148 <fiprintf>:
 8003148:	b40e      	push	{r1, r2, r3}
 800314a:	b503      	push	{r0, r1, lr}
 800314c:	0001      	movs	r1, r0
 800314e:	ab03      	add	r3, sp, #12
 8003150:	4804      	ldr	r0, [pc, #16]	; (8003164 <fiprintf+0x1c>)
 8003152:	cb04      	ldmia	r3!, {r2}
 8003154:	6800      	ldr	r0, [r0, #0]
 8003156:	9301      	str	r3, [sp, #4]
 8003158:	f000 f970 	bl	800343c <_vfiprintf_r>
 800315c:	b002      	add	sp, #8
 800315e:	bc08      	pop	{r3}
 8003160:	b003      	add	sp, #12
 8003162:	4718      	bx	r3
 8003164:	2000000c 	.word	0x2000000c

08003168 <_fwalk_reent>:
 8003168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800316a:	0004      	movs	r4, r0
 800316c:	0006      	movs	r6, r0
 800316e:	2700      	movs	r7, #0
 8003170:	9101      	str	r1, [sp, #4]
 8003172:	3448      	adds	r4, #72	; 0x48
 8003174:	6863      	ldr	r3, [r4, #4]
 8003176:	68a5      	ldr	r5, [r4, #8]
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	9b00      	ldr	r3, [sp, #0]
 800317c:	3b01      	subs	r3, #1
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	d504      	bpl.n	800318c <_fwalk_reent+0x24>
 8003182:	6824      	ldr	r4, [r4, #0]
 8003184:	2c00      	cmp	r4, #0
 8003186:	d1f5      	bne.n	8003174 <_fwalk_reent+0xc>
 8003188:	0038      	movs	r0, r7
 800318a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800318c:	89ab      	ldrh	r3, [r5, #12]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d908      	bls.n	80031a4 <_fwalk_reent+0x3c>
 8003192:	220e      	movs	r2, #14
 8003194:	5eab      	ldrsh	r3, [r5, r2]
 8003196:	3301      	adds	r3, #1
 8003198:	d004      	beq.n	80031a4 <_fwalk_reent+0x3c>
 800319a:	0029      	movs	r1, r5
 800319c:	0030      	movs	r0, r6
 800319e:	9b01      	ldr	r3, [sp, #4]
 80031a0:	4798      	blx	r3
 80031a2:	4307      	orrs	r7, r0
 80031a4:	3568      	adds	r5, #104	; 0x68
 80031a6:	e7e8      	b.n	800317a <_fwalk_reent+0x12>

080031a8 <__retarget_lock_init_recursive>:
 80031a8:	4770      	bx	lr

080031aa <__retarget_lock_acquire_recursive>:
 80031aa:	4770      	bx	lr

080031ac <__retarget_lock_release_recursive>:
 80031ac:	4770      	bx	lr
	...

080031b0 <__swhatbuf_r>:
 80031b0:	b570      	push	{r4, r5, r6, lr}
 80031b2:	000e      	movs	r6, r1
 80031b4:	001d      	movs	r5, r3
 80031b6:	230e      	movs	r3, #14
 80031b8:	5ec9      	ldrsh	r1, [r1, r3]
 80031ba:	0014      	movs	r4, r2
 80031bc:	b096      	sub	sp, #88	; 0x58
 80031be:	2900      	cmp	r1, #0
 80031c0:	da07      	bge.n	80031d2 <__swhatbuf_r+0x22>
 80031c2:	2300      	movs	r3, #0
 80031c4:	602b      	str	r3, [r5, #0]
 80031c6:	89b3      	ldrh	r3, [r6, #12]
 80031c8:	061b      	lsls	r3, r3, #24
 80031ca:	d411      	bmi.n	80031f0 <__swhatbuf_r+0x40>
 80031cc:	2380      	movs	r3, #128	; 0x80
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	e00f      	b.n	80031f2 <__swhatbuf_r+0x42>
 80031d2:	466a      	mov	r2, sp
 80031d4:	f000 fc7a 	bl	8003acc <_fstat_r>
 80031d8:	2800      	cmp	r0, #0
 80031da:	dbf2      	blt.n	80031c2 <__swhatbuf_r+0x12>
 80031dc:	23f0      	movs	r3, #240	; 0xf0
 80031de:	9901      	ldr	r1, [sp, #4]
 80031e0:	021b      	lsls	r3, r3, #8
 80031e2:	4019      	ands	r1, r3
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <__swhatbuf_r+0x4c>)
 80031e6:	18c9      	adds	r1, r1, r3
 80031e8:	424b      	negs	r3, r1
 80031ea:	4159      	adcs	r1, r3
 80031ec:	6029      	str	r1, [r5, #0]
 80031ee:	e7ed      	b.n	80031cc <__swhatbuf_r+0x1c>
 80031f0:	2340      	movs	r3, #64	; 0x40
 80031f2:	2000      	movs	r0, #0
 80031f4:	6023      	str	r3, [r4, #0]
 80031f6:	b016      	add	sp, #88	; 0x58
 80031f8:	bd70      	pop	{r4, r5, r6, pc}
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	ffffe000 	.word	0xffffe000

08003200 <__smakebuf_r>:
 8003200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003202:	2602      	movs	r6, #2
 8003204:	898b      	ldrh	r3, [r1, #12]
 8003206:	0005      	movs	r5, r0
 8003208:	000c      	movs	r4, r1
 800320a:	4233      	tst	r3, r6
 800320c:	d006      	beq.n	800321c <__smakebuf_r+0x1c>
 800320e:	0023      	movs	r3, r4
 8003210:	3347      	adds	r3, #71	; 0x47
 8003212:	6023      	str	r3, [r4, #0]
 8003214:	6123      	str	r3, [r4, #16]
 8003216:	2301      	movs	r3, #1
 8003218:	6163      	str	r3, [r4, #20]
 800321a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800321c:	466a      	mov	r2, sp
 800321e:	ab01      	add	r3, sp, #4
 8003220:	f7ff ffc6 	bl	80031b0 <__swhatbuf_r>
 8003224:	9900      	ldr	r1, [sp, #0]
 8003226:	0007      	movs	r7, r0
 8003228:	0028      	movs	r0, r5
 800322a:	f000 f881 	bl	8003330 <_malloc_r>
 800322e:	2800      	cmp	r0, #0
 8003230:	d108      	bne.n	8003244 <__smakebuf_r+0x44>
 8003232:	220c      	movs	r2, #12
 8003234:	5ea3      	ldrsh	r3, [r4, r2]
 8003236:	059a      	lsls	r2, r3, #22
 8003238:	d4ef      	bmi.n	800321a <__smakebuf_r+0x1a>
 800323a:	2203      	movs	r2, #3
 800323c:	4393      	bics	r3, r2
 800323e:	431e      	orrs	r6, r3
 8003240:	81a6      	strh	r6, [r4, #12]
 8003242:	e7e4      	b.n	800320e <__smakebuf_r+0xe>
 8003244:	4b0f      	ldr	r3, [pc, #60]	; (8003284 <__smakebuf_r+0x84>)
 8003246:	62ab      	str	r3, [r5, #40]	; 0x28
 8003248:	2380      	movs	r3, #128	; 0x80
 800324a:	89a2      	ldrh	r2, [r4, #12]
 800324c:	6020      	str	r0, [r4, #0]
 800324e:	4313      	orrs	r3, r2
 8003250:	81a3      	strh	r3, [r4, #12]
 8003252:	9b00      	ldr	r3, [sp, #0]
 8003254:	6120      	str	r0, [r4, #16]
 8003256:	6163      	str	r3, [r4, #20]
 8003258:	9b01      	ldr	r3, [sp, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00d      	beq.n	800327a <__smakebuf_r+0x7a>
 800325e:	0028      	movs	r0, r5
 8003260:	230e      	movs	r3, #14
 8003262:	5ee1      	ldrsh	r1, [r4, r3]
 8003264:	f000 fc44 	bl	8003af0 <_isatty_r>
 8003268:	2800      	cmp	r0, #0
 800326a:	d006      	beq.n	800327a <__smakebuf_r+0x7a>
 800326c:	2203      	movs	r2, #3
 800326e:	89a3      	ldrh	r3, [r4, #12]
 8003270:	4393      	bics	r3, r2
 8003272:	001a      	movs	r2, r3
 8003274:	2301      	movs	r3, #1
 8003276:	4313      	orrs	r3, r2
 8003278:	81a3      	strh	r3, [r4, #12]
 800327a:	89a0      	ldrh	r0, [r4, #12]
 800327c:	4307      	orrs	r7, r0
 800327e:	81a7      	strh	r7, [r4, #12]
 8003280:	e7cb      	b.n	800321a <__smakebuf_r+0x1a>
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	08002fcd 	.word	0x08002fcd

08003288 <malloc>:
 8003288:	b510      	push	{r4, lr}
 800328a:	4b03      	ldr	r3, [pc, #12]	; (8003298 <malloc+0x10>)
 800328c:	0001      	movs	r1, r0
 800328e:	6818      	ldr	r0, [r3, #0]
 8003290:	f000 f84e 	bl	8003330 <_malloc_r>
 8003294:	bd10      	pop	{r4, pc}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	2000000c 	.word	0x2000000c

0800329c <_free_r>:
 800329c:	b570      	push	{r4, r5, r6, lr}
 800329e:	0005      	movs	r5, r0
 80032a0:	2900      	cmp	r1, #0
 80032a2:	d010      	beq.n	80032c6 <_free_r+0x2a>
 80032a4:	1f0c      	subs	r4, r1, #4
 80032a6:	6823      	ldr	r3, [r4, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	da00      	bge.n	80032ae <_free_r+0x12>
 80032ac:	18e4      	adds	r4, r4, r3
 80032ae:	0028      	movs	r0, r5
 80032b0:	f000 fc50 	bl	8003b54 <__malloc_lock>
 80032b4:	4a1d      	ldr	r2, [pc, #116]	; (800332c <_free_r+0x90>)
 80032b6:	6813      	ldr	r3, [r2, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d105      	bne.n	80032c8 <_free_r+0x2c>
 80032bc:	6063      	str	r3, [r4, #4]
 80032be:	6014      	str	r4, [r2, #0]
 80032c0:	0028      	movs	r0, r5
 80032c2:	f000 fc4f 	bl	8003b64 <__malloc_unlock>
 80032c6:	bd70      	pop	{r4, r5, r6, pc}
 80032c8:	42a3      	cmp	r3, r4
 80032ca:	d908      	bls.n	80032de <_free_r+0x42>
 80032cc:	6821      	ldr	r1, [r4, #0]
 80032ce:	1860      	adds	r0, r4, r1
 80032d0:	4283      	cmp	r3, r0
 80032d2:	d1f3      	bne.n	80032bc <_free_r+0x20>
 80032d4:	6818      	ldr	r0, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	1841      	adds	r1, r0, r1
 80032da:	6021      	str	r1, [r4, #0]
 80032dc:	e7ee      	b.n	80032bc <_free_r+0x20>
 80032de:	001a      	movs	r2, r3
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <_free_r+0x4e>
 80032e6:	42a3      	cmp	r3, r4
 80032e8:	d9f9      	bls.n	80032de <_free_r+0x42>
 80032ea:	6811      	ldr	r1, [r2, #0]
 80032ec:	1850      	adds	r0, r2, r1
 80032ee:	42a0      	cmp	r0, r4
 80032f0:	d10b      	bne.n	800330a <_free_r+0x6e>
 80032f2:	6820      	ldr	r0, [r4, #0]
 80032f4:	1809      	adds	r1, r1, r0
 80032f6:	1850      	adds	r0, r2, r1
 80032f8:	6011      	str	r1, [r2, #0]
 80032fa:	4283      	cmp	r3, r0
 80032fc:	d1e0      	bne.n	80032c0 <_free_r+0x24>
 80032fe:	6818      	ldr	r0, [r3, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	1841      	adds	r1, r0, r1
 8003304:	6011      	str	r1, [r2, #0]
 8003306:	6053      	str	r3, [r2, #4]
 8003308:	e7da      	b.n	80032c0 <_free_r+0x24>
 800330a:	42a0      	cmp	r0, r4
 800330c:	d902      	bls.n	8003314 <_free_r+0x78>
 800330e:	230c      	movs	r3, #12
 8003310:	602b      	str	r3, [r5, #0]
 8003312:	e7d5      	b.n	80032c0 <_free_r+0x24>
 8003314:	6821      	ldr	r1, [r4, #0]
 8003316:	1860      	adds	r0, r4, r1
 8003318:	4283      	cmp	r3, r0
 800331a:	d103      	bne.n	8003324 <_free_r+0x88>
 800331c:	6818      	ldr	r0, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	1841      	adds	r1, r0, r1
 8003322:	6021      	str	r1, [r4, #0]
 8003324:	6063      	str	r3, [r4, #4]
 8003326:	6054      	str	r4, [r2, #4]
 8003328:	e7ca      	b.n	80032c0 <_free_r+0x24>
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	200001d4 	.word	0x200001d4

08003330 <_malloc_r>:
 8003330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003332:	2303      	movs	r3, #3
 8003334:	1ccd      	adds	r5, r1, #3
 8003336:	439d      	bics	r5, r3
 8003338:	3508      	adds	r5, #8
 800333a:	0006      	movs	r6, r0
 800333c:	2d0c      	cmp	r5, #12
 800333e:	d21f      	bcs.n	8003380 <_malloc_r+0x50>
 8003340:	250c      	movs	r5, #12
 8003342:	42a9      	cmp	r1, r5
 8003344:	d81e      	bhi.n	8003384 <_malloc_r+0x54>
 8003346:	0030      	movs	r0, r6
 8003348:	f000 fc04 	bl	8003b54 <__malloc_lock>
 800334c:	4925      	ldr	r1, [pc, #148]	; (80033e4 <_malloc_r+0xb4>)
 800334e:	680a      	ldr	r2, [r1, #0]
 8003350:	0014      	movs	r4, r2
 8003352:	2c00      	cmp	r4, #0
 8003354:	d11a      	bne.n	800338c <_malloc_r+0x5c>
 8003356:	4f24      	ldr	r7, [pc, #144]	; (80033e8 <_malloc_r+0xb8>)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d104      	bne.n	8003368 <_malloc_r+0x38>
 800335e:	0021      	movs	r1, r4
 8003360:	0030      	movs	r0, r6
 8003362:	f000 fb27 	bl	80039b4 <_sbrk_r>
 8003366:	6038      	str	r0, [r7, #0]
 8003368:	0029      	movs	r1, r5
 800336a:	0030      	movs	r0, r6
 800336c:	f000 fb22 	bl	80039b4 <_sbrk_r>
 8003370:	1c43      	adds	r3, r0, #1
 8003372:	d12b      	bne.n	80033cc <_malloc_r+0x9c>
 8003374:	230c      	movs	r3, #12
 8003376:	0030      	movs	r0, r6
 8003378:	6033      	str	r3, [r6, #0]
 800337a:	f000 fbf3 	bl	8003b64 <__malloc_unlock>
 800337e:	e003      	b.n	8003388 <_malloc_r+0x58>
 8003380:	2d00      	cmp	r5, #0
 8003382:	dade      	bge.n	8003342 <_malloc_r+0x12>
 8003384:	230c      	movs	r3, #12
 8003386:	6033      	str	r3, [r6, #0]
 8003388:	2000      	movs	r0, #0
 800338a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800338c:	6823      	ldr	r3, [r4, #0]
 800338e:	1b5b      	subs	r3, r3, r5
 8003390:	d419      	bmi.n	80033c6 <_malloc_r+0x96>
 8003392:	2b0b      	cmp	r3, #11
 8003394:	d903      	bls.n	800339e <_malloc_r+0x6e>
 8003396:	6023      	str	r3, [r4, #0]
 8003398:	18e4      	adds	r4, r4, r3
 800339a:	6025      	str	r5, [r4, #0]
 800339c:	e003      	b.n	80033a6 <_malloc_r+0x76>
 800339e:	6863      	ldr	r3, [r4, #4]
 80033a0:	42a2      	cmp	r2, r4
 80033a2:	d10e      	bne.n	80033c2 <_malloc_r+0x92>
 80033a4:	600b      	str	r3, [r1, #0]
 80033a6:	0030      	movs	r0, r6
 80033a8:	f000 fbdc 	bl	8003b64 <__malloc_unlock>
 80033ac:	0020      	movs	r0, r4
 80033ae:	2207      	movs	r2, #7
 80033b0:	300b      	adds	r0, #11
 80033b2:	1d23      	adds	r3, r4, #4
 80033b4:	4390      	bics	r0, r2
 80033b6:	1ac2      	subs	r2, r0, r3
 80033b8:	4298      	cmp	r0, r3
 80033ba:	d0e6      	beq.n	800338a <_malloc_r+0x5a>
 80033bc:	1a1b      	subs	r3, r3, r0
 80033be:	50a3      	str	r3, [r4, r2]
 80033c0:	e7e3      	b.n	800338a <_malloc_r+0x5a>
 80033c2:	6053      	str	r3, [r2, #4]
 80033c4:	e7ef      	b.n	80033a6 <_malloc_r+0x76>
 80033c6:	0022      	movs	r2, r4
 80033c8:	6864      	ldr	r4, [r4, #4]
 80033ca:	e7c2      	b.n	8003352 <_malloc_r+0x22>
 80033cc:	2303      	movs	r3, #3
 80033ce:	1cc4      	adds	r4, r0, #3
 80033d0:	439c      	bics	r4, r3
 80033d2:	42a0      	cmp	r0, r4
 80033d4:	d0e1      	beq.n	800339a <_malloc_r+0x6a>
 80033d6:	1a21      	subs	r1, r4, r0
 80033d8:	0030      	movs	r0, r6
 80033da:	f000 faeb 	bl	80039b4 <_sbrk_r>
 80033de:	1c43      	adds	r3, r0, #1
 80033e0:	d1db      	bne.n	800339a <_malloc_r+0x6a>
 80033e2:	e7c7      	b.n	8003374 <_malloc_r+0x44>
 80033e4:	200001d4 	.word	0x200001d4
 80033e8:	200001d8 	.word	0x200001d8

080033ec <__sfputc_r>:
 80033ec:	6893      	ldr	r3, [r2, #8]
 80033ee:	b510      	push	{r4, lr}
 80033f0:	3b01      	subs	r3, #1
 80033f2:	6093      	str	r3, [r2, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	da04      	bge.n	8003402 <__sfputc_r+0x16>
 80033f8:	6994      	ldr	r4, [r2, #24]
 80033fa:	42a3      	cmp	r3, r4
 80033fc:	db07      	blt.n	800340e <__sfputc_r+0x22>
 80033fe:	290a      	cmp	r1, #10
 8003400:	d005      	beq.n	800340e <__sfputc_r+0x22>
 8003402:	6813      	ldr	r3, [r2, #0]
 8003404:	1c58      	adds	r0, r3, #1
 8003406:	6010      	str	r0, [r2, #0]
 8003408:	7019      	strb	r1, [r3, #0]
 800340a:	0008      	movs	r0, r1
 800340c:	bd10      	pop	{r4, pc}
 800340e:	f7ff fc01 	bl	8002c14 <__swbuf_r>
 8003412:	0001      	movs	r1, r0
 8003414:	e7f9      	b.n	800340a <__sfputc_r+0x1e>

08003416 <__sfputs_r>:
 8003416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003418:	0006      	movs	r6, r0
 800341a:	000f      	movs	r7, r1
 800341c:	0014      	movs	r4, r2
 800341e:	18d5      	adds	r5, r2, r3
 8003420:	42ac      	cmp	r4, r5
 8003422:	d101      	bne.n	8003428 <__sfputs_r+0x12>
 8003424:	2000      	movs	r0, #0
 8003426:	e007      	b.n	8003438 <__sfputs_r+0x22>
 8003428:	7821      	ldrb	r1, [r4, #0]
 800342a:	003a      	movs	r2, r7
 800342c:	0030      	movs	r0, r6
 800342e:	f7ff ffdd 	bl	80033ec <__sfputc_r>
 8003432:	3401      	adds	r4, #1
 8003434:	1c43      	adds	r3, r0, #1
 8003436:	d1f3      	bne.n	8003420 <__sfputs_r+0xa>
 8003438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800343c <_vfiprintf_r>:
 800343c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800343e:	b0a1      	sub	sp, #132	; 0x84
 8003440:	0006      	movs	r6, r0
 8003442:	000c      	movs	r4, r1
 8003444:	001f      	movs	r7, r3
 8003446:	9203      	str	r2, [sp, #12]
 8003448:	2800      	cmp	r0, #0
 800344a:	d004      	beq.n	8003456 <_vfiprintf_r+0x1a>
 800344c:	6983      	ldr	r3, [r0, #24]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <_vfiprintf_r+0x1a>
 8003452:	f7ff fdf9 	bl	8003048 <__sinit>
 8003456:	4b8e      	ldr	r3, [pc, #568]	; (8003690 <_vfiprintf_r+0x254>)
 8003458:	429c      	cmp	r4, r3
 800345a:	d11c      	bne.n	8003496 <_vfiprintf_r+0x5a>
 800345c:	6874      	ldr	r4, [r6, #4]
 800345e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003460:	07db      	lsls	r3, r3, #31
 8003462:	d405      	bmi.n	8003470 <_vfiprintf_r+0x34>
 8003464:	89a3      	ldrh	r3, [r4, #12]
 8003466:	059b      	lsls	r3, r3, #22
 8003468:	d402      	bmi.n	8003470 <_vfiprintf_r+0x34>
 800346a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800346c:	f7ff fe9d 	bl	80031aa <__retarget_lock_acquire_recursive>
 8003470:	89a3      	ldrh	r3, [r4, #12]
 8003472:	071b      	lsls	r3, r3, #28
 8003474:	d502      	bpl.n	800347c <_vfiprintf_r+0x40>
 8003476:	6923      	ldr	r3, [r4, #16]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d11d      	bne.n	80034b8 <_vfiprintf_r+0x7c>
 800347c:	0021      	movs	r1, r4
 800347e:	0030      	movs	r0, r6
 8003480:	f7ff fc1e 	bl	8002cc0 <__swsetup_r>
 8003484:	2800      	cmp	r0, #0
 8003486:	d017      	beq.n	80034b8 <_vfiprintf_r+0x7c>
 8003488:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800348a:	07db      	lsls	r3, r3, #31
 800348c:	d50d      	bpl.n	80034aa <_vfiprintf_r+0x6e>
 800348e:	2001      	movs	r0, #1
 8003490:	4240      	negs	r0, r0
 8003492:	b021      	add	sp, #132	; 0x84
 8003494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003496:	4b7f      	ldr	r3, [pc, #508]	; (8003694 <_vfiprintf_r+0x258>)
 8003498:	429c      	cmp	r4, r3
 800349a:	d101      	bne.n	80034a0 <_vfiprintf_r+0x64>
 800349c:	68b4      	ldr	r4, [r6, #8]
 800349e:	e7de      	b.n	800345e <_vfiprintf_r+0x22>
 80034a0:	4b7d      	ldr	r3, [pc, #500]	; (8003698 <_vfiprintf_r+0x25c>)
 80034a2:	429c      	cmp	r4, r3
 80034a4:	d1db      	bne.n	800345e <_vfiprintf_r+0x22>
 80034a6:	68f4      	ldr	r4, [r6, #12]
 80034a8:	e7d9      	b.n	800345e <_vfiprintf_r+0x22>
 80034aa:	89a3      	ldrh	r3, [r4, #12]
 80034ac:	059b      	lsls	r3, r3, #22
 80034ae:	d4ee      	bmi.n	800348e <_vfiprintf_r+0x52>
 80034b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034b2:	f7ff fe7b 	bl	80031ac <__retarget_lock_release_recursive>
 80034b6:	e7ea      	b.n	800348e <_vfiprintf_r+0x52>
 80034b8:	2300      	movs	r3, #0
 80034ba:	ad08      	add	r5, sp, #32
 80034bc:	616b      	str	r3, [r5, #20]
 80034be:	3320      	adds	r3, #32
 80034c0:	766b      	strb	r3, [r5, #25]
 80034c2:	3310      	adds	r3, #16
 80034c4:	76ab      	strb	r3, [r5, #26]
 80034c6:	9707      	str	r7, [sp, #28]
 80034c8:	9f03      	ldr	r7, [sp, #12]
 80034ca:	783b      	ldrb	r3, [r7, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <_vfiprintf_r+0x98>
 80034d0:	2b25      	cmp	r3, #37	; 0x25
 80034d2:	d14e      	bne.n	8003572 <_vfiprintf_r+0x136>
 80034d4:	9b03      	ldr	r3, [sp, #12]
 80034d6:	1afb      	subs	r3, r7, r3
 80034d8:	9305      	str	r3, [sp, #20]
 80034da:	9b03      	ldr	r3, [sp, #12]
 80034dc:	429f      	cmp	r7, r3
 80034de:	d00d      	beq.n	80034fc <_vfiprintf_r+0xc0>
 80034e0:	9b05      	ldr	r3, [sp, #20]
 80034e2:	0021      	movs	r1, r4
 80034e4:	0030      	movs	r0, r6
 80034e6:	9a03      	ldr	r2, [sp, #12]
 80034e8:	f7ff ff95 	bl	8003416 <__sfputs_r>
 80034ec:	1c43      	adds	r3, r0, #1
 80034ee:	d100      	bne.n	80034f2 <_vfiprintf_r+0xb6>
 80034f0:	e0b5      	b.n	800365e <_vfiprintf_r+0x222>
 80034f2:	696a      	ldr	r2, [r5, #20]
 80034f4:	9b05      	ldr	r3, [sp, #20]
 80034f6:	4694      	mov	ip, r2
 80034f8:	4463      	add	r3, ip
 80034fa:	616b      	str	r3, [r5, #20]
 80034fc:	783b      	ldrb	r3, [r7, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d100      	bne.n	8003504 <_vfiprintf_r+0xc8>
 8003502:	e0ac      	b.n	800365e <_vfiprintf_r+0x222>
 8003504:	2201      	movs	r2, #1
 8003506:	1c7b      	adds	r3, r7, #1
 8003508:	9303      	str	r3, [sp, #12]
 800350a:	2300      	movs	r3, #0
 800350c:	4252      	negs	r2, r2
 800350e:	606a      	str	r2, [r5, #4]
 8003510:	a904      	add	r1, sp, #16
 8003512:	3254      	adds	r2, #84	; 0x54
 8003514:	1852      	adds	r2, r2, r1
 8003516:	602b      	str	r3, [r5, #0]
 8003518:	60eb      	str	r3, [r5, #12]
 800351a:	60ab      	str	r3, [r5, #8]
 800351c:	7013      	strb	r3, [r2, #0]
 800351e:	65ab      	str	r3, [r5, #88]	; 0x58
 8003520:	9b03      	ldr	r3, [sp, #12]
 8003522:	2205      	movs	r2, #5
 8003524:	7819      	ldrb	r1, [r3, #0]
 8003526:	485d      	ldr	r0, [pc, #372]	; (800369c <_vfiprintf_r+0x260>)
 8003528:	f000 fb08 	bl	8003b3c <memchr>
 800352c:	9b03      	ldr	r3, [sp, #12]
 800352e:	1c5f      	adds	r7, r3, #1
 8003530:	2800      	cmp	r0, #0
 8003532:	d120      	bne.n	8003576 <_vfiprintf_r+0x13a>
 8003534:	682a      	ldr	r2, [r5, #0]
 8003536:	06d3      	lsls	r3, r2, #27
 8003538:	d504      	bpl.n	8003544 <_vfiprintf_r+0x108>
 800353a:	2353      	movs	r3, #83	; 0x53
 800353c:	a904      	add	r1, sp, #16
 800353e:	185b      	adds	r3, r3, r1
 8003540:	2120      	movs	r1, #32
 8003542:	7019      	strb	r1, [r3, #0]
 8003544:	0713      	lsls	r3, r2, #28
 8003546:	d504      	bpl.n	8003552 <_vfiprintf_r+0x116>
 8003548:	2353      	movs	r3, #83	; 0x53
 800354a:	a904      	add	r1, sp, #16
 800354c:	185b      	adds	r3, r3, r1
 800354e:	212b      	movs	r1, #43	; 0x2b
 8003550:	7019      	strb	r1, [r3, #0]
 8003552:	9b03      	ldr	r3, [sp, #12]
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	2b2a      	cmp	r3, #42	; 0x2a
 8003558:	d016      	beq.n	8003588 <_vfiprintf_r+0x14c>
 800355a:	2100      	movs	r1, #0
 800355c:	68eb      	ldr	r3, [r5, #12]
 800355e:	9f03      	ldr	r7, [sp, #12]
 8003560:	783a      	ldrb	r2, [r7, #0]
 8003562:	1c78      	adds	r0, r7, #1
 8003564:	3a30      	subs	r2, #48	; 0x30
 8003566:	4684      	mov	ip, r0
 8003568:	2a09      	cmp	r2, #9
 800356a:	d94f      	bls.n	800360c <_vfiprintf_r+0x1d0>
 800356c:	2900      	cmp	r1, #0
 800356e:	d111      	bne.n	8003594 <_vfiprintf_r+0x158>
 8003570:	e017      	b.n	80035a2 <_vfiprintf_r+0x166>
 8003572:	3701      	adds	r7, #1
 8003574:	e7a9      	b.n	80034ca <_vfiprintf_r+0x8e>
 8003576:	4b49      	ldr	r3, [pc, #292]	; (800369c <_vfiprintf_r+0x260>)
 8003578:	682a      	ldr	r2, [r5, #0]
 800357a:	1ac0      	subs	r0, r0, r3
 800357c:	2301      	movs	r3, #1
 800357e:	4083      	lsls	r3, r0
 8003580:	4313      	orrs	r3, r2
 8003582:	602b      	str	r3, [r5, #0]
 8003584:	9703      	str	r7, [sp, #12]
 8003586:	e7cb      	b.n	8003520 <_vfiprintf_r+0xe4>
 8003588:	9b07      	ldr	r3, [sp, #28]
 800358a:	1d19      	adds	r1, r3, #4
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	9107      	str	r1, [sp, #28]
 8003590:	2b00      	cmp	r3, #0
 8003592:	db01      	blt.n	8003598 <_vfiprintf_r+0x15c>
 8003594:	930b      	str	r3, [sp, #44]	; 0x2c
 8003596:	e004      	b.n	80035a2 <_vfiprintf_r+0x166>
 8003598:	425b      	negs	r3, r3
 800359a:	60eb      	str	r3, [r5, #12]
 800359c:	2302      	movs	r3, #2
 800359e:	4313      	orrs	r3, r2
 80035a0:	602b      	str	r3, [r5, #0]
 80035a2:	783b      	ldrb	r3, [r7, #0]
 80035a4:	2b2e      	cmp	r3, #46	; 0x2e
 80035a6:	d10a      	bne.n	80035be <_vfiprintf_r+0x182>
 80035a8:	787b      	ldrb	r3, [r7, #1]
 80035aa:	2b2a      	cmp	r3, #42	; 0x2a
 80035ac:	d137      	bne.n	800361e <_vfiprintf_r+0x1e2>
 80035ae:	9b07      	ldr	r3, [sp, #28]
 80035b0:	3702      	adds	r7, #2
 80035b2:	1d1a      	adds	r2, r3, #4
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	9207      	str	r2, [sp, #28]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	db2d      	blt.n	8003618 <_vfiprintf_r+0x1dc>
 80035bc:	9309      	str	r3, [sp, #36]	; 0x24
 80035be:	2203      	movs	r2, #3
 80035c0:	7839      	ldrb	r1, [r7, #0]
 80035c2:	4837      	ldr	r0, [pc, #220]	; (80036a0 <_vfiprintf_r+0x264>)
 80035c4:	f000 faba 	bl	8003b3c <memchr>
 80035c8:	2800      	cmp	r0, #0
 80035ca:	d007      	beq.n	80035dc <_vfiprintf_r+0x1a0>
 80035cc:	4b34      	ldr	r3, [pc, #208]	; (80036a0 <_vfiprintf_r+0x264>)
 80035ce:	682a      	ldr	r2, [r5, #0]
 80035d0:	1ac0      	subs	r0, r0, r3
 80035d2:	2340      	movs	r3, #64	; 0x40
 80035d4:	4083      	lsls	r3, r0
 80035d6:	4313      	orrs	r3, r2
 80035d8:	3701      	adds	r7, #1
 80035da:	602b      	str	r3, [r5, #0]
 80035dc:	7839      	ldrb	r1, [r7, #0]
 80035de:	1c7b      	adds	r3, r7, #1
 80035e0:	2206      	movs	r2, #6
 80035e2:	4830      	ldr	r0, [pc, #192]	; (80036a4 <_vfiprintf_r+0x268>)
 80035e4:	9303      	str	r3, [sp, #12]
 80035e6:	7629      	strb	r1, [r5, #24]
 80035e8:	f000 faa8 	bl	8003b3c <memchr>
 80035ec:	2800      	cmp	r0, #0
 80035ee:	d045      	beq.n	800367c <_vfiprintf_r+0x240>
 80035f0:	4b2d      	ldr	r3, [pc, #180]	; (80036a8 <_vfiprintf_r+0x26c>)
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d127      	bne.n	8003646 <_vfiprintf_r+0x20a>
 80035f6:	2207      	movs	r2, #7
 80035f8:	9b07      	ldr	r3, [sp, #28]
 80035fa:	3307      	adds	r3, #7
 80035fc:	4393      	bics	r3, r2
 80035fe:	3308      	adds	r3, #8
 8003600:	9307      	str	r3, [sp, #28]
 8003602:	696b      	ldr	r3, [r5, #20]
 8003604:	9a04      	ldr	r2, [sp, #16]
 8003606:	189b      	adds	r3, r3, r2
 8003608:	616b      	str	r3, [r5, #20]
 800360a:	e75d      	b.n	80034c8 <_vfiprintf_r+0x8c>
 800360c:	210a      	movs	r1, #10
 800360e:	434b      	muls	r3, r1
 8003610:	4667      	mov	r7, ip
 8003612:	189b      	adds	r3, r3, r2
 8003614:	3909      	subs	r1, #9
 8003616:	e7a3      	b.n	8003560 <_vfiprintf_r+0x124>
 8003618:	2301      	movs	r3, #1
 800361a:	425b      	negs	r3, r3
 800361c:	e7ce      	b.n	80035bc <_vfiprintf_r+0x180>
 800361e:	2300      	movs	r3, #0
 8003620:	001a      	movs	r2, r3
 8003622:	3701      	adds	r7, #1
 8003624:	606b      	str	r3, [r5, #4]
 8003626:	7839      	ldrb	r1, [r7, #0]
 8003628:	1c78      	adds	r0, r7, #1
 800362a:	3930      	subs	r1, #48	; 0x30
 800362c:	4684      	mov	ip, r0
 800362e:	2909      	cmp	r1, #9
 8003630:	d903      	bls.n	800363a <_vfiprintf_r+0x1fe>
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0c3      	beq.n	80035be <_vfiprintf_r+0x182>
 8003636:	9209      	str	r2, [sp, #36]	; 0x24
 8003638:	e7c1      	b.n	80035be <_vfiprintf_r+0x182>
 800363a:	230a      	movs	r3, #10
 800363c:	435a      	muls	r2, r3
 800363e:	4667      	mov	r7, ip
 8003640:	1852      	adds	r2, r2, r1
 8003642:	3b09      	subs	r3, #9
 8003644:	e7ef      	b.n	8003626 <_vfiprintf_r+0x1ea>
 8003646:	ab07      	add	r3, sp, #28
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	0022      	movs	r2, r4
 800364c:	0029      	movs	r1, r5
 800364e:	0030      	movs	r0, r6
 8003650:	4b16      	ldr	r3, [pc, #88]	; (80036ac <_vfiprintf_r+0x270>)
 8003652:	e000      	b.n	8003656 <_vfiprintf_r+0x21a>
 8003654:	bf00      	nop
 8003656:	9004      	str	r0, [sp, #16]
 8003658:	9b04      	ldr	r3, [sp, #16]
 800365a:	3301      	adds	r3, #1
 800365c:	d1d1      	bne.n	8003602 <_vfiprintf_r+0x1c6>
 800365e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003660:	07db      	lsls	r3, r3, #31
 8003662:	d405      	bmi.n	8003670 <_vfiprintf_r+0x234>
 8003664:	89a3      	ldrh	r3, [r4, #12]
 8003666:	059b      	lsls	r3, r3, #22
 8003668:	d402      	bmi.n	8003670 <_vfiprintf_r+0x234>
 800366a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800366c:	f7ff fd9e 	bl	80031ac <__retarget_lock_release_recursive>
 8003670:	89a3      	ldrh	r3, [r4, #12]
 8003672:	065b      	lsls	r3, r3, #25
 8003674:	d500      	bpl.n	8003678 <_vfiprintf_r+0x23c>
 8003676:	e70a      	b.n	800348e <_vfiprintf_r+0x52>
 8003678:	980d      	ldr	r0, [sp, #52]	; 0x34
 800367a:	e70a      	b.n	8003492 <_vfiprintf_r+0x56>
 800367c:	ab07      	add	r3, sp, #28
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	0022      	movs	r2, r4
 8003682:	0029      	movs	r1, r5
 8003684:	0030      	movs	r0, r6
 8003686:	4b09      	ldr	r3, [pc, #36]	; (80036ac <_vfiprintf_r+0x270>)
 8003688:	f000 f882 	bl	8003790 <_printf_i>
 800368c:	e7e3      	b.n	8003656 <_vfiprintf_r+0x21a>
 800368e:	46c0      	nop			; (mov r8, r8)
 8003690:	08003ed0 	.word	0x08003ed0
 8003694:	08003ef0 	.word	0x08003ef0
 8003698:	08003eb0 	.word	0x08003eb0
 800369c:	08003f10 	.word	0x08003f10
 80036a0:	08003f16 	.word	0x08003f16
 80036a4:	08003f1a 	.word	0x08003f1a
 80036a8:	00000000 	.word	0x00000000
 80036ac:	08003417 	.word	0x08003417

080036b0 <_printf_common>:
 80036b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036b2:	0015      	movs	r5, r2
 80036b4:	9301      	str	r3, [sp, #4]
 80036b6:	688a      	ldr	r2, [r1, #8]
 80036b8:	690b      	ldr	r3, [r1, #16]
 80036ba:	000c      	movs	r4, r1
 80036bc:	9000      	str	r0, [sp, #0]
 80036be:	4293      	cmp	r3, r2
 80036c0:	da00      	bge.n	80036c4 <_printf_common+0x14>
 80036c2:	0013      	movs	r3, r2
 80036c4:	0022      	movs	r2, r4
 80036c6:	602b      	str	r3, [r5, #0]
 80036c8:	3243      	adds	r2, #67	; 0x43
 80036ca:	7812      	ldrb	r2, [r2, #0]
 80036cc:	2a00      	cmp	r2, #0
 80036ce:	d001      	beq.n	80036d4 <_printf_common+0x24>
 80036d0:	3301      	adds	r3, #1
 80036d2:	602b      	str	r3, [r5, #0]
 80036d4:	6823      	ldr	r3, [r4, #0]
 80036d6:	069b      	lsls	r3, r3, #26
 80036d8:	d502      	bpl.n	80036e0 <_printf_common+0x30>
 80036da:	682b      	ldr	r3, [r5, #0]
 80036dc:	3302      	adds	r3, #2
 80036de:	602b      	str	r3, [r5, #0]
 80036e0:	6822      	ldr	r2, [r4, #0]
 80036e2:	2306      	movs	r3, #6
 80036e4:	0017      	movs	r7, r2
 80036e6:	401f      	ands	r7, r3
 80036e8:	421a      	tst	r2, r3
 80036ea:	d027      	beq.n	800373c <_printf_common+0x8c>
 80036ec:	0023      	movs	r3, r4
 80036ee:	3343      	adds	r3, #67	; 0x43
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	1e5a      	subs	r2, r3, #1
 80036f4:	4193      	sbcs	r3, r2
 80036f6:	6822      	ldr	r2, [r4, #0]
 80036f8:	0692      	lsls	r2, r2, #26
 80036fa:	d430      	bmi.n	800375e <_printf_common+0xae>
 80036fc:	0022      	movs	r2, r4
 80036fe:	9901      	ldr	r1, [sp, #4]
 8003700:	9800      	ldr	r0, [sp, #0]
 8003702:	9e08      	ldr	r6, [sp, #32]
 8003704:	3243      	adds	r2, #67	; 0x43
 8003706:	47b0      	blx	r6
 8003708:	1c43      	adds	r3, r0, #1
 800370a:	d025      	beq.n	8003758 <_printf_common+0xa8>
 800370c:	2306      	movs	r3, #6
 800370e:	6820      	ldr	r0, [r4, #0]
 8003710:	682a      	ldr	r2, [r5, #0]
 8003712:	68e1      	ldr	r1, [r4, #12]
 8003714:	2500      	movs	r5, #0
 8003716:	4003      	ands	r3, r0
 8003718:	2b04      	cmp	r3, #4
 800371a:	d103      	bne.n	8003724 <_printf_common+0x74>
 800371c:	1a8d      	subs	r5, r1, r2
 800371e:	43eb      	mvns	r3, r5
 8003720:	17db      	asrs	r3, r3, #31
 8003722:	401d      	ands	r5, r3
 8003724:	68a3      	ldr	r3, [r4, #8]
 8003726:	6922      	ldr	r2, [r4, #16]
 8003728:	4293      	cmp	r3, r2
 800372a:	dd01      	ble.n	8003730 <_printf_common+0x80>
 800372c:	1a9b      	subs	r3, r3, r2
 800372e:	18ed      	adds	r5, r5, r3
 8003730:	2700      	movs	r7, #0
 8003732:	42bd      	cmp	r5, r7
 8003734:	d120      	bne.n	8003778 <_printf_common+0xc8>
 8003736:	2000      	movs	r0, #0
 8003738:	e010      	b.n	800375c <_printf_common+0xac>
 800373a:	3701      	adds	r7, #1
 800373c:	68e3      	ldr	r3, [r4, #12]
 800373e:	682a      	ldr	r2, [r5, #0]
 8003740:	1a9b      	subs	r3, r3, r2
 8003742:	42bb      	cmp	r3, r7
 8003744:	ddd2      	ble.n	80036ec <_printf_common+0x3c>
 8003746:	0022      	movs	r2, r4
 8003748:	2301      	movs	r3, #1
 800374a:	9901      	ldr	r1, [sp, #4]
 800374c:	9800      	ldr	r0, [sp, #0]
 800374e:	9e08      	ldr	r6, [sp, #32]
 8003750:	3219      	adds	r2, #25
 8003752:	47b0      	blx	r6
 8003754:	1c43      	adds	r3, r0, #1
 8003756:	d1f0      	bne.n	800373a <_printf_common+0x8a>
 8003758:	2001      	movs	r0, #1
 800375a:	4240      	negs	r0, r0
 800375c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800375e:	2030      	movs	r0, #48	; 0x30
 8003760:	18e1      	adds	r1, r4, r3
 8003762:	3143      	adds	r1, #67	; 0x43
 8003764:	7008      	strb	r0, [r1, #0]
 8003766:	0021      	movs	r1, r4
 8003768:	1c5a      	adds	r2, r3, #1
 800376a:	3145      	adds	r1, #69	; 0x45
 800376c:	7809      	ldrb	r1, [r1, #0]
 800376e:	18a2      	adds	r2, r4, r2
 8003770:	3243      	adds	r2, #67	; 0x43
 8003772:	3302      	adds	r3, #2
 8003774:	7011      	strb	r1, [r2, #0]
 8003776:	e7c1      	b.n	80036fc <_printf_common+0x4c>
 8003778:	0022      	movs	r2, r4
 800377a:	2301      	movs	r3, #1
 800377c:	9901      	ldr	r1, [sp, #4]
 800377e:	9800      	ldr	r0, [sp, #0]
 8003780:	9e08      	ldr	r6, [sp, #32]
 8003782:	321a      	adds	r2, #26
 8003784:	47b0      	blx	r6
 8003786:	1c43      	adds	r3, r0, #1
 8003788:	d0e6      	beq.n	8003758 <_printf_common+0xa8>
 800378a:	3701      	adds	r7, #1
 800378c:	e7d1      	b.n	8003732 <_printf_common+0x82>
	...

08003790 <_printf_i>:
 8003790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003792:	b08b      	sub	sp, #44	; 0x2c
 8003794:	9206      	str	r2, [sp, #24]
 8003796:	000a      	movs	r2, r1
 8003798:	3243      	adds	r2, #67	; 0x43
 800379a:	9307      	str	r3, [sp, #28]
 800379c:	9005      	str	r0, [sp, #20]
 800379e:	9204      	str	r2, [sp, #16]
 80037a0:	7e0a      	ldrb	r2, [r1, #24]
 80037a2:	000c      	movs	r4, r1
 80037a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80037a6:	2a78      	cmp	r2, #120	; 0x78
 80037a8:	d806      	bhi.n	80037b8 <_printf_i+0x28>
 80037aa:	2a62      	cmp	r2, #98	; 0x62
 80037ac:	d808      	bhi.n	80037c0 <_printf_i+0x30>
 80037ae:	2a00      	cmp	r2, #0
 80037b0:	d100      	bne.n	80037b4 <_printf_i+0x24>
 80037b2:	e0c0      	b.n	8003936 <_printf_i+0x1a6>
 80037b4:	2a58      	cmp	r2, #88	; 0x58
 80037b6:	d052      	beq.n	800385e <_printf_i+0xce>
 80037b8:	0026      	movs	r6, r4
 80037ba:	3642      	adds	r6, #66	; 0x42
 80037bc:	7032      	strb	r2, [r6, #0]
 80037be:	e022      	b.n	8003806 <_printf_i+0x76>
 80037c0:	0010      	movs	r0, r2
 80037c2:	3863      	subs	r0, #99	; 0x63
 80037c4:	2815      	cmp	r0, #21
 80037c6:	d8f7      	bhi.n	80037b8 <_printf_i+0x28>
 80037c8:	f7fc fc9e 	bl	8000108 <__gnu_thumb1_case_shi>
 80037cc:	001f0016 	.word	0x001f0016
 80037d0:	fff6fff6 	.word	0xfff6fff6
 80037d4:	fff6fff6 	.word	0xfff6fff6
 80037d8:	fff6001f 	.word	0xfff6001f
 80037dc:	fff6fff6 	.word	0xfff6fff6
 80037e0:	00a8fff6 	.word	0x00a8fff6
 80037e4:	009a0036 	.word	0x009a0036
 80037e8:	fff6fff6 	.word	0xfff6fff6
 80037ec:	fff600b9 	.word	0xfff600b9
 80037f0:	fff60036 	.word	0xfff60036
 80037f4:	009efff6 	.word	0x009efff6
 80037f8:	0026      	movs	r6, r4
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	3642      	adds	r6, #66	; 0x42
 80037fe:	1d11      	adds	r1, r2, #4
 8003800:	6019      	str	r1, [r3, #0]
 8003802:	6813      	ldr	r3, [r2, #0]
 8003804:	7033      	strb	r3, [r6, #0]
 8003806:	2301      	movs	r3, #1
 8003808:	e0a7      	b.n	800395a <_printf_i+0x1ca>
 800380a:	6808      	ldr	r0, [r1, #0]
 800380c:	6819      	ldr	r1, [r3, #0]
 800380e:	1d0a      	adds	r2, r1, #4
 8003810:	0605      	lsls	r5, r0, #24
 8003812:	d50b      	bpl.n	800382c <_printf_i+0x9c>
 8003814:	680d      	ldr	r5, [r1, #0]
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	2d00      	cmp	r5, #0
 800381a:	da03      	bge.n	8003824 <_printf_i+0x94>
 800381c:	232d      	movs	r3, #45	; 0x2d
 800381e:	9a04      	ldr	r2, [sp, #16]
 8003820:	426d      	negs	r5, r5
 8003822:	7013      	strb	r3, [r2, #0]
 8003824:	4b61      	ldr	r3, [pc, #388]	; (80039ac <_printf_i+0x21c>)
 8003826:	270a      	movs	r7, #10
 8003828:	9303      	str	r3, [sp, #12]
 800382a:	e032      	b.n	8003892 <_printf_i+0x102>
 800382c:	680d      	ldr	r5, [r1, #0]
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	0641      	lsls	r1, r0, #25
 8003832:	d5f1      	bpl.n	8003818 <_printf_i+0x88>
 8003834:	b22d      	sxth	r5, r5
 8003836:	e7ef      	b.n	8003818 <_printf_i+0x88>
 8003838:	680d      	ldr	r5, [r1, #0]
 800383a:	6819      	ldr	r1, [r3, #0]
 800383c:	1d08      	adds	r0, r1, #4
 800383e:	6018      	str	r0, [r3, #0]
 8003840:	062e      	lsls	r6, r5, #24
 8003842:	d501      	bpl.n	8003848 <_printf_i+0xb8>
 8003844:	680d      	ldr	r5, [r1, #0]
 8003846:	e003      	b.n	8003850 <_printf_i+0xc0>
 8003848:	066d      	lsls	r5, r5, #25
 800384a:	d5fb      	bpl.n	8003844 <_printf_i+0xb4>
 800384c:	680d      	ldr	r5, [r1, #0]
 800384e:	b2ad      	uxth	r5, r5
 8003850:	4b56      	ldr	r3, [pc, #344]	; (80039ac <_printf_i+0x21c>)
 8003852:	270a      	movs	r7, #10
 8003854:	9303      	str	r3, [sp, #12]
 8003856:	2a6f      	cmp	r2, #111	; 0x6f
 8003858:	d117      	bne.n	800388a <_printf_i+0xfa>
 800385a:	2708      	movs	r7, #8
 800385c:	e015      	b.n	800388a <_printf_i+0xfa>
 800385e:	3145      	adds	r1, #69	; 0x45
 8003860:	700a      	strb	r2, [r1, #0]
 8003862:	4a52      	ldr	r2, [pc, #328]	; (80039ac <_printf_i+0x21c>)
 8003864:	9203      	str	r2, [sp, #12]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	6821      	ldr	r1, [r4, #0]
 800386a:	ca20      	ldmia	r2!, {r5}
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	0608      	lsls	r0, r1, #24
 8003870:	d550      	bpl.n	8003914 <_printf_i+0x184>
 8003872:	07cb      	lsls	r3, r1, #31
 8003874:	d502      	bpl.n	800387c <_printf_i+0xec>
 8003876:	2320      	movs	r3, #32
 8003878:	4319      	orrs	r1, r3
 800387a:	6021      	str	r1, [r4, #0]
 800387c:	2710      	movs	r7, #16
 800387e:	2d00      	cmp	r5, #0
 8003880:	d103      	bne.n	800388a <_printf_i+0xfa>
 8003882:	2320      	movs	r3, #32
 8003884:	6822      	ldr	r2, [r4, #0]
 8003886:	439a      	bics	r2, r3
 8003888:	6022      	str	r2, [r4, #0]
 800388a:	0023      	movs	r3, r4
 800388c:	2200      	movs	r2, #0
 800388e:	3343      	adds	r3, #67	; 0x43
 8003890:	701a      	strb	r2, [r3, #0]
 8003892:	6863      	ldr	r3, [r4, #4]
 8003894:	60a3      	str	r3, [r4, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	db03      	blt.n	80038a2 <_printf_i+0x112>
 800389a:	2204      	movs	r2, #4
 800389c:	6821      	ldr	r1, [r4, #0]
 800389e:	4391      	bics	r1, r2
 80038a0:	6021      	str	r1, [r4, #0]
 80038a2:	2d00      	cmp	r5, #0
 80038a4:	d102      	bne.n	80038ac <_printf_i+0x11c>
 80038a6:	9e04      	ldr	r6, [sp, #16]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00c      	beq.n	80038c6 <_printf_i+0x136>
 80038ac:	9e04      	ldr	r6, [sp, #16]
 80038ae:	0028      	movs	r0, r5
 80038b0:	0039      	movs	r1, r7
 80038b2:	f7fc fcb9 	bl	8000228 <__aeabi_uidivmod>
 80038b6:	9b03      	ldr	r3, [sp, #12]
 80038b8:	3e01      	subs	r6, #1
 80038ba:	5c5b      	ldrb	r3, [r3, r1]
 80038bc:	7033      	strb	r3, [r6, #0]
 80038be:	002b      	movs	r3, r5
 80038c0:	0005      	movs	r5, r0
 80038c2:	429f      	cmp	r7, r3
 80038c4:	d9f3      	bls.n	80038ae <_printf_i+0x11e>
 80038c6:	2f08      	cmp	r7, #8
 80038c8:	d109      	bne.n	80038de <_printf_i+0x14e>
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	07db      	lsls	r3, r3, #31
 80038ce:	d506      	bpl.n	80038de <_printf_i+0x14e>
 80038d0:	6863      	ldr	r3, [r4, #4]
 80038d2:	6922      	ldr	r2, [r4, #16]
 80038d4:	4293      	cmp	r3, r2
 80038d6:	dc02      	bgt.n	80038de <_printf_i+0x14e>
 80038d8:	2330      	movs	r3, #48	; 0x30
 80038da:	3e01      	subs	r6, #1
 80038dc:	7033      	strb	r3, [r6, #0]
 80038de:	9b04      	ldr	r3, [sp, #16]
 80038e0:	1b9b      	subs	r3, r3, r6
 80038e2:	6123      	str	r3, [r4, #16]
 80038e4:	9b07      	ldr	r3, [sp, #28]
 80038e6:	0021      	movs	r1, r4
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	9805      	ldr	r0, [sp, #20]
 80038ec:	9b06      	ldr	r3, [sp, #24]
 80038ee:	aa09      	add	r2, sp, #36	; 0x24
 80038f0:	f7ff fede 	bl	80036b0 <_printf_common>
 80038f4:	1c43      	adds	r3, r0, #1
 80038f6:	d135      	bne.n	8003964 <_printf_i+0x1d4>
 80038f8:	2001      	movs	r0, #1
 80038fa:	4240      	negs	r0, r0
 80038fc:	b00b      	add	sp, #44	; 0x2c
 80038fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003900:	2220      	movs	r2, #32
 8003902:	6809      	ldr	r1, [r1, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	6022      	str	r2, [r4, #0]
 8003908:	0022      	movs	r2, r4
 800390a:	2178      	movs	r1, #120	; 0x78
 800390c:	3245      	adds	r2, #69	; 0x45
 800390e:	7011      	strb	r1, [r2, #0]
 8003910:	4a27      	ldr	r2, [pc, #156]	; (80039b0 <_printf_i+0x220>)
 8003912:	e7a7      	b.n	8003864 <_printf_i+0xd4>
 8003914:	0648      	lsls	r0, r1, #25
 8003916:	d5ac      	bpl.n	8003872 <_printf_i+0xe2>
 8003918:	b2ad      	uxth	r5, r5
 800391a:	e7aa      	b.n	8003872 <_printf_i+0xe2>
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	680d      	ldr	r5, [r1, #0]
 8003920:	1d10      	adds	r0, r2, #4
 8003922:	6949      	ldr	r1, [r1, #20]
 8003924:	6018      	str	r0, [r3, #0]
 8003926:	6813      	ldr	r3, [r2, #0]
 8003928:	062e      	lsls	r6, r5, #24
 800392a:	d501      	bpl.n	8003930 <_printf_i+0x1a0>
 800392c:	6019      	str	r1, [r3, #0]
 800392e:	e002      	b.n	8003936 <_printf_i+0x1a6>
 8003930:	066d      	lsls	r5, r5, #25
 8003932:	d5fb      	bpl.n	800392c <_printf_i+0x19c>
 8003934:	8019      	strh	r1, [r3, #0]
 8003936:	2300      	movs	r3, #0
 8003938:	9e04      	ldr	r6, [sp, #16]
 800393a:	6123      	str	r3, [r4, #16]
 800393c:	e7d2      	b.n	80038e4 <_printf_i+0x154>
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	1d11      	adds	r1, r2, #4
 8003942:	6019      	str	r1, [r3, #0]
 8003944:	6816      	ldr	r6, [r2, #0]
 8003946:	2100      	movs	r1, #0
 8003948:	0030      	movs	r0, r6
 800394a:	6862      	ldr	r2, [r4, #4]
 800394c:	f000 f8f6 	bl	8003b3c <memchr>
 8003950:	2800      	cmp	r0, #0
 8003952:	d001      	beq.n	8003958 <_printf_i+0x1c8>
 8003954:	1b80      	subs	r0, r0, r6
 8003956:	6060      	str	r0, [r4, #4]
 8003958:	6863      	ldr	r3, [r4, #4]
 800395a:	6123      	str	r3, [r4, #16]
 800395c:	2300      	movs	r3, #0
 800395e:	9a04      	ldr	r2, [sp, #16]
 8003960:	7013      	strb	r3, [r2, #0]
 8003962:	e7bf      	b.n	80038e4 <_printf_i+0x154>
 8003964:	6923      	ldr	r3, [r4, #16]
 8003966:	0032      	movs	r2, r6
 8003968:	9906      	ldr	r1, [sp, #24]
 800396a:	9805      	ldr	r0, [sp, #20]
 800396c:	9d07      	ldr	r5, [sp, #28]
 800396e:	47a8      	blx	r5
 8003970:	1c43      	adds	r3, r0, #1
 8003972:	d0c1      	beq.n	80038f8 <_printf_i+0x168>
 8003974:	6823      	ldr	r3, [r4, #0]
 8003976:	079b      	lsls	r3, r3, #30
 8003978:	d415      	bmi.n	80039a6 <_printf_i+0x216>
 800397a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800397c:	68e0      	ldr	r0, [r4, #12]
 800397e:	4298      	cmp	r0, r3
 8003980:	dabc      	bge.n	80038fc <_printf_i+0x16c>
 8003982:	0018      	movs	r0, r3
 8003984:	e7ba      	b.n	80038fc <_printf_i+0x16c>
 8003986:	0022      	movs	r2, r4
 8003988:	2301      	movs	r3, #1
 800398a:	9906      	ldr	r1, [sp, #24]
 800398c:	9805      	ldr	r0, [sp, #20]
 800398e:	9e07      	ldr	r6, [sp, #28]
 8003990:	3219      	adds	r2, #25
 8003992:	47b0      	blx	r6
 8003994:	1c43      	adds	r3, r0, #1
 8003996:	d0af      	beq.n	80038f8 <_printf_i+0x168>
 8003998:	3501      	adds	r5, #1
 800399a:	68e3      	ldr	r3, [r4, #12]
 800399c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800399e:	1a9b      	subs	r3, r3, r2
 80039a0:	42ab      	cmp	r3, r5
 80039a2:	dcf0      	bgt.n	8003986 <_printf_i+0x1f6>
 80039a4:	e7e9      	b.n	800397a <_printf_i+0x1ea>
 80039a6:	2500      	movs	r5, #0
 80039a8:	e7f7      	b.n	800399a <_printf_i+0x20a>
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	08003f21 	.word	0x08003f21
 80039b0:	08003f32 	.word	0x08003f32

080039b4 <_sbrk_r>:
 80039b4:	2300      	movs	r3, #0
 80039b6:	b570      	push	{r4, r5, r6, lr}
 80039b8:	4d06      	ldr	r5, [pc, #24]	; (80039d4 <_sbrk_r+0x20>)
 80039ba:	0004      	movs	r4, r0
 80039bc:	0008      	movs	r0, r1
 80039be:	602b      	str	r3, [r5, #0]
 80039c0:	f7fc fff0 	bl	80009a4 <_sbrk>
 80039c4:	1c43      	adds	r3, r0, #1
 80039c6:	d103      	bne.n	80039d0 <_sbrk_r+0x1c>
 80039c8:	682b      	ldr	r3, [r5, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d000      	beq.n	80039d0 <_sbrk_r+0x1c>
 80039ce:	6023      	str	r3, [r4, #0]
 80039d0:	bd70      	pop	{r4, r5, r6, pc}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	200002b4 	.word	0x200002b4

080039d8 <__sread>:
 80039d8:	b570      	push	{r4, r5, r6, lr}
 80039da:	000c      	movs	r4, r1
 80039dc:	250e      	movs	r5, #14
 80039de:	5f49      	ldrsh	r1, [r1, r5]
 80039e0:	f000 f8c8 	bl	8003b74 <_read_r>
 80039e4:	2800      	cmp	r0, #0
 80039e6:	db03      	blt.n	80039f0 <__sread+0x18>
 80039e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80039ea:	181b      	adds	r3, r3, r0
 80039ec:	6563      	str	r3, [r4, #84]	; 0x54
 80039ee:	bd70      	pop	{r4, r5, r6, pc}
 80039f0:	89a3      	ldrh	r3, [r4, #12]
 80039f2:	4a02      	ldr	r2, [pc, #8]	; (80039fc <__sread+0x24>)
 80039f4:	4013      	ands	r3, r2
 80039f6:	81a3      	strh	r3, [r4, #12]
 80039f8:	e7f9      	b.n	80039ee <__sread+0x16>
 80039fa:	46c0      	nop			; (mov r8, r8)
 80039fc:	ffffefff 	.word	0xffffefff

08003a00 <__swrite>:
 8003a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a02:	001f      	movs	r7, r3
 8003a04:	898b      	ldrh	r3, [r1, #12]
 8003a06:	0005      	movs	r5, r0
 8003a08:	000c      	movs	r4, r1
 8003a0a:	0016      	movs	r6, r2
 8003a0c:	05db      	lsls	r3, r3, #23
 8003a0e:	d505      	bpl.n	8003a1c <__swrite+0x1c>
 8003a10:	230e      	movs	r3, #14
 8003a12:	5ec9      	ldrsh	r1, [r1, r3]
 8003a14:	2200      	movs	r2, #0
 8003a16:	2302      	movs	r3, #2
 8003a18:	f000 f87c 	bl	8003b14 <_lseek_r>
 8003a1c:	89a3      	ldrh	r3, [r4, #12]
 8003a1e:	4a05      	ldr	r2, [pc, #20]	; (8003a34 <__swrite+0x34>)
 8003a20:	0028      	movs	r0, r5
 8003a22:	4013      	ands	r3, r2
 8003a24:	81a3      	strh	r3, [r4, #12]
 8003a26:	0032      	movs	r2, r6
 8003a28:	230e      	movs	r3, #14
 8003a2a:	5ee1      	ldrsh	r1, [r4, r3]
 8003a2c:	003b      	movs	r3, r7
 8003a2e:	f000 f81f 	bl	8003a70 <_write_r>
 8003a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a34:	ffffefff 	.word	0xffffefff

08003a38 <__sseek>:
 8003a38:	b570      	push	{r4, r5, r6, lr}
 8003a3a:	000c      	movs	r4, r1
 8003a3c:	250e      	movs	r5, #14
 8003a3e:	5f49      	ldrsh	r1, [r1, r5]
 8003a40:	f000 f868 	bl	8003b14 <_lseek_r>
 8003a44:	89a3      	ldrh	r3, [r4, #12]
 8003a46:	1c42      	adds	r2, r0, #1
 8003a48:	d103      	bne.n	8003a52 <__sseek+0x1a>
 8003a4a:	4a05      	ldr	r2, [pc, #20]	; (8003a60 <__sseek+0x28>)
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	81a3      	strh	r3, [r4, #12]
 8003a50:	bd70      	pop	{r4, r5, r6, pc}
 8003a52:	2280      	movs	r2, #128	; 0x80
 8003a54:	0152      	lsls	r2, r2, #5
 8003a56:	4313      	orrs	r3, r2
 8003a58:	81a3      	strh	r3, [r4, #12]
 8003a5a:	6560      	str	r0, [r4, #84]	; 0x54
 8003a5c:	e7f8      	b.n	8003a50 <__sseek+0x18>
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	ffffefff 	.word	0xffffefff

08003a64 <__sclose>:
 8003a64:	b510      	push	{r4, lr}
 8003a66:	230e      	movs	r3, #14
 8003a68:	5ec9      	ldrsh	r1, [r1, r3]
 8003a6a:	f000 f81d 	bl	8003aa8 <_close_r>
 8003a6e:	bd10      	pop	{r4, pc}

08003a70 <_write_r>:
 8003a70:	b570      	push	{r4, r5, r6, lr}
 8003a72:	0004      	movs	r4, r0
 8003a74:	0008      	movs	r0, r1
 8003a76:	0011      	movs	r1, r2
 8003a78:	001a      	movs	r2, r3
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	4d05      	ldr	r5, [pc, #20]	; (8003a94 <_write_r+0x24>)
 8003a7e:	602b      	str	r3, [r5, #0]
 8003a80:	f7fc fbd8 	bl	8000234 <_write>
 8003a84:	1c43      	adds	r3, r0, #1
 8003a86:	d103      	bne.n	8003a90 <_write_r+0x20>
 8003a88:	682b      	ldr	r3, [r5, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d000      	beq.n	8003a90 <_write_r+0x20>
 8003a8e:	6023      	str	r3, [r4, #0]
 8003a90:	bd70      	pop	{r4, r5, r6, pc}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	200002b4 	.word	0x200002b4

08003a98 <abort>:
 8003a98:	2006      	movs	r0, #6
 8003a9a:	b510      	push	{r4, lr}
 8003a9c:	f000 f8a8 	bl	8003bf0 <raise>
 8003aa0:	2001      	movs	r0, #1
 8003aa2:	f7fc ff29 	bl	80008f8 <_exit>
	...

08003aa8 <_close_r>:
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	b570      	push	{r4, r5, r6, lr}
 8003aac:	4d06      	ldr	r5, [pc, #24]	; (8003ac8 <_close_r+0x20>)
 8003aae:	0004      	movs	r4, r0
 8003ab0:	0008      	movs	r0, r1
 8003ab2:	602b      	str	r3, [r5, #0]
 8003ab4:	f7fc ff49 	bl	800094a <_close>
 8003ab8:	1c43      	adds	r3, r0, #1
 8003aba:	d103      	bne.n	8003ac4 <_close_r+0x1c>
 8003abc:	682b      	ldr	r3, [r5, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d000      	beq.n	8003ac4 <_close_r+0x1c>
 8003ac2:	6023      	str	r3, [r4, #0]
 8003ac4:	bd70      	pop	{r4, r5, r6, pc}
 8003ac6:	46c0      	nop			; (mov r8, r8)
 8003ac8:	200002b4 	.word	0x200002b4

08003acc <_fstat_r>:
 8003acc:	2300      	movs	r3, #0
 8003ace:	b570      	push	{r4, r5, r6, lr}
 8003ad0:	4d06      	ldr	r5, [pc, #24]	; (8003aec <_fstat_r+0x20>)
 8003ad2:	0004      	movs	r4, r0
 8003ad4:	0008      	movs	r0, r1
 8003ad6:	0011      	movs	r1, r2
 8003ad8:	602b      	str	r3, [r5, #0]
 8003ada:	f7fc ff40 	bl	800095e <_fstat>
 8003ade:	1c43      	adds	r3, r0, #1
 8003ae0:	d103      	bne.n	8003aea <_fstat_r+0x1e>
 8003ae2:	682b      	ldr	r3, [r5, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d000      	beq.n	8003aea <_fstat_r+0x1e>
 8003ae8:	6023      	str	r3, [r4, #0]
 8003aea:	bd70      	pop	{r4, r5, r6, pc}
 8003aec:	200002b4 	.word	0x200002b4

08003af0 <_isatty_r>:
 8003af0:	2300      	movs	r3, #0
 8003af2:	b570      	push	{r4, r5, r6, lr}
 8003af4:	4d06      	ldr	r5, [pc, #24]	; (8003b10 <_isatty_r+0x20>)
 8003af6:	0004      	movs	r4, r0
 8003af8:	0008      	movs	r0, r1
 8003afa:	602b      	str	r3, [r5, #0]
 8003afc:	f7fc ff3d 	bl	800097a <_isatty>
 8003b00:	1c43      	adds	r3, r0, #1
 8003b02:	d103      	bne.n	8003b0c <_isatty_r+0x1c>
 8003b04:	682b      	ldr	r3, [r5, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d000      	beq.n	8003b0c <_isatty_r+0x1c>
 8003b0a:	6023      	str	r3, [r4, #0]
 8003b0c:	bd70      	pop	{r4, r5, r6, pc}
 8003b0e:	46c0      	nop			; (mov r8, r8)
 8003b10:	200002b4 	.word	0x200002b4

08003b14 <_lseek_r>:
 8003b14:	b570      	push	{r4, r5, r6, lr}
 8003b16:	0004      	movs	r4, r0
 8003b18:	0008      	movs	r0, r1
 8003b1a:	0011      	movs	r1, r2
 8003b1c:	001a      	movs	r2, r3
 8003b1e:	2300      	movs	r3, #0
 8003b20:	4d05      	ldr	r5, [pc, #20]	; (8003b38 <_lseek_r+0x24>)
 8003b22:	602b      	str	r3, [r5, #0]
 8003b24:	f7fc ff32 	bl	800098c <_lseek>
 8003b28:	1c43      	adds	r3, r0, #1
 8003b2a:	d103      	bne.n	8003b34 <_lseek_r+0x20>
 8003b2c:	682b      	ldr	r3, [r5, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d000      	beq.n	8003b34 <_lseek_r+0x20>
 8003b32:	6023      	str	r3, [r4, #0]
 8003b34:	bd70      	pop	{r4, r5, r6, pc}
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	200002b4 	.word	0x200002b4

08003b3c <memchr>:
 8003b3c:	b2c9      	uxtb	r1, r1
 8003b3e:	1882      	adds	r2, r0, r2
 8003b40:	4290      	cmp	r0, r2
 8003b42:	d101      	bne.n	8003b48 <memchr+0xc>
 8003b44:	2000      	movs	r0, #0
 8003b46:	4770      	bx	lr
 8003b48:	7803      	ldrb	r3, [r0, #0]
 8003b4a:	428b      	cmp	r3, r1
 8003b4c:	d0fb      	beq.n	8003b46 <memchr+0xa>
 8003b4e:	3001      	adds	r0, #1
 8003b50:	e7f6      	b.n	8003b40 <memchr+0x4>
	...

08003b54 <__malloc_lock>:
 8003b54:	b510      	push	{r4, lr}
 8003b56:	4802      	ldr	r0, [pc, #8]	; (8003b60 <__malloc_lock+0xc>)
 8003b58:	f7ff fb27 	bl	80031aa <__retarget_lock_acquire_recursive>
 8003b5c:	bd10      	pop	{r4, pc}
 8003b5e:	46c0      	nop			; (mov r8, r8)
 8003b60:	200002ac 	.word	0x200002ac

08003b64 <__malloc_unlock>:
 8003b64:	b510      	push	{r4, lr}
 8003b66:	4802      	ldr	r0, [pc, #8]	; (8003b70 <__malloc_unlock+0xc>)
 8003b68:	f7ff fb20 	bl	80031ac <__retarget_lock_release_recursive>
 8003b6c:	bd10      	pop	{r4, pc}
 8003b6e:	46c0      	nop			; (mov r8, r8)
 8003b70:	200002ac 	.word	0x200002ac

08003b74 <_read_r>:
 8003b74:	b570      	push	{r4, r5, r6, lr}
 8003b76:	0004      	movs	r4, r0
 8003b78:	0008      	movs	r0, r1
 8003b7a:	0011      	movs	r1, r2
 8003b7c:	001a      	movs	r2, r3
 8003b7e:	2300      	movs	r3, #0
 8003b80:	4d05      	ldr	r5, [pc, #20]	; (8003b98 <_read_r+0x24>)
 8003b82:	602b      	str	r3, [r5, #0]
 8003b84:	f7fc fec4 	bl	8000910 <_read>
 8003b88:	1c43      	adds	r3, r0, #1
 8003b8a:	d103      	bne.n	8003b94 <_read_r+0x20>
 8003b8c:	682b      	ldr	r3, [r5, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d000      	beq.n	8003b94 <_read_r+0x20>
 8003b92:	6023      	str	r3, [r4, #0]
 8003b94:	bd70      	pop	{r4, r5, r6, pc}
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	200002b4 	.word	0x200002b4

08003b9c <_raise_r>:
 8003b9c:	b570      	push	{r4, r5, r6, lr}
 8003b9e:	0004      	movs	r4, r0
 8003ba0:	000d      	movs	r5, r1
 8003ba2:	291f      	cmp	r1, #31
 8003ba4:	d904      	bls.n	8003bb0 <_raise_r+0x14>
 8003ba6:	2316      	movs	r3, #22
 8003ba8:	6003      	str	r3, [r0, #0]
 8003baa:	2001      	movs	r0, #1
 8003bac:	4240      	negs	r0, r0
 8003bae:	bd70      	pop	{r4, r5, r6, pc}
 8003bb0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d004      	beq.n	8003bc0 <_raise_r+0x24>
 8003bb6:	008a      	lsls	r2, r1, #2
 8003bb8:	189b      	adds	r3, r3, r2
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	2a00      	cmp	r2, #0
 8003bbe:	d108      	bne.n	8003bd2 <_raise_r+0x36>
 8003bc0:	0020      	movs	r0, r4
 8003bc2:	f000 f831 	bl	8003c28 <_getpid_r>
 8003bc6:	002a      	movs	r2, r5
 8003bc8:	0001      	movs	r1, r0
 8003bca:	0020      	movs	r0, r4
 8003bcc:	f000 f81a 	bl	8003c04 <_kill_r>
 8003bd0:	e7ed      	b.n	8003bae <_raise_r+0x12>
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	2a01      	cmp	r2, #1
 8003bd6:	d0ea      	beq.n	8003bae <_raise_r+0x12>
 8003bd8:	1c51      	adds	r1, r2, #1
 8003bda:	d103      	bne.n	8003be4 <_raise_r+0x48>
 8003bdc:	2316      	movs	r3, #22
 8003bde:	3001      	adds	r0, #1
 8003be0:	6023      	str	r3, [r4, #0]
 8003be2:	e7e4      	b.n	8003bae <_raise_r+0x12>
 8003be4:	2400      	movs	r4, #0
 8003be6:	0028      	movs	r0, r5
 8003be8:	601c      	str	r4, [r3, #0]
 8003bea:	4790      	blx	r2
 8003bec:	0020      	movs	r0, r4
 8003bee:	e7de      	b.n	8003bae <_raise_r+0x12>

08003bf0 <raise>:
 8003bf0:	b510      	push	{r4, lr}
 8003bf2:	4b03      	ldr	r3, [pc, #12]	; (8003c00 <raise+0x10>)
 8003bf4:	0001      	movs	r1, r0
 8003bf6:	6818      	ldr	r0, [r3, #0]
 8003bf8:	f7ff ffd0 	bl	8003b9c <_raise_r>
 8003bfc:	bd10      	pop	{r4, pc}
 8003bfe:	46c0      	nop			; (mov r8, r8)
 8003c00:	2000000c 	.word	0x2000000c

08003c04 <_kill_r>:
 8003c04:	2300      	movs	r3, #0
 8003c06:	b570      	push	{r4, r5, r6, lr}
 8003c08:	4d06      	ldr	r5, [pc, #24]	; (8003c24 <_kill_r+0x20>)
 8003c0a:	0004      	movs	r4, r0
 8003c0c:	0008      	movs	r0, r1
 8003c0e:	0011      	movs	r1, r2
 8003c10:	602b      	str	r3, [r5, #0]
 8003c12:	f7fc fe61 	bl	80008d8 <_kill>
 8003c16:	1c43      	adds	r3, r0, #1
 8003c18:	d103      	bne.n	8003c22 <_kill_r+0x1e>
 8003c1a:	682b      	ldr	r3, [r5, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d000      	beq.n	8003c22 <_kill_r+0x1e>
 8003c20:	6023      	str	r3, [r4, #0]
 8003c22:	bd70      	pop	{r4, r5, r6, pc}
 8003c24:	200002b4 	.word	0x200002b4

08003c28 <_getpid_r>:
 8003c28:	b510      	push	{r4, lr}
 8003c2a:	f7fc fe4f 	bl	80008cc <_getpid>
 8003c2e:	bd10      	pop	{r4, pc}

08003c30 <_init>:
 8003c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c32:	46c0      	nop			; (mov r8, r8)
 8003c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c36:	bc08      	pop	{r3}
 8003c38:	469e      	mov	lr, r3
 8003c3a:	4770      	bx	lr

08003c3c <_fini>:
 8003c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c42:	bc08      	pop	{r3}
 8003c44:	469e      	mov	lr, r3
 8003c46:	4770      	bx	lr
